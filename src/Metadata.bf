/*  Auto Generated by Setup/Program.bf
 *  DO NOT EDIT
 */

using System;
using System.Interop;

using Vulkan;
using Vulkan.Metadata;

namespace Vulkan.Metadata;

enum VulkanApiVersion
{
	VK_VERSION_1_0 = VK_API_VERSION_1_0,
	VK_VERSION_1_1 = VK_API_VERSION_1_1,
	VK_VERSION_1_2 = VK_API_VERSION_1_2,
	VK_VERSION_1_3 = VK_API_VERSION_1_3,
	VK_VERSION_1_4 = VK_API_VERSION_1_4,
}

enum VulkanExtension
{
	case VK_KHR_surface = 1;
	case VK_KHR_swapchain = 2;
	case VK_KHR_display = 3;
	case VK_KHR_display_swapchain = 4;
	case VK_EXT_debug_report = 12;
	case VK_NV_glsl_shader = 13;
	case VK_EXT_depth_range_unrestricted = 14;
	case VK_KHR_sampler_mirror_clamp_to_edge = 15;
	case VK_IMG_filter_cubic = 16;
	case VK_AMD_rasterization_order = 19;
	case VK_AMD_shader_trinary_minmax = 21;
	case VK_AMD_shader_explicit_vertex_parameter = 22;
	case VK_EXT_debug_marker = 23;
	case VK_KHR_video_queue = 24;
	case VK_KHR_video_decode_queue = 25;
	case VK_AMD_gcn_shader = 26;
	case VK_NV_dedicated_allocation = 27;
	case VK_EXT_transform_feedback = 29;
	case VK_NVX_binary_import = 30;
	case VK_NVX_image_view_handle = 31;
	case VK_AMD_draw_indirect_count = 34;
	case VK_AMD_negative_viewport_height = 36;
	case VK_AMD_gpu_shader_half_float = 37;
	case VK_AMD_shader_ballot = 38;
	case VK_KHR_video_encode_h264 = 39;
	case VK_KHR_video_encode_h265 = 40;
	case VK_KHR_video_decode_h264 = 41;
	case VK_AMD_texture_gather_bias_lod = 42;
	case VK_AMD_shader_info = 43;
	case VK_KHR_dynamic_rendering = 45;
	case VK_AMD_shader_image_load_store_lod = 47;
	case VK_NV_corner_sampled_image = 51;
	case VK_KHR_multiview = 54;
	case VK_IMG_format_pvrtc = 55;
	case VK_NV_external_memory_capabilities = 56;
	case VK_NV_external_memory = 57;
	case VK_KHR_get_physical_device_properties2 = 60;
	case VK_KHR_device_group = 61;
	case VK_EXT_validation_flags = 62;
	case VK_KHR_shader_draw_parameters = 64;
	case VK_EXT_shader_subgroup_ballot = 65;
	case VK_EXT_shader_subgroup_vote = 66;
	case VK_EXT_texture_compression_astc_hdr = 67;
	case VK_EXT_astc_decode_mode = 68;
	case VK_EXT_pipeline_robustness = 69;
	case VK_KHR_maintenance1 = 70;
	case VK_KHR_device_group_creation = 71;
	case VK_KHR_external_memory_capabilities = 72;
	case VK_KHR_external_memory = 73;
	case VK_KHR_external_memory_fd = 75;
	case VK_KHR_external_semaphore_capabilities = 77;
	case VK_KHR_external_semaphore = 78;
	case VK_KHR_external_semaphore_fd = 80;
	case VK_KHR_push_descriptor = 81;
	case VK_EXT_conditional_rendering = 82;
	case VK_KHR_shader_float16_int8 = 83;
	case VK_KHR_16bit_storage = 84;
	case VK_KHR_incremental_present = 85;
	case VK_KHR_descriptor_update_template = 86;
	case VK_NV_clip_space_w_scaling = 88;
	case VK_EXT_direct_mode_display = 89;
	case VK_EXT_display_surface_counter = 91;
	case VK_EXT_display_control = 92;
	case VK_GOOGLE_display_timing = 93;
	case VK_NV_sample_mask_override_coverage = 95;
	case VK_NV_geometry_shader_passthrough = 96;
	case VK_NV_viewport_array2 = 97;
	case VK_NVX_multiview_per_view_attributes = 98;
	case VK_NV_viewport_swizzle = 99;
	case VK_EXT_discard_rectangles = 100;
	case VK_EXT_conservative_rasterization = 102;
	case VK_EXT_depth_clip_enable = 103;
	case VK_EXT_swapchain_colorspace = 105;
	case VK_EXT_hdr_metadata = 106;
	case VK_KHR_imageless_framebuffer = 109;
	case VK_KHR_create_renderpass2 = 110;
	case VK_IMG_relaxed_line_rasterization = 111;
	case VK_KHR_shared_presentable_image = 112;
	case VK_KHR_external_fence_capabilities = 113;
	case VK_KHR_external_fence = 114;
	case VK_KHR_external_fence_fd = 116;
	case VK_KHR_performance_query = 117;
	case VK_KHR_maintenance2 = 118;
	case VK_KHR_get_surface_capabilities2 = 120;
	case VK_KHR_variable_pointers = 121;
	case VK_KHR_get_display_properties2 = 122;
	case VK_EXT_external_memory_dma_buf = 126;
	case VK_EXT_queue_family_foreign = 127;
	case VK_KHR_dedicated_allocation = 128;
	case VK_EXT_debug_utils = 129;
	case VK_EXT_sampler_filter_minmax = 131;
	case VK_KHR_storage_buffer_storage_class = 132;
	case VK_AMD_gpu_shader_int16 = 133;
	case VK_AMD_mixed_attachment_samples = 137;
	case VK_AMD_shader_fragment_mask = 138;
	case VK_EXT_inline_uniform_block = 139;
	case VK_EXT_shader_stencil_export = 141;
	case VK_KHR_shader_bfloat16 = 142;
	case VK_EXT_sample_locations = 144;
	case VK_KHR_relaxed_block_layout = 145;
	case VK_KHR_get_memory_requirements2 = 147;
	case VK_KHR_image_format_list = 148;
	case VK_EXT_blend_operation_advanced = 149;
	case VK_NV_fragment_coverage_to_color = 150;
	case VK_KHR_acceleration_structure = 151;
	case VK_KHR_ray_tracing_pipeline = 348;
	case VK_KHR_ray_query = 349;
	case VK_NV_framebuffer_mixed_samples = 153;
	case VK_NV_fill_rectangle = 154;
	case VK_NV_shader_sm_builtins = 155;
	case VK_EXT_post_depth_coverage = 156;
	case VK_KHR_sampler_ycbcr_conversion = 157;
	case VK_KHR_bind_memory2 = 158;
	case VK_EXT_image_drm_format_modifier = 159;
	case VK_EXT_validation_cache = 161;
	case VK_EXT_descriptor_indexing = 162;
	case VK_EXT_shader_viewport_index_layer = 163;
	case VK_NV_shading_rate_image = 165;
	case VK_NV_ray_tracing = 166;
	case VK_NV_representative_fragment_test = 167;
	case VK_KHR_maintenance3 = 169;
	case VK_KHR_draw_indirect_count = 170;
	case VK_EXT_filter_cubic = 171;
	case VK_QCOM_render_pass_shader_resolve = 172;
	case VK_EXT_global_priority = 175;
	case VK_KHR_shader_subgroup_extended_types = 176;
	case VK_KHR_8bit_storage = 178;
	case VK_EXT_external_memory_host = 179;
	case VK_AMD_buffer_marker = 180;
	case VK_KHR_shader_atomic_int64 = 181;
	case VK_KHR_shader_clock = 182;
	case VK_AMD_pipeline_compiler_control = 184;
	case VK_EXT_calibrated_timestamps = 185;
	case VK_AMD_shader_core_properties = 186;
	case VK_KHR_video_decode_h265 = 188;
	case VK_KHR_global_priority = 189;
	case VK_AMD_memory_overallocation_behavior = 190;
	case VK_EXT_vertex_attribute_divisor = 191;
	case VK_EXT_pipeline_creation_feedback = 193;
	case VK_KHR_driver_properties = 197;
	case VK_KHR_shader_float_controls = 198;
	case VK_NV_shader_subgroup_partitioned = 199;
	case VK_KHR_depth_stencil_resolve = 200;
	case VK_KHR_swapchain_mutable_format = 201;
	case VK_NV_compute_shader_derivatives = 202;
	case VK_NV_mesh_shader = 203;
	case VK_NV_fragment_shader_barycentric = 204;
	case VK_NV_shader_image_footprint = 205;
	case VK_NV_scissor_exclusive = 206;
	case VK_NV_device_diagnostic_checkpoints = 207;
	case VK_KHR_timeline_semaphore = 208;
	case VK_INTEL_shader_integer_functions2 = 210;
	case VK_INTEL_performance_query = 211;
	case VK_KHR_vulkan_memory_model = 212;
	case VK_EXT_pci_bus_info = 213;
	case VK_AMD_display_native_hdr = 214;
	case VK_KHR_shader_terminate_invocation = 216;
	case VK_EXT_fragment_density_map = 219;
	case VK_EXT_scalar_block_layout = 222;
	case VK_GOOGLE_hlsl_functionality1 = 224;
	case VK_GOOGLE_decorate_string = 225;
	case VK_EXT_subgroup_size_control = 226;
	case VK_KHR_fragment_shading_rate = 227;
	case VK_AMD_shader_core_properties2 = 228;
	case VK_AMD_device_coherent_memory = 230;
	case VK_KHR_dynamic_rendering_local_read = 233;
	case VK_EXT_shader_image_atomic_int64 = 235;
	case VK_KHR_shader_quad_control = 236;
	case VK_KHR_spirv_1_4 = 237;
	case VK_EXT_memory_budget = 238;
	case VK_EXT_memory_priority = 239;
	case VK_KHR_surface_protected_capabilities = 240;
	case VK_NV_dedicated_allocation_image_aliasing = 241;
	case VK_KHR_separate_depth_stencil_layouts = 242;
	case VK_EXT_buffer_device_address = 245;
	case VK_EXT_tooling_info = 246;
	case VK_EXT_separate_stencil_usage = 247;
	case VK_EXT_validation_features = 248;
	case VK_KHR_present_wait = 249;
	case VK_NV_cooperative_matrix = 250;
	case VK_NV_coverage_reduction_mode = 251;
	case VK_EXT_fragment_shader_interlock = 252;
	case VK_EXT_ycbcr_image_arrays = 253;
	case VK_KHR_uniform_buffer_standard_layout = 254;
	case VK_EXT_provoking_vertex = 255;
	case VK_EXT_headless_surface = 257;
	case VK_KHR_buffer_device_address = 258;
	case VK_EXT_line_rasterization = 260;
	case VK_EXT_shader_atomic_float = 261;
	case VK_EXT_host_query_reset = 262;
	case VK_EXT_index_type_uint8 = 266;
	case VK_EXT_extended_dynamic_state = 268;
	case VK_KHR_deferred_host_operations = 269;
	case VK_KHR_pipeline_executable_properties = 270;
	case VK_EXT_host_image_copy = 271;
	case VK_KHR_map_memory2 = 272;
	case VK_EXT_map_memory_placed = 273;
	case VK_EXT_shader_atomic_float2 = 274;
	case VK_EXT_surface_maintenance1 = 275;
	case VK_EXT_swapchain_maintenance1 = 276;
	case VK_EXT_shader_demote_to_helper_invocation = 277;
	case VK_NV_device_generated_commands = 278;
	case VK_NV_inherited_viewport_scissor = 279;
	case VK_KHR_shader_integer_dot_product = 281;
	case VK_EXT_texel_buffer_alignment = 282;
	case VK_QCOM_render_pass_transform = 283;
	case VK_EXT_depth_bias_control = 284;
	case VK_EXT_device_memory_report = 285;
	case VK_EXT_acquire_drm_display = 286;
	case VK_EXT_robustness2 = 287;
	case VK_EXT_custom_border_color = 288;
	case VK_GOOGLE_user_type = 290;
	case VK_KHR_pipeline_library = 291;
	case VK_NV_present_barrier = 293;
	case VK_KHR_shader_non_semantic_info = 294;
	case VK_KHR_present_id = 295;
	case VK_EXT_private_data = 296;
	case VK_EXT_pipeline_creation_cache_control = 298;
	case VK_KHR_video_encode_queue = 300;
	case VK_NV_device_diagnostics_config = 301;
	case VK_QCOM_render_pass_store_ops = 302;
	case VK_QCOM_tile_shading = 310;
	case VK_NV_low_latency = 311;
	case VK_KHR_synchronization2 = 315;
	case VK_EXT_descriptor_buffer = 317;
	case VK_EXT_graphics_pipeline_library = 321;
	case VK_AMD_shader_early_and_late_fragment_tests = 322;
	case VK_KHR_fragment_shader_barycentric = 323;
	case VK_KHR_shader_subgroup_uniform_control_flow = 324;
	case VK_KHR_zero_initialize_workgroup_memory = 326;
	case VK_NV_fragment_shading_rate_enums = 327;
	case VK_NV_ray_tracing_motion_blur = 328;
	case VK_EXT_mesh_shader = 329;
	case VK_EXT_ycbcr_2plane_444_formats = 331;
	case VK_EXT_fragment_density_map2 = 333;
	case VK_QCOM_rotated_copy_commands = 334;
	case VK_EXT_image_robustness = 336;
	case VK_KHR_workgroup_memory_explicit_layout = 337;
	case VK_KHR_copy_commands2 = 338;
	case VK_EXT_image_compression_control = 339;
	case VK_EXT_attachment_feedback_loop_layout = 340;
	case VK_EXT_4444_formats = 341;
	case VK_EXT_device_fault = 342;
	case VK_ARM_rasterization_order_attachment_access = 343;
	case VK_EXT_rgba10x6_formats = 345;
	case VK_VALVE_mutable_descriptor_type = 352;
	case VK_EXT_vertex_input_dynamic_state = 353;
	case VK_EXT_physical_device_drm = 354;
	case VK_EXT_device_address_binding_report = 355;
	case VK_EXT_depth_clip_control = 356;
	case VK_EXT_primitive_topology_list_restart = 357;
	case VK_KHR_format_feature_flags2 = 361;
	case VK_EXT_present_mode_fifo_latest_ready = 362;
	case VK_HUAWEI_subpass_shading = 370;
	case VK_HUAWEI_invocation_mask = 371;
	case VK_NV_external_memory_rdma = 372;
	case VK_EXT_pipeline_properties = 373;
	case VK_EXT_frame_boundary = 376;
	case VK_EXT_multisampled_render_to_single_sampled = 377;
	case VK_EXT_extended_dynamic_state2 = 378;
	case VK_EXT_color_write_enable = 382;
	case VK_EXT_primitives_generated_query = 383;
	case VK_KHR_ray_tracing_maintenance1 = 387;
	case VK_EXT_global_priority_query = 389;
	case VK_EXT_image_view_min_lod = 392;
	case VK_EXT_multi_draw = 393;
	case VK_EXT_image_2d_view_of_3d = 394;
	case VK_KHR_portability_enumeration = 395;
	case VK_EXT_shader_tile_image = 396;
	case VK_EXT_opacity_micromap = 397;
	case VK_EXT_load_store_op_none = 401;
	case VK_HUAWEI_cluster_culling_shader = 405;
	case VK_EXT_border_color_swizzle = 412;
	case VK_EXT_pageable_device_local_memory = 413;
	case VK_KHR_maintenance4 = 414;
	case VK_ARM_shader_core_properties = 416;
	case VK_KHR_shader_subgroup_rotate = 417;
	case VK_ARM_scheduling_controls = 418;
	case VK_EXT_image_sliced_view_of_3d = 419;
	case VK_VALVE_descriptor_set_host_mapping = 421;
	case VK_EXT_depth_clamp_zero_one = 422;
	case VK_EXT_non_seamless_cube_map = 423;
	case VK_ARM_render_pass_striped = 425;
	case VK_QCOM_fragment_density_map_offset = 426;
	case VK_NV_copy_memory_indirect = 427;
	case VK_NV_memory_decompression = 428;
	case VK_NV_device_generated_commands_compute = 429;
	case VK_NV_ray_tracing_linear_swept_spheres = 430;
	case VK_NV_linear_color_attachment = 431;
	case VK_GOOGLE_surfaceless_query = 434;
	case VK_KHR_shader_maximal_reconvergence = 435;
	case VK_EXT_image_compression_control_swapchain = 438;
	case VK_QCOM_image_processing = 441;
	case VK_EXT_nested_command_buffer = 452;
	case VK_EXT_external_memory_acquire_unmodified = 454;
	case VK_EXT_extended_dynamic_state3 = 456;
	case VK_EXT_subpass_merge_feedback = 459;
	case VK_LUNARG_direct_driver_loading = 460;
	case VK_ARM_tensors = 461;
	case VK_EXT_shader_module_identifier = 463;
	case VK_EXT_rasterization_order_attachment_access = 464;
	case VK_NV_optical_flow = 465;
	case VK_EXT_legacy_dithering = 466;
	case VK_EXT_pipeline_protected_access = 467;
	case VK_KHR_maintenance5 = 471;
	case VK_AMD_anti_lag = 477;
	case VK_KHR_present_id2 = 480;
	case VK_KHR_present_wait2 = 481;
	case VK_KHR_ray_tracing_position_fetch = 482;
	case VK_EXT_shader_object = 483;
	case VK_KHR_pipeline_binary = 484;
	case VK_QCOM_tile_properties = 485;
	case VK_SEC_amigo_profiling = 486;
	case VK_KHR_surface_maintenance1 = 487;
	case VK_KHR_swapchain_maintenance1 = 488;
	case VK_QCOM_multiview_per_view_viewports = 489;
	case VK_NV_ray_tracing_invocation_reorder = 491;
	case VK_NV_cooperative_vector = 492;
	case VK_NV_extended_sparse_address_space = 493;
	case VK_EXT_mutable_descriptor_type = 495;
	case VK_EXT_legacy_vertex_attributes = 496;
	case VK_EXT_layer_settings = 497;
	case VK_ARM_shader_core_builtins = 498;
	case VK_EXT_pipeline_library_group_handles = 499;
	case VK_EXT_dynamic_rendering_unused_attachments = 500;
	case VK_NV_low_latency2 = 506;
	case VK_KHR_cooperative_matrix = 507;
	case VK_ARM_data_graph = 508;
	case VK_QCOM_multiview_per_view_render_areas = 511;
	case VK_KHR_compute_shader_derivatives = 512;
	case VK_KHR_video_decode_av1 = 513;
	case VK_KHR_video_encode_av1 = 514;
	case VK_KHR_video_decode_vp9 = 515;
	case VK_KHR_video_maintenance1 = 516;
	case VK_NV_per_stage_descriptor_set = 517;
	case VK_QCOM_image_processing2 = 519;
	case VK_QCOM_filter_cubic_weights = 520;
	case VK_QCOM_ycbcr_degamma = 521;
	case VK_QCOM_filter_cubic_clamp = 522;
	case VK_EXT_attachment_feedback_loop_dynamic_state = 525;
	case VK_KHR_vertex_attribute_divisor = 526;
	case VK_KHR_load_store_op_none = 527;
	case VK_KHR_unified_image_layouts = 528;
	case VK_KHR_shader_float_controls2 = 529;
	case VK_MSFT_layered_driver = 531;
	case VK_KHR_index_type_uint8 = 534;
	case VK_KHR_line_rasterization = 535;
	case VK_KHR_calibrated_timestamps = 544;
	case VK_KHR_shader_expect_assume = 545;
	case VK_KHR_maintenance6 = 546;
	case VK_NV_descriptor_pool_overallocation = 547;
	case VK_QCOM_tile_memory_heap = 548;
	case VK_NV_display_stereo = 552;
	case VK_KHR_video_encode_intra_refresh = 553;
	case VK_KHR_video_encode_quantization_map = 554;
	case VK_NV_raw_access_chains = 556;
	case VK_NV_external_compute_queue = 557;
	case VK_KHR_shader_relaxed_extended_instruction = 559;
	case VK_NV_command_buffer_inheritance = 560;
	case VK_KHR_maintenance7 = 563;
	case VK_NV_shader_atomic_float16_vector = 564;
	case VK_EXT_shader_replicated_composites = 565;
	case VK_EXT_shader_float8 = 568;
	case VK_NV_ray_tracing_validation = 569;
	case VK_NV_cluster_acceleration_structure = 570;
	case VK_NV_partitioned_acceleration_structure = 571;
	case VK_EXT_device_generated_commands = 573;
	case VK_KHR_maintenance8 = 575;
	case VK_MESA_image_alignment_control = 576;
	case VK_EXT_depth_clamp_control = 583;
	case VK_KHR_maintenance9 = 585;
	case VK_KHR_video_maintenance2 = 587;
	case VK_HUAWEI_hdr_vivid = 591;
	case VK_NV_cooperative_matrix2 = 594;
	case VK_ARM_pipeline_opacity_micromap = 597;
	case VK_KHR_depth_clamp_zero_one = 605;
	case VK_EXT_vertex_attribute_robustness = 609;
	case VK_ARM_format_pack = 610;
	case VK_VALVE_fragment_density_map_layered = 612;
	case VK_KHR_robustness2 = 613;
	case VK_EXT_fragment_density_map_offset = 620;
	case VK_EXT_zero_initialize_device_memory = 621;
	case VK_KHR_present_mode_fifo_latest_ready = 622;
	case VK_SEC_pipeline_cache_incremental_mode = 638;

	public char8* Name
	{
		get
		{
			switch (this)
			{
			case .VK_KHR_surface: return nameof(VK_KHR_surface);
			case .VK_KHR_swapchain: return nameof(VK_KHR_swapchain);
			case .VK_KHR_display: return nameof(VK_KHR_display);
			case .VK_KHR_display_swapchain: return nameof(VK_KHR_display_swapchain);
			case .VK_EXT_debug_report: return nameof(VK_EXT_debug_report);
			case .VK_NV_glsl_shader: return nameof(VK_NV_glsl_shader);
			case .VK_EXT_depth_range_unrestricted: return nameof(VK_EXT_depth_range_unrestricted);
			case .VK_KHR_sampler_mirror_clamp_to_edge: return nameof(VK_KHR_sampler_mirror_clamp_to_edge);
			case .VK_IMG_filter_cubic: return nameof(VK_IMG_filter_cubic);
			case .VK_AMD_rasterization_order: return nameof(VK_AMD_rasterization_order);
			case .VK_AMD_shader_trinary_minmax: return nameof(VK_AMD_shader_trinary_minmax);
			case .VK_AMD_shader_explicit_vertex_parameter: return nameof(VK_AMD_shader_explicit_vertex_parameter);
			case .VK_EXT_debug_marker: return nameof(VK_EXT_debug_marker);
			case .VK_KHR_video_queue: return nameof(VK_KHR_video_queue);
			case .VK_KHR_video_decode_queue: return nameof(VK_KHR_video_decode_queue);
			case .VK_AMD_gcn_shader: return nameof(VK_AMD_gcn_shader);
			case .VK_NV_dedicated_allocation: return nameof(VK_NV_dedicated_allocation);
			case .VK_EXT_transform_feedback: return nameof(VK_EXT_transform_feedback);
			case .VK_NVX_binary_import: return nameof(VK_NVX_binary_import);
			case .VK_NVX_image_view_handle: return nameof(VK_NVX_image_view_handle);
			case .VK_AMD_draw_indirect_count: return nameof(VK_AMD_draw_indirect_count);
			case .VK_AMD_negative_viewport_height: return nameof(VK_AMD_negative_viewport_height);
			case .VK_AMD_gpu_shader_half_float: return nameof(VK_AMD_gpu_shader_half_float);
			case .VK_AMD_shader_ballot: return nameof(VK_AMD_shader_ballot);
			case .VK_KHR_video_encode_h264: return nameof(VK_KHR_video_encode_h264);
			case .VK_KHR_video_encode_h265: return nameof(VK_KHR_video_encode_h265);
			case .VK_KHR_video_decode_h264: return nameof(VK_KHR_video_decode_h264);
			case .VK_AMD_texture_gather_bias_lod: return nameof(VK_AMD_texture_gather_bias_lod);
			case .VK_AMD_shader_info: return nameof(VK_AMD_shader_info);
			case .VK_KHR_dynamic_rendering: return nameof(VK_KHR_dynamic_rendering);
			case .VK_AMD_shader_image_load_store_lod: return nameof(VK_AMD_shader_image_load_store_lod);
			case .VK_NV_corner_sampled_image: return nameof(VK_NV_corner_sampled_image);
			case .VK_KHR_multiview: return nameof(VK_KHR_multiview);
			case .VK_IMG_format_pvrtc: return nameof(VK_IMG_format_pvrtc);
			case .VK_NV_external_memory_capabilities: return nameof(VK_NV_external_memory_capabilities);
			case .VK_NV_external_memory: return nameof(VK_NV_external_memory);
			case .VK_KHR_get_physical_device_properties2: return nameof(VK_KHR_get_physical_device_properties2);
			case .VK_KHR_device_group: return nameof(VK_KHR_device_group);
			case .VK_EXT_validation_flags: return nameof(VK_EXT_validation_flags);
			case .VK_KHR_shader_draw_parameters: return nameof(VK_KHR_shader_draw_parameters);
			case .VK_EXT_shader_subgroup_ballot: return nameof(VK_EXT_shader_subgroup_ballot);
			case .VK_EXT_shader_subgroup_vote: return nameof(VK_EXT_shader_subgroup_vote);
			case .VK_EXT_texture_compression_astc_hdr: return nameof(VK_EXT_texture_compression_astc_hdr);
			case .VK_EXT_astc_decode_mode: return nameof(VK_EXT_astc_decode_mode);
			case .VK_EXT_pipeline_robustness: return nameof(VK_EXT_pipeline_robustness);
			case .VK_KHR_maintenance1: return nameof(VK_KHR_maintenance1);
			case .VK_KHR_device_group_creation: return nameof(VK_KHR_device_group_creation);
			case .VK_KHR_external_memory_capabilities: return nameof(VK_KHR_external_memory_capabilities);
			case .VK_KHR_external_memory: return nameof(VK_KHR_external_memory);
			case .VK_KHR_external_memory_fd: return nameof(VK_KHR_external_memory_fd);
			case .VK_KHR_external_semaphore_capabilities: return nameof(VK_KHR_external_semaphore_capabilities);
			case .VK_KHR_external_semaphore: return nameof(VK_KHR_external_semaphore);
			case .VK_KHR_external_semaphore_fd: return nameof(VK_KHR_external_semaphore_fd);
			case .VK_KHR_push_descriptor: return nameof(VK_KHR_push_descriptor);
			case .VK_EXT_conditional_rendering: return nameof(VK_EXT_conditional_rendering);
			case .VK_KHR_shader_float16_int8: return nameof(VK_KHR_shader_float16_int8);
			case .VK_KHR_16bit_storage: return nameof(VK_KHR_16bit_storage);
			case .VK_KHR_incremental_present: return nameof(VK_KHR_incremental_present);
			case .VK_KHR_descriptor_update_template: return nameof(VK_KHR_descriptor_update_template);
			case .VK_NV_clip_space_w_scaling: return nameof(VK_NV_clip_space_w_scaling);
			case .VK_EXT_direct_mode_display: return nameof(VK_EXT_direct_mode_display);
			case .VK_EXT_display_surface_counter: return nameof(VK_EXT_display_surface_counter);
			case .VK_EXT_display_control: return nameof(VK_EXT_display_control);
			case .VK_GOOGLE_display_timing: return nameof(VK_GOOGLE_display_timing);
			case .VK_NV_sample_mask_override_coverage: return nameof(VK_NV_sample_mask_override_coverage);
			case .VK_NV_geometry_shader_passthrough: return nameof(VK_NV_geometry_shader_passthrough);
			case .VK_NV_viewport_array2: return nameof(VK_NV_viewport_array2);
			case .VK_NVX_multiview_per_view_attributes: return nameof(VK_NVX_multiview_per_view_attributes);
			case .VK_NV_viewport_swizzle: return nameof(VK_NV_viewport_swizzle);
			case .VK_EXT_discard_rectangles: return nameof(VK_EXT_discard_rectangles);
			case .VK_EXT_conservative_rasterization: return nameof(VK_EXT_conservative_rasterization);
			case .VK_EXT_depth_clip_enable: return nameof(VK_EXT_depth_clip_enable);
			case .VK_EXT_swapchain_colorspace: return nameof(VK_EXT_swapchain_colorspace);
			case .VK_EXT_hdr_metadata: return nameof(VK_EXT_hdr_metadata);
			case .VK_KHR_imageless_framebuffer: return nameof(VK_KHR_imageless_framebuffer);
			case .VK_KHR_create_renderpass2: return nameof(VK_KHR_create_renderpass2);
			case .VK_IMG_relaxed_line_rasterization: return nameof(VK_IMG_relaxed_line_rasterization);
			case .VK_KHR_shared_presentable_image: return nameof(VK_KHR_shared_presentable_image);
			case .VK_KHR_external_fence_capabilities: return nameof(VK_KHR_external_fence_capabilities);
			case .VK_KHR_external_fence: return nameof(VK_KHR_external_fence);
			case .VK_KHR_external_fence_fd: return nameof(VK_KHR_external_fence_fd);
			case .VK_KHR_performance_query: return nameof(VK_KHR_performance_query);
			case .VK_KHR_maintenance2: return nameof(VK_KHR_maintenance2);
			case .VK_KHR_get_surface_capabilities2: return nameof(VK_KHR_get_surface_capabilities2);
			case .VK_KHR_variable_pointers: return nameof(VK_KHR_variable_pointers);
			case .VK_KHR_get_display_properties2: return nameof(VK_KHR_get_display_properties2);
			case .VK_EXT_external_memory_dma_buf: return nameof(VK_EXT_external_memory_dma_buf);
			case .VK_EXT_queue_family_foreign: return nameof(VK_EXT_queue_family_foreign);
			case .VK_KHR_dedicated_allocation: return nameof(VK_KHR_dedicated_allocation);
			case .VK_EXT_debug_utils: return nameof(VK_EXT_debug_utils);
			case .VK_EXT_sampler_filter_minmax: return nameof(VK_EXT_sampler_filter_minmax);
			case .VK_KHR_storage_buffer_storage_class: return nameof(VK_KHR_storage_buffer_storage_class);
			case .VK_AMD_gpu_shader_int16: return nameof(VK_AMD_gpu_shader_int16);
			case .VK_AMD_mixed_attachment_samples: return nameof(VK_AMD_mixed_attachment_samples);
			case .VK_AMD_shader_fragment_mask: return nameof(VK_AMD_shader_fragment_mask);
			case .VK_EXT_inline_uniform_block: return nameof(VK_EXT_inline_uniform_block);
			case .VK_EXT_shader_stencil_export: return nameof(VK_EXT_shader_stencil_export);
			case .VK_KHR_shader_bfloat16: return nameof(VK_KHR_shader_bfloat16);
			case .VK_EXT_sample_locations: return nameof(VK_EXT_sample_locations);
			case .VK_KHR_relaxed_block_layout: return nameof(VK_KHR_relaxed_block_layout);
			case .VK_KHR_get_memory_requirements2: return nameof(VK_KHR_get_memory_requirements2);
			case .VK_KHR_image_format_list: return nameof(VK_KHR_image_format_list);
			case .VK_EXT_blend_operation_advanced: return nameof(VK_EXT_blend_operation_advanced);
			case .VK_NV_fragment_coverage_to_color: return nameof(VK_NV_fragment_coverage_to_color);
			case .VK_KHR_acceleration_structure: return nameof(VK_KHR_acceleration_structure);
			case .VK_KHR_ray_tracing_pipeline: return nameof(VK_KHR_ray_tracing_pipeline);
			case .VK_KHR_ray_query: return nameof(VK_KHR_ray_query);
			case .VK_NV_framebuffer_mixed_samples: return nameof(VK_NV_framebuffer_mixed_samples);
			case .VK_NV_fill_rectangle: return nameof(VK_NV_fill_rectangle);
			case .VK_NV_shader_sm_builtins: return nameof(VK_NV_shader_sm_builtins);
			case .VK_EXT_post_depth_coverage: return nameof(VK_EXT_post_depth_coverage);
			case .VK_KHR_sampler_ycbcr_conversion: return nameof(VK_KHR_sampler_ycbcr_conversion);
			case .VK_KHR_bind_memory2: return nameof(VK_KHR_bind_memory2);
			case .VK_EXT_image_drm_format_modifier: return nameof(VK_EXT_image_drm_format_modifier);
			case .VK_EXT_validation_cache: return nameof(VK_EXT_validation_cache);
			case .VK_EXT_descriptor_indexing: return nameof(VK_EXT_descriptor_indexing);
			case .VK_EXT_shader_viewport_index_layer: return nameof(VK_EXT_shader_viewport_index_layer);
			case .VK_NV_shading_rate_image: return nameof(VK_NV_shading_rate_image);
			case .VK_NV_ray_tracing: return nameof(VK_NV_ray_tracing);
			case .VK_NV_representative_fragment_test: return nameof(VK_NV_representative_fragment_test);
			case .VK_KHR_maintenance3: return nameof(VK_KHR_maintenance3);
			case .VK_KHR_draw_indirect_count: return nameof(VK_KHR_draw_indirect_count);
			case .VK_EXT_filter_cubic: return nameof(VK_EXT_filter_cubic);
			case .VK_QCOM_render_pass_shader_resolve: return nameof(VK_QCOM_render_pass_shader_resolve);
			case .VK_EXT_global_priority: return nameof(VK_EXT_global_priority);
			case .VK_KHR_shader_subgroup_extended_types: return nameof(VK_KHR_shader_subgroup_extended_types);
			case .VK_KHR_8bit_storage: return nameof(VK_KHR_8bit_storage);
			case .VK_EXT_external_memory_host: return nameof(VK_EXT_external_memory_host);
			case .VK_AMD_buffer_marker: return nameof(VK_AMD_buffer_marker);
			case .VK_KHR_shader_atomic_int64: return nameof(VK_KHR_shader_atomic_int64);
			case .VK_KHR_shader_clock: return nameof(VK_KHR_shader_clock);
			case .VK_AMD_pipeline_compiler_control: return nameof(VK_AMD_pipeline_compiler_control);
			case .VK_EXT_calibrated_timestamps: return nameof(VK_EXT_calibrated_timestamps);
			case .VK_AMD_shader_core_properties: return nameof(VK_AMD_shader_core_properties);
			case .VK_KHR_video_decode_h265: return nameof(VK_KHR_video_decode_h265);
			case .VK_KHR_global_priority: return nameof(VK_KHR_global_priority);
			case .VK_AMD_memory_overallocation_behavior: return nameof(VK_AMD_memory_overallocation_behavior);
			case .VK_EXT_vertex_attribute_divisor: return nameof(VK_EXT_vertex_attribute_divisor);
			case .VK_EXT_pipeline_creation_feedback: return nameof(VK_EXT_pipeline_creation_feedback);
			case .VK_KHR_driver_properties: return nameof(VK_KHR_driver_properties);
			case .VK_KHR_shader_float_controls: return nameof(VK_KHR_shader_float_controls);
			case .VK_NV_shader_subgroup_partitioned: return nameof(VK_NV_shader_subgroup_partitioned);
			case .VK_KHR_depth_stencil_resolve: return nameof(VK_KHR_depth_stencil_resolve);
			case .VK_KHR_swapchain_mutable_format: return nameof(VK_KHR_swapchain_mutable_format);
			case .VK_NV_compute_shader_derivatives: return nameof(VK_NV_compute_shader_derivatives);
			case .VK_NV_mesh_shader: return nameof(VK_NV_mesh_shader);
			case .VK_NV_fragment_shader_barycentric: return nameof(VK_NV_fragment_shader_barycentric);
			case .VK_NV_shader_image_footprint: return nameof(VK_NV_shader_image_footprint);
			case .VK_NV_scissor_exclusive: return nameof(VK_NV_scissor_exclusive);
			case .VK_NV_device_diagnostic_checkpoints: return nameof(VK_NV_device_diagnostic_checkpoints);
			case .VK_KHR_timeline_semaphore: return nameof(VK_KHR_timeline_semaphore);
			case .VK_INTEL_shader_integer_functions2: return nameof(VK_INTEL_shader_integer_functions2);
			case .VK_INTEL_performance_query: return nameof(VK_INTEL_performance_query);
			case .VK_KHR_vulkan_memory_model: return nameof(VK_KHR_vulkan_memory_model);
			case .VK_EXT_pci_bus_info: return nameof(VK_EXT_pci_bus_info);
			case .VK_AMD_display_native_hdr: return nameof(VK_AMD_display_native_hdr);
			case .VK_KHR_shader_terminate_invocation: return nameof(VK_KHR_shader_terminate_invocation);
			case .VK_EXT_fragment_density_map: return nameof(VK_EXT_fragment_density_map);
			case .VK_EXT_scalar_block_layout: return nameof(VK_EXT_scalar_block_layout);
			case .VK_GOOGLE_hlsl_functionality1: return nameof(VK_GOOGLE_hlsl_functionality1);
			case .VK_GOOGLE_decorate_string: return nameof(VK_GOOGLE_decorate_string);
			case .VK_EXT_subgroup_size_control: return nameof(VK_EXT_subgroup_size_control);
			case .VK_KHR_fragment_shading_rate: return nameof(VK_KHR_fragment_shading_rate);
			case .VK_AMD_shader_core_properties2: return nameof(VK_AMD_shader_core_properties2);
			case .VK_AMD_device_coherent_memory: return nameof(VK_AMD_device_coherent_memory);
			case .VK_KHR_dynamic_rendering_local_read: return nameof(VK_KHR_dynamic_rendering_local_read);
			case .VK_EXT_shader_image_atomic_int64: return nameof(VK_EXT_shader_image_atomic_int64);
			case .VK_KHR_shader_quad_control: return nameof(VK_KHR_shader_quad_control);
			case .VK_KHR_spirv_1_4: return nameof(VK_KHR_spirv_1_4);
			case .VK_EXT_memory_budget: return nameof(VK_EXT_memory_budget);
			case .VK_EXT_memory_priority: return nameof(VK_EXT_memory_priority);
			case .VK_KHR_surface_protected_capabilities: return nameof(VK_KHR_surface_protected_capabilities);
			case .VK_NV_dedicated_allocation_image_aliasing: return nameof(VK_NV_dedicated_allocation_image_aliasing);
			case .VK_KHR_separate_depth_stencil_layouts: return nameof(VK_KHR_separate_depth_stencil_layouts);
			case .VK_EXT_buffer_device_address: return nameof(VK_EXT_buffer_device_address);
			case .VK_EXT_tooling_info: return nameof(VK_EXT_tooling_info);
			case .VK_EXT_separate_stencil_usage: return nameof(VK_EXT_separate_stencil_usage);
			case .VK_EXT_validation_features: return nameof(VK_EXT_validation_features);
			case .VK_KHR_present_wait: return nameof(VK_KHR_present_wait);
			case .VK_NV_cooperative_matrix: return nameof(VK_NV_cooperative_matrix);
			case .VK_NV_coverage_reduction_mode: return nameof(VK_NV_coverage_reduction_mode);
			case .VK_EXT_fragment_shader_interlock: return nameof(VK_EXT_fragment_shader_interlock);
			case .VK_EXT_ycbcr_image_arrays: return nameof(VK_EXT_ycbcr_image_arrays);
			case .VK_KHR_uniform_buffer_standard_layout: return nameof(VK_KHR_uniform_buffer_standard_layout);
			case .VK_EXT_provoking_vertex: return nameof(VK_EXT_provoking_vertex);
			case .VK_EXT_headless_surface: return nameof(VK_EXT_headless_surface);
			case .VK_KHR_buffer_device_address: return nameof(VK_KHR_buffer_device_address);
			case .VK_EXT_line_rasterization: return nameof(VK_EXT_line_rasterization);
			case .VK_EXT_shader_atomic_float: return nameof(VK_EXT_shader_atomic_float);
			case .VK_EXT_host_query_reset: return nameof(VK_EXT_host_query_reset);
			case .VK_EXT_index_type_uint8: return nameof(VK_EXT_index_type_uint8);
			case .VK_EXT_extended_dynamic_state: return nameof(VK_EXT_extended_dynamic_state);
			case .VK_KHR_deferred_host_operations: return nameof(VK_KHR_deferred_host_operations);
			case .VK_KHR_pipeline_executable_properties: return nameof(VK_KHR_pipeline_executable_properties);
			case .VK_EXT_host_image_copy: return nameof(VK_EXT_host_image_copy);
			case .VK_KHR_map_memory2: return nameof(VK_KHR_map_memory2);
			case .VK_EXT_map_memory_placed: return nameof(VK_EXT_map_memory_placed);
			case .VK_EXT_shader_atomic_float2: return nameof(VK_EXT_shader_atomic_float2);
			case .VK_EXT_surface_maintenance1: return nameof(VK_EXT_surface_maintenance1);
			case .VK_EXT_swapchain_maintenance1: return nameof(VK_EXT_swapchain_maintenance1);
			case .VK_EXT_shader_demote_to_helper_invocation: return nameof(VK_EXT_shader_demote_to_helper_invocation);
			case .VK_NV_device_generated_commands: return nameof(VK_NV_device_generated_commands);
			case .VK_NV_inherited_viewport_scissor: return nameof(VK_NV_inherited_viewport_scissor);
			case .VK_KHR_shader_integer_dot_product: return nameof(VK_KHR_shader_integer_dot_product);
			case .VK_EXT_texel_buffer_alignment: return nameof(VK_EXT_texel_buffer_alignment);
			case .VK_QCOM_render_pass_transform: return nameof(VK_QCOM_render_pass_transform);
			case .VK_EXT_depth_bias_control: return nameof(VK_EXT_depth_bias_control);
			case .VK_EXT_device_memory_report: return nameof(VK_EXT_device_memory_report);
			case .VK_EXT_acquire_drm_display: return nameof(VK_EXT_acquire_drm_display);
			case .VK_EXT_robustness2: return nameof(VK_EXT_robustness2);
			case .VK_EXT_custom_border_color: return nameof(VK_EXT_custom_border_color);
			case .VK_GOOGLE_user_type: return nameof(VK_GOOGLE_user_type);
			case .VK_KHR_pipeline_library: return nameof(VK_KHR_pipeline_library);
			case .VK_NV_present_barrier: return nameof(VK_NV_present_barrier);
			case .VK_KHR_shader_non_semantic_info: return nameof(VK_KHR_shader_non_semantic_info);
			case .VK_KHR_present_id: return nameof(VK_KHR_present_id);
			case .VK_EXT_private_data: return nameof(VK_EXT_private_data);
			case .VK_EXT_pipeline_creation_cache_control: return nameof(VK_EXT_pipeline_creation_cache_control);
			case .VK_KHR_video_encode_queue: return nameof(VK_KHR_video_encode_queue);
			case .VK_NV_device_diagnostics_config: return nameof(VK_NV_device_diagnostics_config);
			case .VK_QCOM_render_pass_store_ops: return nameof(VK_QCOM_render_pass_store_ops);
			case .VK_QCOM_tile_shading: return nameof(VK_QCOM_tile_shading);
			case .VK_NV_low_latency: return nameof(VK_NV_low_latency);
			case .VK_KHR_synchronization2: return nameof(VK_KHR_synchronization2);
			case .VK_EXT_descriptor_buffer: return nameof(VK_EXT_descriptor_buffer);
			case .VK_EXT_graphics_pipeline_library: return nameof(VK_EXT_graphics_pipeline_library);
			case .VK_AMD_shader_early_and_late_fragment_tests: return nameof(VK_AMD_shader_early_and_late_fragment_tests);
			case .VK_KHR_fragment_shader_barycentric: return nameof(VK_KHR_fragment_shader_barycentric);
			case .VK_KHR_shader_subgroup_uniform_control_flow: return nameof(VK_KHR_shader_subgroup_uniform_control_flow);
			case .VK_KHR_zero_initialize_workgroup_memory: return nameof(VK_KHR_zero_initialize_workgroup_memory);
			case .VK_NV_fragment_shading_rate_enums: return nameof(VK_NV_fragment_shading_rate_enums);
			case .VK_NV_ray_tracing_motion_blur: return nameof(VK_NV_ray_tracing_motion_blur);
			case .VK_EXT_mesh_shader: return nameof(VK_EXT_mesh_shader);
			case .VK_EXT_ycbcr_2plane_444_formats: return nameof(VK_EXT_ycbcr_2plane_444_formats);
			case .VK_EXT_fragment_density_map2: return nameof(VK_EXT_fragment_density_map2);
			case .VK_QCOM_rotated_copy_commands: return nameof(VK_QCOM_rotated_copy_commands);
			case .VK_EXT_image_robustness: return nameof(VK_EXT_image_robustness);
			case .VK_KHR_workgroup_memory_explicit_layout: return nameof(VK_KHR_workgroup_memory_explicit_layout);
			case .VK_KHR_copy_commands2: return nameof(VK_KHR_copy_commands2);
			case .VK_EXT_image_compression_control: return nameof(VK_EXT_image_compression_control);
			case .VK_EXT_attachment_feedback_loop_layout: return nameof(VK_EXT_attachment_feedback_loop_layout);
			case .VK_EXT_4444_formats: return nameof(VK_EXT_4444_formats);
			case .VK_EXT_device_fault: return nameof(VK_EXT_device_fault);
			case .VK_ARM_rasterization_order_attachment_access: return nameof(VK_ARM_rasterization_order_attachment_access);
			case .VK_EXT_rgba10x6_formats: return nameof(VK_EXT_rgba10x6_formats);
			case .VK_VALVE_mutable_descriptor_type: return nameof(VK_VALVE_mutable_descriptor_type);
			case .VK_EXT_vertex_input_dynamic_state: return nameof(VK_EXT_vertex_input_dynamic_state);
			case .VK_EXT_physical_device_drm: return nameof(VK_EXT_physical_device_drm);
			case .VK_EXT_device_address_binding_report: return nameof(VK_EXT_device_address_binding_report);
			case .VK_EXT_depth_clip_control: return nameof(VK_EXT_depth_clip_control);
			case .VK_EXT_primitive_topology_list_restart: return nameof(VK_EXT_primitive_topology_list_restart);
			case .VK_KHR_format_feature_flags2: return nameof(VK_KHR_format_feature_flags2);
			case .VK_EXT_present_mode_fifo_latest_ready: return nameof(VK_EXT_present_mode_fifo_latest_ready);
			case .VK_HUAWEI_subpass_shading: return nameof(VK_HUAWEI_subpass_shading);
			case .VK_HUAWEI_invocation_mask: return nameof(VK_HUAWEI_invocation_mask);
			case .VK_NV_external_memory_rdma: return nameof(VK_NV_external_memory_rdma);
			case .VK_EXT_pipeline_properties: return nameof(VK_EXT_pipeline_properties);
			case .VK_EXT_frame_boundary: return nameof(VK_EXT_frame_boundary);
			case .VK_EXT_multisampled_render_to_single_sampled: return nameof(VK_EXT_multisampled_render_to_single_sampled);
			case .VK_EXT_extended_dynamic_state2: return nameof(VK_EXT_extended_dynamic_state2);
			case .VK_EXT_color_write_enable: return nameof(VK_EXT_color_write_enable);
			case .VK_EXT_primitives_generated_query: return nameof(VK_EXT_primitives_generated_query);
			case .VK_KHR_ray_tracing_maintenance1: return nameof(VK_KHR_ray_tracing_maintenance1);
			case .VK_EXT_global_priority_query: return nameof(VK_EXT_global_priority_query);
			case .VK_EXT_image_view_min_lod: return nameof(VK_EXT_image_view_min_lod);
			case .VK_EXT_multi_draw: return nameof(VK_EXT_multi_draw);
			case .VK_EXT_image_2d_view_of_3d: return nameof(VK_EXT_image_2d_view_of_3d);
			case .VK_KHR_portability_enumeration: return nameof(VK_KHR_portability_enumeration);
			case .VK_EXT_shader_tile_image: return nameof(VK_EXT_shader_tile_image);
			case .VK_EXT_opacity_micromap: return nameof(VK_EXT_opacity_micromap);
			case .VK_EXT_load_store_op_none: return nameof(VK_EXT_load_store_op_none);
			case .VK_HUAWEI_cluster_culling_shader: return nameof(VK_HUAWEI_cluster_culling_shader);
			case .VK_EXT_border_color_swizzle: return nameof(VK_EXT_border_color_swizzle);
			case .VK_EXT_pageable_device_local_memory: return nameof(VK_EXT_pageable_device_local_memory);
			case .VK_KHR_maintenance4: return nameof(VK_KHR_maintenance4);
			case .VK_ARM_shader_core_properties: return nameof(VK_ARM_shader_core_properties);
			case .VK_KHR_shader_subgroup_rotate: return nameof(VK_KHR_shader_subgroup_rotate);
			case .VK_ARM_scheduling_controls: return nameof(VK_ARM_scheduling_controls);
			case .VK_EXT_image_sliced_view_of_3d: return nameof(VK_EXT_image_sliced_view_of_3d);
			case .VK_VALVE_descriptor_set_host_mapping: return nameof(VK_VALVE_descriptor_set_host_mapping);
			case .VK_EXT_depth_clamp_zero_one: return nameof(VK_EXT_depth_clamp_zero_one);
			case .VK_EXT_non_seamless_cube_map: return nameof(VK_EXT_non_seamless_cube_map);
			case .VK_ARM_render_pass_striped: return nameof(VK_ARM_render_pass_striped);
			case .VK_QCOM_fragment_density_map_offset: return nameof(VK_QCOM_fragment_density_map_offset);
			case .VK_NV_copy_memory_indirect: return nameof(VK_NV_copy_memory_indirect);
			case .VK_NV_memory_decompression: return nameof(VK_NV_memory_decompression);
			case .VK_NV_device_generated_commands_compute: return nameof(VK_NV_device_generated_commands_compute);
			case .VK_NV_ray_tracing_linear_swept_spheres: return nameof(VK_NV_ray_tracing_linear_swept_spheres);
			case .VK_NV_linear_color_attachment: return nameof(VK_NV_linear_color_attachment);
			case .VK_GOOGLE_surfaceless_query: return nameof(VK_GOOGLE_surfaceless_query);
			case .VK_KHR_shader_maximal_reconvergence: return nameof(VK_KHR_shader_maximal_reconvergence);
			case .VK_EXT_image_compression_control_swapchain: return nameof(VK_EXT_image_compression_control_swapchain);
			case .VK_QCOM_image_processing: return nameof(VK_QCOM_image_processing);
			case .VK_EXT_nested_command_buffer: return nameof(VK_EXT_nested_command_buffer);
			case .VK_EXT_external_memory_acquire_unmodified: return nameof(VK_EXT_external_memory_acquire_unmodified);
			case .VK_EXT_extended_dynamic_state3: return nameof(VK_EXT_extended_dynamic_state3);
			case .VK_EXT_subpass_merge_feedback: return nameof(VK_EXT_subpass_merge_feedback);
			case .VK_LUNARG_direct_driver_loading: return nameof(VK_LUNARG_direct_driver_loading);
			case .VK_ARM_tensors: return nameof(VK_ARM_tensors);
			case .VK_EXT_shader_module_identifier: return nameof(VK_EXT_shader_module_identifier);
			case .VK_EXT_rasterization_order_attachment_access: return nameof(VK_EXT_rasterization_order_attachment_access);
			case .VK_NV_optical_flow: return nameof(VK_NV_optical_flow);
			case .VK_EXT_legacy_dithering: return nameof(VK_EXT_legacy_dithering);
			case .VK_EXT_pipeline_protected_access: return nameof(VK_EXT_pipeline_protected_access);
			case .VK_KHR_maintenance5: return nameof(VK_KHR_maintenance5);
			case .VK_AMD_anti_lag: return nameof(VK_AMD_anti_lag);
			case .VK_KHR_present_id2: return nameof(VK_KHR_present_id2);
			case .VK_KHR_present_wait2: return nameof(VK_KHR_present_wait2);
			case .VK_KHR_ray_tracing_position_fetch: return nameof(VK_KHR_ray_tracing_position_fetch);
			case .VK_EXT_shader_object: return nameof(VK_EXT_shader_object);
			case .VK_KHR_pipeline_binary: return nameof(VK_KHR_pipeline_binary);
			case .VK_QCOM_tile_properties: return nameof(VK_QCOM_tile_properties);
			case .VK_SEC_amigo_profiling: return nameof(VK_SEC_amigo_profiling);
			case .VK_KHR_surface_maintenance1: return nameof(VK_KHR_surface_maintenance1);
			case .VK_KHR_swapchain_maintenance1: return nameof(VK_KHR_swapchain_maintenance1);
			case .VK_QCOM_multiview_per_view_viewports: return nameof(VK_QCOM_multiview_per_view_viewports);
			case .VK_NV_ray_tracing_invocation_reorder: return nameof(VK_NV_ray_tracing_invocation_reorder);
			case .VK_NV_cooperative_vector: return nameof(VK_NV_cooperative_vector);
			case .VK_NV_extended_sparse_address_space: return nameof(VK_NV_extended_sparse_address_space);
			case .VK_EXT_mutable_descriptor_type: return nameof(VK_EXT_mutable_descriptor_type);
			case .VK_EXT_legacy_vertex_attributes: return nameof(VK_EXT_legacy_vertex_attributes);
			case .VK_EXT_layer_settings: return nameof(VK_EXT_layer_settings);
			case .VK_ARM_shader_core_builtins: return nameof(VK_ARM_shader_core_builtins);
			case .VK_EXT_pipeline_library_group_handles: return nameof(VK_EXT_pipeline_library_group_handles);
			case .VK_EXT_dynamic_rendering_unused_attachments: return nameof(VK_EXT_dynamic_rendering_unused_attachments);
			case .VK_NV_low_latency2: return nameof(VK_NV_low_latency2);
			case .VK_KHR_cooperative_matrix: return nameof(VK_KHR_cooperative_matrix);
			case .VK_ARM_data_graph: return nameof(VK_ARM_data_graph);
			case .VK_QCOM_multiview_per_view_render_areas: return nameof(VK_QCOM_multiview_per_view_render_areas);
			case .VK_KHR_compute_shader_derivatives: return nameof(VK_KHR_compute_shader_derivatives);
			case .VK_KHR_video_decode_av1: return nameof(VK_KHR_video_decode_av1);
			case .VK_KHR_video_encode_av1: return nameof(VK_KHR_video_encode_av1);
			case .VK_KHR_video_decode_vp9: return nameof(VK_KHR_video_decode_vp9);
			case .VK_KHR_video_maintenance1: return nameof(VK_KHR_video_maintenance1);
			case .VK_NV_per_stage_descriptor_set: return nameof(VK_NV_per_stage_descriptor_set);
			case .VK_QCOM_image_processing2: return nameof(VK_QCOM_image_processing2);
			case .VK_QCOM_filter_cubic_weights: return nameof(VK_QCOM_filter_cubic_weights);
			case .VK_QCOM_ycbcr_degamma: return nameof(VK_QCOM_ycbcr_degamma);
			case .VK_QCOM_filter_cubic_clamp: return nameof(VK_QCOM_filter_cubic_clamp);
			case .VK_EXT_attachment_feedback_loop_dynamic_state: return nameof(VK_EXT_attachment_feedback_loop_dynamic_state);
			case .VK_KHR_vertex_attribute_divisor: return nameof(VK_KHR_vertex_attribute_divisor);
			case .VK_KHR_load_store_op_none: return nameof(VK_KHR_load_store_op_none);
			case .VK_KHR_unified_image_layouts: return nameof(VK_KHR_unified_image_layouts);
			case .VK_KHR_shader_float_controls2: return nameof(VK_KHR_shader_float_controls2);
			case .VK_MSFT_layered_driver: return nameof(VK_MSFT_layered_driver);
			case .VK_KHR_index_type_uint8: return nameof(VK_KHR_index_type_uint8);
			case .VK_KHR_line_rasterization: return nameof(VK_KHR_line_rasterization);
			case .VK_KHR_calibrated_timestamps: return nameof(VK_KHR_calibrated_timestamps);
			case .VK_KHR_shader_expect_assume: return nameof(VK_KHR_shader_expect_assume);
			case .VK_KHR_maintenance6: return nameof(VK_KHR_maintenance6);
			case .VK_NV_descriptor_pool_overallocation: return nameof(VK_NV_descriptor_pool_overallocation);
			case .VK_QCOM_tile_memory_heap: return nameof(VK_QCOM_tile_memory_heap);
			case .VK_NV_display_stereo: return nameof(VK_NV_display_stereo);
			case .VK_KHR_video_encode_intra_refresh: return nameof(VK_KHR_video_encode_intra_refresh);
			case .VK_KHR_video_encode_quantization_map: return nameof(VK_KHR_video_encode_quantization_map);
			case .VK_NV_raw_access_chains: return nameof(VK_NV_raw_access_chains);
			case .VK_NV_external_compute_queue: return nameof(VK_NV_external_compute_queue);
			case .VK_KHR_shader_relaxed_extended_instruction: return nameof(VK_KHR_shader_relaxed_extended_instruction);
			case .VK_NV_command_buffer_inheritance: return nameof(VK_NV_command_buffer_inheritance);
			case .VK_KHR_maintenance7: return nameof(VK_KHR_maintenance7);
			case .VK_NV_shader_atomic_float16_vector: return nameof(VK_NV_shader_atomic_float16_vector);
			case .VK_EXT_shader_replicated_composites: return nameof(VK_EXT_shader_replicated_composites);
			case .VK_EXT_shader_float8: return nameof(VK_EXT_shader_float8);
			case .VK_NV_ray_tracing_validation: return nameof(VK_NV_ray_tracing_validation);
			case .VK_NV_cluster_acceleration_structure: return nameof(VK_NV_cluster_acceleration_structure);
			case .VK_NV_partitioned_acceleration_structure: return nameof(VK_NV_partitioned_acceleration_structure);
			case .VK_EXT_device_generated_commands: return nameof(VK_EXT_device_generated_commands);
			case .VK_KHR_maintenance8: return nameof(VK_KHR_maintenance8);
			case .VK_MESA_image_alignment_control: return nameof(VK_MESA_image_alignment_control);
			case .VK_EXT_depth_clamp_control: return nameof(VK_EXT_depth_clamp_control);
			case .VK_KHR_maintenance9: return nameof(VK_KHR_maintenance9);
			case .VK_KHR_video_maintenance2: return nameof(VK_KHR_video_maintenance2);
			case .VK_HUAWEI_hdr_vivid: return nameof(VK_HUAWEI_hdr_vivid);
			case .VK_NV_cooperative_matrix2: return nameof(VK_NV_cooperative_matrix2);
			case .VK_ARM_pipeline_opacity_micromap: return nameof(VK_ARM_pipeline_opacity_micromap);
			case .VK_KHR_depth_clamp_zero_one: return nameof(VK_KHR_depth_clamp_zero_one);
			case .VK_EXT_vertex_attribute_robustness: return nameof(VK_EXT_vertex_attribute_robustness);
			case .VK_ARM_format_pack: return nameof(VK_ARM_format_pack);
			case .VK_VALVE_fragment_density_map_layered: return nameof(VK_VALVE_fragment_density_map_layered);
			case .VK_KHR_robustness2: return nameof(VK_KHR_robustness2);
			case .VK_EXT_fragment_density_map_offset: return nameof(VK_EXT_fragment_density_map_offset);
			case .VK_EXT_zero_initialize_device_memory: return nameof(VK_EXT_zero_initialize_device_memory);
			case .VK_KHR_present_mode_fifo_latest_ready: return nameof(VK_KHR_present_mode_fifo_latest_ready);
			case .VK_SEC_pipeline_cache_incremental_mode: return nameof(VK_SEC_pipeline_cache_incremental_mode);
			}
		}
	}

	public Kind Kind
	{
		get
		{
			switch (this)
			{
			case .VK_KHR_surface: return .Instance;
			case .VK_KHR_swapchain: return .Device;
			case .VK_KHR_display: return .Instance;
			case .VK_KHR_display_swapchain: return .Device;
			case .VK_EXT_debug_report: return .Instance;
			case .VK_NV_glsl_shader: return .Device;
			case .VK_EXT_depth_range_unrestricted: return .Device;
			case .VK_KHR_sampler_mirror_clamp_to_edge: return .Device;
			case .VK_IMG_filter_cubic: return .Device;
			case .VK_AMD_rasterization_order: return .Device;
			case .VK_AMD_shader_trinary_minmax: return .Device;
			case .VK_AMD_shader_explicit_vertex_parameter: return .Device;
			case .VK_EXT_debug_marker: return .Device;
			case .VK_KHR_video_queue: return .Device;
			case .VK_KHR_video_decode_queue: return .Device;
			case .VK_AMD_gcn_shader: return .Device;
			case .VK_NV_dedicated_allocation: return .Device;
			case .VK_EXT_transform_feedback: return .Device;
			case .VK_NVX_binary_import: return .Device;
			case .VK_NVX_image_view_handle: return .Device;
			case .VK_AMD_draw_indirect_count: return .Device;
			case .VK_AMD_negative_viewport_height: return .Device;
			case .VK_AMD_gpu_shader_half_float: return .Device;
			case .VK_AMD_shader_ballot: return .Device;
			case .VK_KHR_video_encode_h264: return .Device;
			case .VK_KHR_video_encode_h265: return .Device;
			case .VK_KHR_video_decode_h264: return .Device;
			case .VK_AMD_texture_gather_bias_lod: return .Device;
			case .VK_AMD_shader_info: return .Device;
			case .VK_KHR_dynamic_rendering: return .Device;
			case .VK_AMD_shader_image_load_store_lod: return .Device;
			case .VK_NV_corner_sampled_image: return .Device;
			case .VK_KHR_multiview: return .Device;
			case .VK_IMG_format_pvrtc: return .Device;
			case .VK_NV_external_memory_capabilities: return .Instance;
			case .VK_NV_external_memory: return .Device;
			case .VK_KHR_get_physical_device_properties2: return .Instance;
			case .VK_KHR_device_group: return .Device;
			case .VK_EXT_validation_flags: return .Instance;
			case .VK_KHR_shader_draw_parameters: return .Device;
			case .VK_EXT_shader_subgroup_ballot: return .Device;
			case .VK_EXT_shader_subgroup_vote: return .Device;
			case .VK_EXT_texture_compression_astc_hdr: return .Device;
			case .VK_EXT_astc_decode_mode: return .Device;
			case .VK_EXT_pipeline_robustness: return .Device;
			case .VK_KHR_maintenance1: return .Device;
			case .VK_KHR_device_group_creation: return .Instance;
			case .VK_KHR_external_memory_capabilities: return .Instance;
			case .VK_KHR_external_memory: return .Device;
			case .VK_KHR_external_memory_fd: return .Device;
			case .VK_KHR_external_semaphore_capabilities: return .Instance;
			case .VK_KHR_external_semaphore: return .Device;
			case .VK_KHR_external_semaphore_fd: return .Device;
			case .VK_KHR_push_descriptor: return .Device;
			case .VK_EXT_conditional_rendering: return .Device;
			case .VK_KHR_shader_float16_int8: return .Device;
			case .VK_KHR_16bit_storage: return .Device;
			case .VK_KHR_incremental_present: return .Device;
			case .VK_KHR_descriptor_update_template: return .Device;
			case .VK_NV_clip_space_w_scaling: return .Device;
			case .VK_EXT_direct_mode_display: return .Instance;
			case .VK_EXT_display_surface_counter: return .Instance;
			case .VK_EXT_display_control: return .Device;
			case .VK_GOOGLE_display_timing: return .Device;
			case .VK_NV_sample_mask_override_coverage: return .Device;
			case .VK_NV_geometry_shader_passthrough: return .Device;
			case .VK_NV_viewport_array2: return .Device;
			case .VK_NVX_multiview_per_view_attributes: return .Device;
			case .VK_NV_viewport_swizzle: return .Device;
			case .VK_EXT_discard_rectangles: return .Device;
			case .VK_EXT_conservative_rasterization: return .Device;
			case .VK_EXT_depth_clip_enable: return .Device;
			case .VK_EXT_swapchain_colorspace: return .Instance;
			case .VK_EXT_hdr_metadata: return .Device;
			case .VK_KHR_imageless_framebuffer: return .Device;
			case .VK_KHR_create_renderpass2: return .Device;
			case .VK_IMG_relaxed_line_rasterization: return .Device;
			case .VK_KHR_shared_presentable_image: return .Device;
			case .VK_KHR_external_fence_capabilities: return .Instance;
			case .VK_KHR_external_fence: return .Device;
			case .VK_KHR_external_fence_fd: return .Device;
			case .VK_KHR_performance_query: return .Device;
			case .VK_KHR_maintenance2: return .Device;
			case .VK_KHR_get_surface_capabilities2: return .Instance;
			case .VK_KHR_variable_pointers: return .Device;
			case .VK_KHR_get_display_properties2: return .Instance;
			case .VK_EXT_external_memory_dma_buf: return .Device;
			case .VK_EXT_queue_family_foreign: return .Device;
			case .VK_KHR_dedicated_allocation: return .Device;
			case .VK_EXT_debug_utils: return .Instance;
			case .VK_EXT_sampler_filter_minmax: return .Device;
			case .VK_KHR_storage_buffer_storage_class: return .Device;
			case .VK_AMD_gpu_shader_int16: return .Device;
			case .VK_AMD_mixed_attachment_samples: return .Device;
			case .VK_AMD_shader_fragment_mask: return .Device;
			case .VK_EXT_inline_uniform_block: return .Device;
			case .VK_EXT_shader_stencil_export: return .Device;
			case .VK_KHR_shader_bfloat16: return .Device;
			case .VK_EXT_sample_locations: return .Device;
			case .VK_KHR_relaxed_block_layout: return .Device;
			case .VK_KHR_get_memory_requirements2: return .Device;
			case .VK_KHR_image_format_list: return .Device;
			case .VK_EXT_blend_operation_advanced: return .Device;
			case .VK_NV_fragment_coverage_to_color: return .Device;
			case .VK_KHR_acceleration_structure: return .Device;
			case .VK_KHR_ray_tracing_pipeline: return .Device;
			case .VK_KHR_ray_query: return .Device;
			case .VK_NV_framebuffer_mixed_samples: return .Device;
			case .VK_NV_fill_rectangle: return .Device;
			case .VK_NV_shader_sm_builtins: return .Device;
			case .VK_EXT_post_depth_coverage: return .Device;
			case .VK_KHR_sampler_ycbcr_conversion: return .Device;
			case .VK_KHR_bind_memory2: return .Device;
			case .VK_EXT_image_drm_format_modifier: return .Device;
			case .VK_EXT_validation_cache: return .Device;
			case .VK_EXT_descriptor_indexing: return .Device;
			case .VK_EXT_shader_viewport_index_layer: return .Device;
			case .VK_NV_shading_rate_image: return .Device;
			case .VK_NV_ray_tracing: return .Device;
			case .VK_NV_representative_fragment_test: return .Device;
			case .VK_KHR_maintenance3: return .Device;
			case .VK_KHR_draw_indirect_count: return .Device;
			case .VK_EXT_filter_cubic: return .Device;
			case .VK_QCOM_render_pass_shader_resolve: return .Device;
			case .VK_EXT_global_priority: return .Device;
			case .VK_KHR_shader_subgroup_extended_types: return .Device;
			case .VK_KHR_8bit_storage: return .Device;
			case .VK_EXT_external_memory_host: return .Device;
			case .VK_AMD_buffer_marker: return .Device;
			case .VK_KHR_shader_atomic_int64: return .Device;
			case .VK_KHR_shader_clock: return .Device;
			case .VK_AMD_pipeline_compiler_control: return .Device;
			case .VK_EXT_calibrated_timestamps: return .Device;
			case .VK_AMD_shader_core_properties: return .Device;
			case .VK_KHR_video_decode_h265: return .Device;
			case .VK_KHR_global_priority: return .Device;
			case .VK_AMD_memory_overallocation_behavior: return .Device;
			case .VK_EXT_vertex_attribute_divisor: return .Device;
			case .VK_EXT_pipeline_creation_feedback: return .Device;
			case .VK_KHR_driver_properties: return .Device;
			case .VK_KHR_shader_float_controls: return .Device;
			case .VK_NV_shader_subgroup_partitioned: return .Device;
			case .VK_KHR_depth_stencil_resolve: return .Device;
			case .VK_KHR_swapchain_mutable_format: return .Device;
			case .VK_NV_compute_shader_derivatives: return .Device;
			case .VK_NV_mesh_shader: return .Device;
			case .VK_NV_fragment_shader_barycentric: return .Device;
			case .VK_NV_shader_image_footprint: return .Device;
			case .VK_NV_scissor_exclusive: return .Device;
			case .VK_NV_device_diagnostic_checkpoints: return .Device;
			case .VK_KHR_timeline_semaphore: return .Device;
			case .VK_INTEL_shader_integer_functions2: return .Device;
			case .VK_INTEL_performance_query: return .Device;
			case .VK_KHR_vulkan_memory_model: return .Device;
			case .VK_EXT_pci_bus_info: return .Device;
			case .VK_AMD_display_native_hdr: return .Device;
			case .VK_KHR_shader_terminate_invocation: return .Device;
			case .VK_EXT_fragment_density_map: return .Device;
			case .VK_EXT_scalar_block_layout: return .Device;
			case .VK_GOOGLE_hlsl_functionality1: return .Device;
			case .VK_GOOGLE_decorate_string: return .Device;
			case .VK_EXT_subgroup_size_control: return .Device;
			case .VK_KHR_fragment_shading_rate: return .Device;
			case .VK_AMD_shader_core_properties2: return .Device;
			case .VK_AMD_device_coherent_memory: return .Device;
			case .VK_KHR_dynamic_rendering_local_read: return .Device;
			case .VK_EXT_shader_image_atomic_int64: return .Device;
			case .VK_KHR_shader_quad_control: return .Device;
			case .VK_KHR_spirv_1_4: return .Device;
			case .VK_EXT_memory_budget: return .Device;
			case .VK_EXT_memory_priority: return .Device;
			case .VK_KHR_surface_protected_capabilities: return .Instance;
			case .VK_NV_dedicated_allocation_image_aliasing: return .Device;
			case .VK_KHR_separate_depth_stencil_layouts: return .Device;
			case .VK_EXT_buffer_device_address: return .Device;
			case .VK_EXT_tooling_info: return .Device;
			case .VK_EXT_separate_stencil_usage: return .Device;
			case .VK_EXT_validation_features: return .Instance;
			case .VK_KHR_present_wait: return .Device;
			case .VK_NV_cooperative_matrix: return .Device;
			case .VK_NV_coverage_reduction_mode: return .Device;
			case .VK_EXT_fragment_shader_interlock: return .Device;
			case .VK_EXT_ycbcr_image_arrays: return .Device;
			case .VK_KHR_uniform_buffer_standard_layout: return .Device;
			case .VK_EXT_provoking_vertex: return .Device;
			case .VK_EXT_headless_surface: return .Instance;
			case .VK_KHR_buffer_device_address: return .Device;
			case .VK_EXT_line_rasterization: return .Device;
			case .VK_EXT_shader_atomic_float: return .Device;
			case .VK_EXT_host_query_reset: return .Device;
			case .VK_EXT_index_type_uint8: return .Device;
			case .VK_EXT_extended_dynamic_state: return .Device;
			case .VK_KHR_deferred_host_operations: return .Device;
			case .VK_KHR_pipeline_executable_properties: return .Device;
			case .VK_EXT_host_image_copy: return .Device;
			case .VK_KHR_map_memory2: return .Device;
			case .VK_EXT_map_memory_placed: return .Device;
			case .VK_EXT_shader_atomic_float2: return .Device;
			case .VK_EXT_surface_maintenance1: return .Instance;
			case .VK_EXT_swapchain_maintenance1: return .Device;
			case .VK_EXT_shader_demote_to_helper_invocation: return .Device;
			case .VK_NV_device_generated_commands: return .Device;
			case .VK_NV_inherited_viewport_scissor: return .Device;
			case .VK_KHR_shader_integer_dot_product: return .Device;
			case .VK_EXT_texel_buffer_alignment: return .Device;
			case .VK_QCOM_render_pass_transform: return .Device;
			case .VK_EXT_depth_bias_control: return .Device;
			case .VK_EXT_device_memory_report: return .Device;
			case .VK_EXT_acquire_drm_display: return .Instance;
			case .VK_EXT_robustness2: return .Device;
			case .VK_EXT_custom_border_color: return .Device;
			case .VK_GOOGLE_user_type: return .Device;
			case .VK_KHR_pipeline_library: return .Device;
			case .VK_NV_present_barrier: return .Device;
			case .VK_KHR_shader_non_semantic_info: return .Device;
			case .VK_KHR_present_id: return .Device;
			case .VK_EXT_private_data: return .Device;
			case .VK_EXT_pipeline_creation_cache_control: return .Device;
			case .VK_KHR_video_encode_queue: return .Device;
			case .VK_NV_device_diagnostics_config: return .Device;
			case .VK_QCOM_render_pass_store_ops: return .Device;
			case .VK_QCOM_tile_shading: return .Device;
			case .VK_NV_low_latency: return .Device;
			case .VK_KHR_synchronization2: return .Device;
			case .VK_EXT_descriptor_buffer: return .Device;
			case .VK_EXT_graphics_pipeline_library: return .Device;
			case .VK_AMD_shader_early_and_late_fragment_tests: return .Device;
			case .VK_KHR_fragment_shader_barycentric: return .Device;
			case .VK_KHR_shader_subgroup_uniform_control_flow: return .Device;
			case .VK_KHR_zero_initialize_workgroup_memory: return .Device;
			case .VK_NV_fragment_shading_rate_enums: return .Device;
			case .VK_NV_ray_tracing_motion_blur: return .Device;
			case .VK_EXT_mesh_shader: return .Device;
			case .VK_EXT_ycbcr_2plane_444_formats: return .Device;
			case .VK_EXT_fragment_density_map2: return .Device;
			case .VK_QCOM_rotated_copy_commands: return .Device;
			case .VK_EXT_image_robustness: return .Device;
			case .VK_KHR_workgroup_memory_explicit_layout: return .Device;
			case .VK_KHR_copy_commands2: return .Device;
			case .VK_EXT_image_compression_control: return .Device;
			case .VK_EXT_attachment_feedback_loop_layout: return .Device;
			case .VK_EXT_4444_formats: return .Device;
			case .VK_EXT_device_fault: return .Device;
			case .VK_ARM_rasterization_order_attachment_access: return .Device;
			case .VK_EXT_rgba10x6_formats: return .Device;
			case .VK_VALVE_mutable_descriptor_type: return .Device;
			case .VK_EXT_vertex_input_dynamic_state: return .Device;
			case .VK_EXT_physical_device_drm: return .Device;
			case .VK_EXT_device_address_binding_report: return .Device;
			case .VK_EXT_depth_clip_control: return .Device;
			case .VK_EXT_primitive_topology_list_restart: return .Device;
			case .VK_KHR_format_feature_flags2: return .Device;
			case .VK_EXT_present_mode_fifo_latest_ready: return .Device;
			case .VK_HUAWEI_subpass_shading: return .Device;
			case .VK_HUAWEI_invocation_mask: return .Device;
			case .VK_NV_external_memory_rdma: return .Device;
			case .VK_EXT_pipeline_properties: return .Device;
			case .VK_EXT_frame_boundary: return .Device;
			case .VK_EXT_multisampled_render_to_single_sampled: return .Device;
			case .VK_EXT_extended_dynamic_state2: return .Device;
			case .VK_EXT_color_write_enable: return .Device;
			case .VK_EXT_primitives_generated_query: return .Device;
			case .VK_KHR_ray_tracing_maintenance1: return .Device;
			case .VK_EXT_global_priority_query: return .Device;
			case .VK_EXT_image_view_min_lod: return .Device;
			case .VK_EXT_multi_draw: return .Device;
			case .VK_EXT_image_2d_view_of_3d: return .Device;
			case .VK_KHR_portability_enumeration: return .Instance;
			case .VK_EXT_shader_tile_image: return .Device;
			case .VK_EXT_opacity_micromap: return .Device;
			case .VK_EXT_load_store_op_none: return .Device;
			case .VK_HUAWEI_cluster_culling_shader: return .Device;
			case .VK_EXT_border_color_swizzle: return .Device;
			case .VK_EXT_pageable_device_local_memory: return .Device;
			case .VK_KHR_maintenance4: return .Device;
			case .VK_ARM_shader_core_properties: return .Device;
			case .VK_KHR_shader_subgroup_rotate: return .Device;
			case .VK_ARM_scheduling_controls: return .Device;
			case .VK_EXT_image_sliced_view_of_3d: return .Device;
			case .VK_VALVE_descriptor_set_host_mapping: return .Device;
			case .VK_EXT_depth_clamp_zero_one: return .Device;
			case .VK_EXT_non_seamless_cube_map: return .Device;
			case .VK_ARM_render_pass_striped: return .Device;
			case .VK_QCOM_fragment_density_map_offset: return .Device;
			case .VK_NV_copy_memory_indirect: return .Device;
			case .VK_NV_memory_decompression: return .Device;
			case .VK_NV_device_generated_commands_compute: return .Device;
			case .VK_NV_ray_tracing_linear_swept_spheres: return .Device;
			case .VK_NV_linear_color_attachment: return .Device;
			case .VK_GOOGLE_surfaceless_query: return .Instance;
			case .VK_KHR_shader_maximal_reconvergence: return .Device;
			case .VK_EXT_image_compression_control_swapchain: return .Device;
			case .VK_QCOM_image_processing: return .Device;
			case .VK_EXT_nested_command_buffer: return .Device;
			case .VK_EXT_external_memory_acquire_unmodified: return .Device;
			case .VK_EXT_extended_dynamic_state3: return .Device;
			case .VK_EXT_subpass_merge_feedback: return .Device;
			case .VK_LUNARG_direct_driver_loading: return .Instance;
			case .VK_ARM_tensors: return .Device;
			case .VK_EXT_shader_module_identifier: return .Device;
			case .VK_EXT_rasterization_order_attachment_access: return .Device;
			case .VK_NV_optical_flow: return .Device;
			case .VK_EXT_legacy_dithering: return .Device;
			case .VK_EXT_pipeline_protected_access: return .Device;
			case .VK_KHR_maintenance5: return .Device;
			case .VK_AMD_anti_lag: return .Device;
			case .VK_KHR_present_id2: return .Device;
			case .VK_KHR_present_wait2: return .Device;
			case .VK_KHR_ray_tracing_position_fetch: return .Device;
			case .VK_EXT_shader_object: return .Device;
			case .VK_KHR_pipeline_binary: return .Device;
			case .VK_QCOM_tile_properties: return .Device;
			case .VK_SEC_amigo_profiling: return .Device;
			case .VK_KHR_surface_maintenance1: return .Instance;
			case .VK_KHR_swapchain_maintenance1: return .Device;
			case .VK_QCOM_multiview_per_view_viewports: return .Device;
			case .VK_NV_ray_tracing_invocation_reorder: return .Device;
			case .VK_NV_cooperative_vector: return .Device;
			case .VK_NV_extended_sparse_address_space: return .Device;
			case .VK_EXT_mutable_descriptor_type: return .Device;
			case .VK_EXT_legacy_vertex_attributes: return .Device;
			case .VK_EXT_layer_settings: return .Instance;
			case .VK_ARM_shader_core_builtins: return .Device;
			case .VK_EXT_pipeline_library_group_handles: return .Device;
			case .VK_EXT_dynamic_rendering_unused_attachments: return .Device;
			case .VK_NV_low_latency2: return .Device;
			case .VK_KHR_cooperative_matrix: return .Device;
			case .VK_ARM_data_graph: return .Device;
			case .VK_QCOM_multiview_per_view_render_areas: return .Device;
			case .VK_KHR_compute_shader_derivatives: return .Device;
			case .VK_KHR_video_decode_av1: return .Device;
			case .VK_KHR_video_encode_av1: return .Device;
			case .VK_KHR_video_decode_vp9: return .Device;
			case .VK_KHR_video_maintenance1: return .Device;
			case .VK_NV_per_stage_descriptor_set: return .Device;
			case .VK_QCOM_image_processing2: return .Device;
			case .VK_QCOM_filter_cubic_weights: return .Device;
			case .VK_QCOM_ycbcr_degamma: return .Device;
			case .VK_QCOM_filter_cubic_clamp: return .Device;
			case .VK_EXT_attachment_feedback_loop_dynamic_state: return .Device;
			case .VK_KHR_vertex_attribute_divisor: return .Device;
			case .VK_KHR_load_store_op_none: return .Device;
			case .VK_KHR_unified_image_layouts: return .Device;
			case .VK_KHR_shader_float_controls2: return .Device;
			case .VK_MSFT_layered_driver: return .Device;
			case .VK_KHR_index_type_uint8: return .Device;
			case .VK_KHR_line_rasterization: return .Device;
			case .VK_KHR_calibrated_timestamps: return .Device;
			case .VK_KHR_shader_expect_assume: return .Device;
			case .VK_KHR_maintenance6: return .Device;
			case .VK_NV_descriptor_pool_overallocation: return .Device;
			case .VK_QCOM_tile_memory_heap: return .Device;
			case .VK_NV_display_stereo: return .Instance;
			case .VK_KHR_video_encode_intra_refresh: return .Device;
			case .VK_KHR_video_encode_quantization_map: return .Device;
			case .VK_NV_raw_access_chains: return .Device;
			case .VK_NV_external_compute_queue: return .Device;
			case .VK_KHR_shader_relaxed_extended_instruction: return .Device;
			case .VK_NV_command_buffer_inheritance: return .Device;
			case .VK_KHR_maintenance7: return .Device;
			case .VK_NV_shader_atomic_float16_vector: return .Device;
			case .VK_EXT_shader_replicated_composites: return .Device;
			case .VK_EXT_shader_float8: return .Device;
			case .VK_NV_ray_tracing_validation: return .Device;
			case .VK_NV_cluster_acceleration_structure: return .Device;
			case .VK_NV_partitioned_acceleration_structure: return .Device;
			case .VK_EXT_device_generated_commands: return .Device;
			case .VK_KHR_maintenance8: return .Device;
			case .VK_MESA_image_alignment_control: return .Device;
			case .VK_EXT_depth_clamp_control: return .Device;
			case .VK_KHR_maintenance9: return .Device;
			case .VK_KHR_video_maintenance2: return .Device;
			case .VK_HUAWEI_hdr_vivid: return .Device;
			case .VK_NV_cooperative_matrix2: return .Device;
			case .VK_ARM_pipeline_opacity_micromap: return .Device;
			case .VK_KHR_depth_clamp_zero_one: return .Device;
			case .VK_EXT_vertex_attribute_robustness: return .Device;
			case .VK_ARM_format_pack: return .Device;
			case .VK_VALVE_fragment_density_map_layered: return .Device;
			case .VK_KHR_robustness2: return .Device;
			case .VK_EXT_fragment_density_map_offset: return .Device;
			case .VK_EXT_zero_initialize_device_memory: return .Device;
			case .VK_KHR_present_mode_fifo_latest_ready: return .Device;
			case .VK_SEC_pipeline_cache_incremental_mode: return .Device;
			}
		}
	}

	public StringView Tag
	{
		get
		{
			switch (this)
			{
			case .VK_KHR_surface: return "KHR";
			case .VK_KHR_swapchain: return "KHR";
			case .VK_KHR_display: return "KHR";
			case .VK_KHR_display_swapchain: return "KHR";
			case .VK_EXT_debug_report: return "GOOGLE";
			case .VK_NV_glsl_shader: return "NV";
			case .VK_EXT_depth_range_unrestricted: return "NV";
			case .VK_KHR_sampler_mirror_clamp_to_edge: return "KHR";
			case .VK_IMG_filter_cubic: return "IMG";
			case .VK_AMD_rasterization_order: return "AMD";
			case .VK_AMD_shader_trinary_minmax: return "AMD";
			case .VK_AMD_shader_explicit_vertex_parameter: return "AMD";
			case .VK_EXT_debug_marker: return "Baldur Karlsson";
			case .VK_KHR_video_queue: return "KHR";
			case .VK_KHR_video_decode_queue: return "KHR";
			case .VK_AMD_gcn_shader: return "AMD";
			case .VK_NV_dedicated_allocation: return "NV";
			case .VK_EXT_transform_feedback: return "NV";
			case .VK_NVX_binary_import: return "NVX";
			case .VK_NVX_image_view_handle: return "NVX";
			case .VK_AMD_draw_indirect_count: return "AMD";
			case .VK_AMD_negative_viewport_height: return "AMD";
			case .VK_AMD_gpu_shader_half_float: return "AMD";
			case .VK_AMD_shader_ballot: return "AMD";
			case .VK_KHR_video_encode_h264: return "KHR";
			case .VK_KHR_video_encode_h265: return "KHR";
			case .VK_KHR_video_decode_h264: return "KHR";
			case .VK_AMD_texture_gather_bias_lod: return "AMD";
			case .VK_AMD_shader_info: return "AMD";
			case .VK_KHR_dynamic_rendering: return "KHR";
			case .VK_AMD_shader_image_load_store_lod: return "AMD";
			case .VK_NV_corner_sampled_image: return "NV";
			case .VK_KHR_multiview: return "KHR";
			case .VK_IMG_format_pvrtc: return "IMG";
			case .VK_NV_external_memory_capabilities: return "NV";
			case .VK_NV_external_memory: return "NV";
			case .VK_KHR_get_physical_device_properties2: return "KHR";
			case .VK_KHR_device_group: return "KHR";
			case .VK_EXT_validation_flags: return "GOOGLE";
			case .VK_KHR_shader_draw_parameters: return "KHR";
			case .VK_EXT_shader_subgroup_ballot: return "NV";
			case .VK_EXT_shader_subgroup_vote: return "NV";
			case .VK_EXT_texture_compression_astc_hdr: return "ARM";
			case .VK_EXT_astc_decode_mode: return "ARM";
			case .VK_EXT_pipeline_robustness: return "IMG";
			case .VK_KHR_maintenance1: return "KHR";
			case .VK_KHR_device_group_creation: return "KHR";
			case .VK_KHR_external_memory_capabilities: return "KHR";
			case .VK_KHR_external_memory: return "KHR";
			case .VK_KHR_external_memory_fd: return "KHR";
			case .VK_KHR_external_semaphore_capabilities: return "KHR";
			case .VK_KHR_external_semaphore: return "KHR";
			case .VK_KHR_external_semaphore_fd: return "KHR";
			case .VK_KHR_push_descriptor: return "KHR";
			case .VK_EXT_conditional_rendering: return "NV";
			case .VK_KHR_shader_float16_int8: return "KHR";
			case .VK_KHR_16bit_storage: return "KHR";
			case .VK_KHR_incremental_present: return "KHR";
			case .VK_KHR_descriptor_update_template: return "KHR";
			case .VK_NV_clip_space_w_scaling: return "NV";
			case .VK_EXT_direct_mode_display: return "NV";
			case .VK_EXT_display_surface_counter: return "NV";
			case .VK_EXT_display_control: return "NV";
			case .VK_GOOGLE_display_timing: return "GOOGLE";
			case .VK_NV_sample_mask_override_coverage: return "NV";
			case .VK_NV_geometry_shader_passthrough: return "NV";
			case .VK_NV_viewport_array2: return "NV";
			case .VK_NVX_multiview_per_view_attributes: return "NVX";
			case .VK_NV_viewport_swizzle: return "NV";
			case .VK_EXT_discard_rectangles: return "NV";
			case .VK_EXT_conservative_rasterization: return "NV";
			case .VK_EXT_depth_clip_enable: return "EXT";
			case .VK_EXT_swapchain_colorspace: return "GOOGLE";
			case .VK_EXT_hdr_metadata: return "GOOGLE";
			case .VK_KHR_imageless_framebuffer: return "KHR";
			case .VK_KHR_create_renderpass2: return "KHR";
			case .VK_IMG_relaxed_line_rasterization: return "IMG";
			case .VK_KHR_shared_presentable_image: return "KHR";
			case .VK_KHR_external_fence_capabilities: return "KHR";
			case .VK_KHR_external_fence: return "KHR";
			case .VK_KHR_external_fence_fd: return "KHR";
			case .VK_KHR_performance_query: return "KHR";
			case .VK_KHR_maintenance2: return "KHR";
			case .VK_KHR_get_surface_capabilities2: return "KHR";
			case .VK_KHR_variable_pointers: return "KHR";
			case .VK_KHR_get_display_properties2: return "KHR";
			case .VK_EXT_external_memory_dma_buf: return "EXT";
			case .VK_EXT_queue_family_foreign: return "EXT";
			case .VK_KHR_dedicated_allocation: return "KHR";
			case .VK_EXT_debug_utils: return "EXT";
			case .VK_EXT_sampler_filter_minmax: return "NV";
			case .VK_KHR_storage_buffer_storage_class: return "KHR";
			case .VK_AMD_gpu_shader_int16: return "AMD";
			case .VK_AMD_mixed_attachment_samples: return "AMD";
			case .VK_AMD_shader_fragment_mask: return "AMD";
			case .VK_EXT_inline_uniform_block: return "EXT";
			case .VK_EXT_shader_stencil_export: return "EXT";
			case .VK_KHR_shader_bfloat16: return "KHR";
			case .VK_EXT_sample_locations: return "AMD";
			case .VK_KHR_relaxed_block_layout: return "KHR";
			case .VK_KHR_get_memory_requirements2: return "KHR";
			case .VK_KHR_image_format_list: return "KHR";
			case .VK_EXT_blend_operation_advanced: return "NV";
			case .VK_NV_fragment_coverage_to_color: return "NV";
			case .VK_KHR_acceleration_structure: return "KHR";
			case .VK_KHR_ray_tracing_pipeline: return "KHR";
			case .VK_KHR_ray_query: return "KHR";
			case .VK_NV_framebuffer_mixed_samples: return "NV";
			case .VK_NV_fill_rectangle: return "NV";
			case .VK_NV_shader_sm_builtins: return "NV";
			case .VK_EXT_post_depth_coverage: return "NV";
			case .VK_KHR_sampler_ycbcr_conversion: return "KHR";
			case .VK_KHR_bind_memory2: return "KHR";
			case .VK_EXT_image_drm_format_modifier: return "EXT";
			case .VK_EXT_validation_cache: return "GOOGLE";
			case .VK_EXT_descriptor_indexing: return "NV";
			case .VK_EXT_shader_viewport_index_layer: return "NV";
			case .VK_NV_shading_rate_image: return "NV";
			case .VK_NV_ray_tracing: return "NV";
			case .VK_NV_representative_fragment_test: return "NV";
			case .VK_KHR_maintenance3: return "KHR";
			case .VK_KHR_draw_indirect_count: return "KHR";
			case .VK_EXT_filter_cubic: return "QCOM";
			case .VK_QCOM_render_pass_shader_resolve: return "QCOM";
			case .VK_EXT_global_priority: return "EXT";
			case .VK_KHR_shader_subgroup_extended_types: return "KHR";
			case .VK_KHR_8bit_storage: return "KHR";
			case .VK_EXT_external_memory_host: return "EXT";
			case .VK_AMD_buffer_marker: return "AMD";
			case .VK_KHR_shader_atomic_int64: return "KHR";
			case .VK_KHR_shader_clock: return "KHR";
			case .VK_AMD_pipeline_compiler_control: return "AMD";
			case .VK_EXT_calibrated_timestamps: return "EXT";
			case .VK_AMD_shader_core_properties: return "AMD";
			case .VK_KHR_video_decode_h265: return "KHR";
			case .VK_KHR_global_priority: return "KHR";
			case .VK_AMD_memory_overallocation_behavior: return "AMD";
			case .VK_EXT_vertex_attribute_divisor: return "NV";
			case .VK_EXT_pipeline_creation_feedback: return "GOOGLE";
			case .VK_KHR_driver_properties: return "KHR";
			case .VK_KHR_shader_float_controls: return "KHR";
			case .VK_NV_shader_subgroup_partitioned: return "NV";
			case .VK_KHR_depth_stencil_resolve: return "KHR";
			case .VK_KHR_swapchain_mutable_format: return "KHR";
			case .VK_NV_compute_shader_derivatives: return "NV";
			case .VK_NV_mesh_shader: return "NV";
			case .VK_NV_fragment_shader_barycentric: return "NV";
			case .VK_NV_shader_image_footprint: return "NV";
			case .VK_NV_scissor_exclusive: return "NV";
			case .VK_NV_device_diagnostic_checkpoints: return "NVIDIA";
			case .VK_KHR_timeline_semaphore: return "KHR";
			case .VK_INTEL_shader_integer_functions2: return "INTEL";
			case .VK_INTEL_performance_query: return "INTEL";
			case .VK_KHR_vulkan_memory_model: return "KHR";
			case .VK_EXT_pci_bus_info: return "EXT";
			case .VK_AMD_display_native_hdr: return "AMD";
			case .VK_KHR_shader_terminate_invocation: return "KHR";
			case .VK_EXT_fragment_density_map: return "EXT";
			case .VK_EXT_scalar_block_layout: return "EXT";
			case .VK_GOOGLE_hlsl_functionality1: return "GOOGLE";
			case .VK_GOOGLE_decorate_string: return "GOOGLE";
			case .VK_EXT_subgroup_size_control: return "EXT";
			case .VK_KHR_fragment_shading_rate: return "KHR";
			case .VK_AMD_shader_core_properties2: return "AMD";
			case .VK_AMD_device_coherent_memory: return "AMD";
			case .VK_KHR_dynamic_rendering_local_read: return "AMD";
			case .VK_EXT_shader_image_atomic_int64: return "EXT";
			case .VK_KHR_shader_quad_control: return "KHR";
			case .VK_KHR_spirv_1_4: return "KHR";
			case .VK_EXT_memory_budget: return "EXT";
			case .VK_EXT_memory_priority: return "EXT";
			case .VK_KHR_surface_protected_capabilities: return "KHR";
			case .VK_NV_dedicated_allocation_image_aliasing: return "NVIDIA";
			case .VK_KHR_separate_depth_stencil_layouts: return "KHR";
			case .VK_EXT_buffer_device_address: return "NV";
			case .VK_EXT_tooling_info: return "EXT";
			case .VK_EXT_separate_stencil_usage: return "EXT";
			case .VK_EXT_validation_features: return "LUNARG";
			case .VK_KHR_present_wait: return "KHR";
			case .VK_NV_cooperative_matrix: return "NV";
			case .VK_NV_coverage_reduction_mode: return "NV";
			case .VK_EXT_fragment_shader_interlock: return "EXT";
			case .VK_EXT_ycbcr_image_arrays: return "EXT";
			case .VK_KHR_uniform_buffer_standard_layout: return "KHR";
			case .VK_EXT_provoking_vertex: return "EXT";
			case .VK_EXT_headless_surface: return "EXT";
			case .VK_KHR_buffer_device_address: return "KHR";
			case .VK_EXT_line_rasterization: return "EXT";
			case .VK_EXT_shader_atomic_float: return "NV";
			case .VK_EXT_host_query_reset: return "EXT";
			case .VK_EXT_index_type_uint8: return "EXT";
			case .VK_EXT_extended_dynamic_state: return "EXT";
			case .VK_KHR_deferred_host_operations: return "KHR";
			case .VK_KHR_pipeline_executable_properties: return "KHR";
			case .VK_EXT_host_image_copy: return "EXT";
			case .VK_KHR_map_memory2: return "KHR";
			case .VK_EXT_map_memory_placed: return "EXT";
			case .VK_EXT_shader_atomic_float2: return "EXT";
			case .VK_EXT_surface_maintenance1: return "EXT";
			case .VK_EXT_swapchain_maintenance1: return "EXT";
			case .VK_EXT_shader_demote_to_helper_invocation: return "EXT";
			case .VK_NV_device_generated_commands: return "NV";
			case .VK_NV_inherited_viewport_scissor: return "NV";
			case .VK_KHR_shader_integer_dot_product: return "KHR";
			case .VK_EXT_texel_buffer_alignment: return "EXT";
			case .VK_QCOM_render_pass_transform: return "QCOM";
			case .VK_EXT_depth_bias_control: return "EXT";
			case .VK_EXT_device_memory_report: return "EXT";
			case .VK_EXT_acquire_drm_display: return "EXT";
			case .VK_EXT_robustness2: return "EXT";
			case .VK_EXT_custom_border_color: return "EXT";
			case .VK_GOOGLE_user_type: return "GOOGLE";
			case .VK_KHR_pipeline_library: return "KHR";
			case .VK_NV_present_barrier: return "NV";
			case .VK_KHR_shader_non_semantic_info: return "KHR";
			case .VK_KHR_present_id: return "KHR";
			case .VK_EXT_private_data: return "NV";
			case .VK_EXT_pipeline_creation_cache_control: return "AMD";
			case .VK_KHR_video_encode_queue: return "KHR";
			case .VK_NV_device_diagnostics_config: return "NV";
			case .VK_QCOM_render_pass_store_ops: return "QCOM";
			case .VK_QCOM_tile_shading: return "QCOM";
			case .VK_NV_low_latency: return "NV";
			case .VK_KHR_synchronization2: return "KHR";
			case .VK_EXT_descriptor_buffer: return "EXT";
			case .VK_EXT_graphics_pipeline_library: return "AMD";
			case .VK_AMD_shader_early_and_late_fragment_tests: return "EXT";
			case .VK_KHR_fragment_shader_barycentric: return "KHR";
			case .VK_KHR_shader_subgroup_uniform_control_flow: return "KHR";
			case .VK_KHR_zero_initialize_workgroup_memory: return "KHR";
			case .VK_NV_fragment_shading_rate_enums: return "NV";
			case .VK_NV_ray_tracing_motion_blur: return "NV";
			case .VK_EXT_mesh_shader: return "EXT";
			case .VK_EXT_ycbcr_2plane_444_formats: return "EXT";
			case .VK_EXT_fragment_density_map2: return "EXT";
			case .VK_QCOM_rotated_copy_commands: return "QCOM";
			case .VK_EXT_image_robustness: return "EXT";
			case .VK_KHR_workgroup_memory_explicit_layout: return "KHR";
			case .VK_KHR_copy_commands2: return "KHR";
			case .VK_EXT_image_compression_control: return "EXT";
			case .VK_EXT_attachment_feedback_loop_layout: return "EXT";
			case .VK_EXT_4444_formats: return "EXT";
			case .VK_EXT_device_fault: return "EXT";
			case .VK_ARM_rasterization_order_attachment_access: return "ARM";
			case .VK_EXT_rgba10x6_formats: return "EXT";
			case .VK_VALVE_mutable_descriptor_type: return "VALVE";
			case .VK_EXT_vertex_input_dynamic_state: return "EXT";
			case .VK_EXT_physical_device_drm: return "EXT";
			case .VK_EXT_device_address_binding_report: return "EXT";
			case .VK_EXT_depth_clip_control: return "EXT";
			case .VK_EXT_primitive_topology_list_restart: return "EXT";
			case .VK_KHR_format_feature_flags2: return "KHR";
			case .VK_EXT_present_mode_fifo_latest_ready: return "EXT";
			case .VK_HUAWEI_subpass_shading: return "HUAWEI";
			case .VK_HUAWEI_invocation_mask: return "Huawei";
			case .VK_NV_external_memory_rdma: return "NV";
			case .VK_EXT_pipeline_properties: return "EXT";
			case .VK_EXT_frame_boundary: return "EXT";
			case .VK_EXT_multisampled_render_to_single_sampled: return "EXT";
			case .VK_EXT_extended_dynamic_state2: return "EXT";
			case .VK_EXT_color_write_enable: return "EXT";
			case .VK_EXT_primitives_generated_query: return "EXT";
			case .VK_KHR_ray_tracing_maintenance1: return "KHR";
			case .VK_EXT_global_priority_query: return "EXT";
			case .VK_EXT_image_view_min_lod: return "EXT";
			case .VK_EXT_multi_draw: return "EXT";
			case .VK_EXT_image_2d_view_of_3d: return "EXT";
			case .VK_KHR_portability_enumeration: return "KHR";
			case .VK_EXT_shader_tile_image: return "EXT";
			case .VK_EXT_opacity_micromap: return "EXT";
			case .VK_EXT_load_store_op_none: return "EXT";
			case .VK_HUAWEI_cluster_culling_shader: return "HUAWEI";
			case .VK_EXT_border_color_swizzle: return "EXT";
			case .VK_EXT_pageable_device_local_memory: return "EXT";
			case .VK_KHR_maintenance4: return "KHR";
			case .VK_ARM_shader_core_properties: return "ARM";
			case .VK_KHR_shader_subgroup_rotate: return "KHR";
			case .VK_ARM_scheduling_controls: return "ARM";
			case .VK_EXT_image_sliced_view_of_3d: return "EXT";
			case .VK_VALVE_descriptor_set_host_mapping: return "VALVE";
			case .VK_EXT_depth_clamp_zero_one: return "EXT";
			case .VK_EXT_non_seamless_cube_map: return "EXT";
			case .VK_ARM_render_pass_striped: return "ARM";
			case .VK_QCOM_fragment_density_map_offset: return "QCOM";
			case .VK_NV_copy_memory_indirect: return "NV";
			case .VK_NV_memory_decompression: return "NV";
			case .VK_NV_device_generated_commands_compute: return "NV";
			case .VK_NV_ray_tracing_linear_swept_spheres: return "NV";
			case .VK_NV_linear_color_attachment: return "NVIDIA";
			case .VK_GOOGLE_surfaceless_query: return "GOOGLE";
			case .VK_KHR_shader_maximal_reconvergence: return "KHR";
			case .VK_EXT_image_compression_control_swapchain: return "EXT";
			case .VK_QCOM_image_processing: return "QCOM";
			case .VK_EXT_nested_command_buffer: return "EXT";
			case .VK_EXT_external_memory_acquire_unmodified: return "EXT";
			case .VK_EXT_extended_dynamic_state3: return "NV";
			case .VK_EXT_subpass_merge_feedback: return "EXT";
			case .VK_LUNARG_direct_driver_loading: return "LUNARG";
			case .VK_ARM_tensors: return "ARM";
			case .VK_EXT_shader_module_identifier: return "EXT";
			case .VK_EXT_rasterization_order_attachment_access: return "ARM";
			case .VK_NV_optical_flow: return "NV";
			case .VK_EXT_legacy_dithering: return "EXT";
			case .VK_EXT_pipeline_protected_access: return "EXT";
			case .VK_KHR_maintenance5: return "KHR";
			case .VK_AMD_anti_lag: return "AMD";
			case .VK_KHR_present_id2: return "KHR";
			case .VK_KHR_present_wait2: return "KHR";
			case .VK_KHR_ray_tracing_position_fetch: return "KHR";
			case .VK_EXT_shader_object: return "EXT";
			case .VK_KHR_pipeline_binary: return "KHR";
			case .VK_QCOM_tile_properties: return "QCOM";
			case .VK_SEC_amigo_profiling: return "SEC";
			case .VK_KHR_surface_maintenance1: return "KHR";
			case .VK_KHR_swapchain_maintenance1: return "KHR";
			case .VK_QCOM_multiview_per_view_viewports: return "QCOM";
			case .VK_NV_ray_tracing_invocation_reorder: return "NV";
			case .VK_NV_cooperative_vector: return "NV";
			case .VK_NV_extended_sparse_address_space: return "NV";
			case .VK_EXT_mutable_descriptor_type: return "EXT";
			case .VK_EXT_legacy_vertex_attributes: return "EXT";
			case .VK_EXT_layer_settings: return "EXT";
			case .VK_ARM_shader_core_builtins: return "ARM";
			case .VK_EXT_pipeline_library_group_handles: return "EXT";
			case .VK_EXT_dynamic_rendering_unused_attachments: return "EXT";
			case .VK_NV_low_latency2: return "NV";
			case .VK_KHR_cooperative_matrix: return "KHR";
			case .VK_ARM_data_graph: return "ARM";
			case .VK_QCOM_multiview_per_view_render_areas: return "QCOM";
			case .VK_KHR_compute_shader_derivatives: return "KHR";
			case .VK_KHR_video_decode_av1: return "KHR";
			case .VK_KHR_video_encode_av1: return "KHR";
			case .VK_KHR_video_decode_vp9: return "KHR";
			case .VK_KHR_video_maintenance1: return "KHR";
			case .VK_NV_per_stage_descriptor_set: return "NV";
			case .VK_QCOM_image_processing2: return "QCOM";
			case .VK_QCOM_filter_cubic_weights: return "QCOM";
			case .VK_QCOM_ycbcr_degamma: return "QCOM";
			case .VK_QCOM_filter_cubic_clamp: return "QCOM";
			case .VK_EXT_attachment_feedback_loop_dynamic_state: return "EXT";
			case .VK_KHR_vertex_attribute_divisor: return "KHR";
			case .VK_KHR_load_store_op_none: return "KHR";
			case .VK_KHR_unified_image_layouts: return "KHR";
			case .VK_KHR_shader_float_controls2: return "KHR";
			case .VK_MSFT_layered_driver: return "MSFT";
			case .VK_KHR_index_type_uint8: return "KHR";
			case .VK_KHR_line_rasterization: return "KHR";
			case .VK_KHR_calibrated_timestamps: return "KHR";
			case .VK_KHR_shader_expect_assume: return "KHR";
			case .VK_KHR_maintenance6: return "KHR";
			case .VK_NV_descriptor_pool_overallocation: return "NV";
			case .VK_QCOM_tile_memory_heap: return "QCOM";
			case .VK_NV_display_stereo: return "NV";
			case .VK_KHR_video_encode_intra_refresh: return "KHR";
			case .VK_KHR_video_encode_quantization_map: return "KHR";
			case .VK_NV_raw_access_chains: return "NV";
			case .VK_NV_external_compute_queue: return "NV";
			case .VK_KHR_shader_relaxed_extended_instruction: return "KHR";
			case .VK_NV_command_buffer_inheritance: return "NV";
			case .VK_KHR_maintenance7: return "KHR";
			case .VK_NV_shader_atomic_float16_vector: return "NV";
			case .VK_EXT_shader_replicated_composites: return "EXT";
			case .VK_EXT_shader_float8: return "EXT";
			case .VK_NV_ray_tracing_validation: return "NV";
			case .VK_NV_cluster_acceleration_structure: return "NV";
			case .VK_NV_partitioned_acceleration_structure: return "NV";
			case .VK_EXT_device_generated_commands: return "EXT";
			case .VK_KHR_maintenance8: return "KHR";
			case .VK_MESA_image_alignment_control: return "MESA";
			case .VK_EXT_depth_clamp_control: return "EXT";
			case .VK_KHR_maintenance9: return "KHR";
			case .VK_KHR_video_maintenance2: return "KHR";
			case .VK_HUAWEI_hdr_vivid: return "HUAWEI";
			case .VK_NV_cooperative_matrix2: return "NV";
			case .VK_ARM_pipeline_opacity_micromap: return "ARM";
			case .VK_KHR_depth_clamp_zero_one: return "KHR";
			case .VK_EXT_vertex_attribute_robustness: return "EXT";
			case .VK_ARM_format_pack: return "ARM";
			case .VK_VALVE_fragment_density_map_layered: return "VALVE";
			case .VK_KHR_robustness2: return "KHR";
			case .VK_EXT_fragment_density_map_offset: return "EXT";
			case .VK_EXT_zero_initialize_device_memory: return "EXT";
			case .VK_KHR_present_mode_fifo_latest_ready: return "KHR";
			case .VK_SEC_pipeline_cache_incremental_mode: return "SEC";
			}
		}
	}

	public VulkanApi? PromotedTo
	{
		get
		{
			switch (this)
			{
			case .VK_KHR_sampler_mirror_clamp_to_edge: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_debug_marker: return VulkanApi.Extension(.VK_EXT_debug_utils);
			case .VK_AMD_draw_indirect_count: return VulkanApi.Extension(.VK_KHR_draw_indirect_count);
			case .VK_KHR_dynamic_rendering: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_multiview: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_get_physical_device_properties2: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_device_group: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_shader_draw_parameters: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_EXT_shader_subgroup_ballot: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_shader_subgroup_vote: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_EXT_texture_compression_astc_hdr: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_pipeline_robustness: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_maintenance1: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_device_group_creation: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_external_memory_capabilities: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_external_memory: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_external_semaphore_capabilities: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_external_semaphore: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_push_descriptor: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_shader_float16_int8: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_16bit_storage: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_descriptor_update_template: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_imageless_framebuffer: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_create_renderpass2: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_external_fence_capabilities: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_external_fence: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_maintenance2: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_variable_pointers: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_dedicated_allocation: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_EXT_sampler_filter_minmax: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_storage_buffer_storage_class: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_EXT_inline_uniform_block: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_relaxed_block_layout: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_get_memory_requirements2: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_image_format_list: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_sampler_ycbcr_conversion: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_bind_memory2: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_EXT_descriptor_indexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_shader_viewport_index_layer: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_maintenance3: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case .VK_KHR_draw_indirect_count: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_global_priority: return VulkanApi.Extension(.VK_KHR_global_priority);
			case .VK_KHR_shader_subgroup_extended_types: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_8bit_storage: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_shader_atomic_int64: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_calibrated_timestamps: return VulkanApi.Extension(.VK_KHR_calibrated_timestamps);
			case .VK_KHR_global_priority: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_EXT_vertex_attribute_divisor: return VulkanApi.Extension(.VK_KHR_vertex_attribute_divisor);
			case .VK_EXT_pipeline_creation_feedback: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_driver_properties: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_shader_float_controls: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_depth_stencil_resolve: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_NV_compute_shader_derivatives: return VulkanApi.Extension(.VK_KHR_compute_shader_derivatives);
			case .VK_NV_fragment_shader_barycentric: return VulkanApi.Extension(.VK_KHR_fragment_shader_barycentric);
			case .VK_KHR_timeline_semaphore: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_vulkan_memory_model: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_shader_terminate_invocation: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_scalar_block_layout: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_subgroup_size_control: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_dynamic_rendering_local_read: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_spirv_1_4: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_separate_depth_stencil_layouts: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_tooling_info: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_separate_stencil_usage: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_uniform_buffer_standard_layout: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_KHR_buffer_device_address: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_line_rasterization: return VulkanApi.Extension(.VK_KHR_line_rasterization);
			case .VK_EXT_host_query_reset: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case .VK_EXT_index_type_uint8: return VulkanApi.Extension(.VK_KHR_index_type_uint8);
			case .VK_EXT_extended_dynamic_state: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_host_image_copy: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_map_memory2: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_EXT_surface_maintenance1: return VulkanApi.Extension(.VK_KHR_surface_maintenance1);
			case .VK_EXT_swapchain_maintenance1: return VulkanApi.Extension(.VK_KHR_swapchain_maintenance1);
			case .VK_EXT_shader_demote_to_helper_invocation: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_shader_integer_dot_product: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_texel_buffer_alignment: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_robustness2: return VulkanApi.Extension(.VK_KHR_robustness2);
			case .VK_KHR_shader_non_semantic_info: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_private_data: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_pipeline_creation_cache_control: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_synchronization2: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_zero_initialize_workgroup_memory: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_ycbcr_2plane_444_formats: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_image_robustness: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_copy_commands2: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_4444_formats: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_ARM_rasterization_order_attachment_access: return VulkanApi.Extension(.VK_EXT_rasterization_order_attachment_access);
			case .VK_VALVE_mutable_descriptor_type: return VulkanApi.Extension(.VK_EXT_mutable_descriptor_type);
			case .VK_KHR_format_feature_flags2: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_present_mode_fifo_latest_ready: return VulkanApi.Extension(.VK_KHR_present_mode_fifo_latest_ready);
			case .VK_EXT_extended_dynamic_state2: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_EXT_global_priority_query: return VulkanApi.Extension(.VK_KHR_global_priority);
			case .VK_EXT_load_store_op_none: return VulkanApi.Extension(.VK_KHR_load_store_op_none);
			case .VK_KHR_maintenance4: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case .VK_KHR_shader_subgroup_rotate: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_EXT_depth_clamp_zero_one: return VulkanApi.Extension(.VK_KHR_depth_clamp_zero_one);
			case .VK_QCOM_fragment_density_map_offset: return VulkanApi.Extension(.VK_EXT_fragment_density_map_offset);
			case .VK_EXT_pipeline_protected_access: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_maintenance5: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_vertex_attribute_divisor: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_load_store_op_none: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_shader_float_controls2: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_index_type_uint8: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_line_rasterization: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_shader_expect_assume: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_KHR_maintenance6: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case .VK_EXT_vertex_attribute_robustness: return VulkanApi.Extension(.VK_KHR_maintenance9);
			default: return null;
			}
		}
	}

	public VulkanExtension? DeprecatedBy
	{
		get
		{
			switch (this)
			{
			case .VK_EXT_debug_report: return VK_EXT_debug_utils;
			case .VK_NV_dedicated_allocation: return VK_KHR_dedicated_allocation;
			case .VK_AMD_negative_viewport_height: return VK_KHR_maintenance1;
			case .VK_AMD_gpu_shader_half_float: return VK_KHR_shader_float16_int8;
			case .VK_NV_external_memory_capabilities: return VK_KHR_external_memory_capabilities;
			case .VK_NV_external_memory: return VK_KHR_external_memory;
			case .VK_EXT_validation_flags: return VK_EXT_layer_settings;
			case .VK_AMD_gpu_shader_int16: return VK_KHR_shader_float16_int8;
			case .VK_NV_ray_tracing: return VK_KHR_ray_tracing_pipeline;
			case .VK_EXT_buffer_device_address: return VK_KHR_buffer_device_address;
			case .VK_EXT_validation_features: return VK_EXT_layer_settings;
			default: return null;
			}
		}
	}

	public StringView SpirVExtension
	{
		get
		{
			switch (this)
			{
			case .VK_AMD_shader_trinary_minmax: return "SPV_AMD_shader_trinary_minmax";
			case .VK_AMD_shader_explicit_vertex_parameter: return "SPV_AMD_shader_explicit_vertex_parameter";
			case .VK_AMD_gcn_shader: return "SPV_AMD_gcn_shader";
			case .VK_AMD_gpu_shader_half_float: return "SPV_AMD_gpu_shader_half_float";
			case .VK_AMD_shader_ballot: return "SPV_AMD_shader_ballot";
			case .VK_AMD_texture_gather_bias_lod: return "SPV_AMD_texture_gather_bias_lod";
			case .VK_AMD_shader_image_load_store_lod: return "SPV_AMD_shader_image_load_store_lod";
			case .VK_KHR_multiview: return "SPV_KHR_multiview";
			case .VK_KHR_device_group: return "SPV_KHR_device_group";
			case .VK_KHR_shader_draw_parameters: return "SPV_KHR_shader_draw_parameters";
			case .VK_EXT_shader_subgroup_ballot: return "SPV_KHR_shader_ballot";
			case .VK_EXT_shader_subgroup_vote: return "SPV_KHR_subgroup_vote";
			case .VK_KHR_16bit_storage: return "SPV_KHR_16bit_storage";
			case .VK_NV_sample_mask_override_coverage: return "SPV_NV_sample_mask_override_coverage";
			case .VK_NV_geometry_shader_passthrough: return "SPV_NV_geometry_shader_passthrough";
			case .VK_NV_viewport_array2: return "SPV_NV_viewport_array2";
			case .VK_NVX_multiview_per_view_attributes: return "SPV_NVX_multiview_per_view_attributes";
			case .VK_EXT_conservative_rasterization: return "SPV_EXT_fragment_fully_covered";
			case .VK_KHR_variable_pointers: return "SPV_KHR_variable_pointers";
			case .VK_KHR_storage_buffer_storage_class: return "SPV_KHR_storage_buffer_storage_class";
			case .VK_AMD_gpu_shader_int16: return "SPV_AMD_gpu_shader_int16";
			case .VK_AMD_shader_fragment_mask: return "SPV_AMD_shader_fragment_mask";
			case .VK_EXT_shader_stencil_export: return "SPV_EXT_shader_stencil_export";
			case .VK_KHR_shader_bfloat16: return "SPV_KHR_bfloat16";
			case .VK_KHR_ray_tracing_pipeline: return "SPV_KHR_ray_tracing";
			case .VK_KHR_ray_query: return "SPV_KHR_ray_query";
			case .VK_NV_shader_sm_builtins: return "SPV_NV_shader_sm_builtins";
			case .VK_EXT_post_depth_coverage: return "SPV_KHR_post_depth_coverage";
			case .VK_EXT_descriptor_indexing: return "SPV_EXT_descriptor_indexing";
			case .VK_EXT_shader_viewport_index_layer: return "SPV_EXT_shader_viewport_index_layer";
			case .VK_NV_shading_rate_image: return "SPV_NV_shading_rate";
			case .VK_NV_ray_tracing: return "SPV_NV_ray_tracing";
			case .VK_KHR_8bit_storage: return "SPV_KHR_8bit_storage";
			case .VK_KHR_shader_clock: return "SPV_KHR_shader_clock";
			case .VK_KHR_shader_float_controls: return "SPV_KHR_float_controls";
			case .VK_NV_shader_subgroup_partitioned: return "SPV_NV_shader_subgroup_partitioned";
			case .VK_NV_compute_shader_derivatives: return "SPV_NV_compute_shader_derivatives";
			case .VK_NV_mesh_shader: return "SPV_NV_mesh_shader";
			case .VK_NV_fragment_shader_barycentric: return "SPV_NV_fragment_shader_barycentric";
			case .VK_NV_shader_image_footprint: return "SPV_NV_shader_image_footprint";
			case .VK_INTEL_shader_integer_functions2: return "SPV_INTEL_shader_integer_functions2";
			case .VK_KHR_vulkan_memory_model: return "SPV_KHR_vulkan_memory_model";
			case .VK_KHR_shader_terminate_invocation: return "SPV_KHR_terminate_invocation";
			case .VK_EXT_fragment_density_map: return "SPV_EXT_fragment_invocation_density";
			case .VK_GOOGLE_hlsl_functionality1: return "SPV_GOOGLE_hlsl_functionality1";
			case .VK_GOOGLE_decorate_string: return "SPV_GOOGLE_decorate_string";
			case .VK_KHR_fragment_shading_rate: return "SPV_KHR_fragment_shading_rate";
			case .VK_EXT_shader_image_atomic_int64: return "SPV_EXT_shader_image_int64";
			case .VK_KHR_shader_quad_control: return "SPV_KHR_quad_control";
			case .VK_EXT_buffer_device_address: return "SPV_EXT_physical_storage_buffer";
			case .VK_NV_cooperative_matrix: return "SPV_NV_cooperative_matrix";
			case .VK_EXT_fragment_shader_interlock: return "SPV_EXT_fragment_shader_interlock";
			case .VK_KHR_buffer_device_address: return "SPV_KHR_physical_storage_buffer";
			case .VK_EXT_shader_atomic_float: return "SPV_EXT_shader_atomic_float_add";
			case .VK_EXT_shader_atomic_float2: return "SPV_EXT_shader_atomic_float16_add";
			case .VK_EXT_shader_demote_to_helper_invocation: return "SPV_EXT_demote_to_helper_invocation";
			case .VK_KHR_shader_integer_dot_product: return "SPV_KHR_integer_dot_product";
			case .VK_GOOGLE_user_type: return "SPV_GOOGLE_user_type";
			case .VK_KHR_shader_non_semantic_info: return "SPV_KHR_non_semantic_info";
			case .VK_QCOM_tile_shading: return "SPV_QCOM_tile_shading";
			case .VK_AMD_shader_early_and_late_fragment_tests: return "SPV_AMD_shader_early_and_late_fragment_tests";
			case .VK_KHR_fragment_shader_barycentric: return "SPV_KHR_fragment_shader_barycentric";
			case .VK_KHR_shader_subgroup_uniform_control_flow: return "SPV_KHR_subgroup_uniform_control_flow";
			case .VK_NV_ray_tracing_motion_blur: return "SPV_NV_ray_tracing_motion_blur";
			case .VK_EXT_mesh_shader: return "SPV_EXT_mesh_shader";
			case .VK_KHR_workgroup_memory_explicit_layout: return "SPV_KHR_workgroup_memory_explicit_layout";
			case .VK_HUAWEI_subpass_shading: return "SPV_HUAWEI_subpass_shading";
			case .VK_KHR_ray_tracing_maintenance1: return "SPV_KHR_ray_cull_mask";
			case .VK_EXT_shader_tile_image: return "SPV_EXT_shader_tile_image";
			case .VK_EXT_opacity_micromap: return "SPV_EXT_opacity_micromap";
			case .VK_HUAWEI_cluster_culling_shader: return "SPV_HUAWEI_cluster_culling_shader";
			case .VK_KHR_shader_subgroup_rotate: return "SPV_KHR_subgroup_rotate";
			case .VK_NV_ray_tracing_linear_swept_spheres: return "SPV_NV_linear_swept_spheres";
			case .VK_KHR_shader_maximal_reconvergence: return "SPV_KHR_maximal_reconvergence";
			case .VK_QCOM_image_processing: return "SPV_QCOM_image_processing";
			case .VK_ARM_tensors: return "SPV_ARM_tensors";
			case .VK_KHR_ray_tracing_position_fetch: return "SPV_KHR_ray_tracing_position_fetch";
			case .VK_NV_ray_tracing_invocation_reorder: return "SPV_NV_shader_invocation_reorder";
			case .VK_NV_cooperative_vector: return "SPV_NV_cooperative_vector";
			case .VK_ARM_shader_core_builtins: return "SPV_ARM_core_builtins";
			case .VK_KHR_cooperative_matrix: return "SPV_KHR_cooperative_matrix";
			case .VK_ARM_data_graph: return "SPV_ARM_graph";
			case .VK_KHR_compute_shader_derivatives: return "SPV_KHR_compute_shader_derivatives";
			case .VK_QCOM_image_processing2: return "SPV_QCOM_image_processing2";
			case .VK_KHR_shader_float_controls2: return "SPV_KHR_float_controls2";
			case .VK_KHR_shader_expect_assume: return "SPV_KHR_expect_assume";
			case .VK_NV_raw_access_chains: return "SPV_NV_raw_access_chains";
			case .VK_KHR_shader_relaxed_extended_instruction: return "SPV_KHR_relaxed_extended_instruction";
			case .VK_NV_shader_atomic_float16_vector: return "SPV_NV_shader_atomic_fp16_vector";
			case .VK_EXT_shader_replicated_composites: return "SPV_EXT_replicated_composites";
			case .VK_EXT_shader_float8: return "SPV_EXT_float8";
			case .VK_NV_cluster_acceleration_structure: return "SPV_NV_cluster_acceleration_structure";
			case .VK_NV_cooperative_matrix2: return "SPV_NV_tensor_addressing";
			default: return null;
			}
		}
	}

	public static Self? GetRequiredVulkanExtensionForSpirV(StringView spirvExtension)
	{
		switch (spirvExtension.GetHashCode())
		{
		case 3756332955175665402 when spirvExtension == "SPV_AMD_shader_trinary_minmax": return VK_AMD_shader_trinary_minmax;
		case -4891408983697502087 when spirvExtension == "SPV_AMD_shader_explicit_vertex_parameter": return VK_AMD_shader_explicit_vertex_parameter;
		case 6550886093993416957 when spirvExtension == "SPV_AMD_gcn_shader": return VK_AMD_gcn_shader;
		case -2916850308841686463 when spirvExtension == "SPV_AMD_gpu_shader_half_float": return VK_AMD_gpu_shader_half_float;
		case -8074763835126897641 when spirvExtension == "SPV_AMD_shader_ballot": return VK_AMD_shader_ballot;
		case -7577810065236501415 when spirvExtension == "SPV_AMD_texture_gather_bias_lod": return VK_AMD_texture_gather_bias_lod;
		case -2949652960762591208 when spirvExtension == "SPV_AMD_shader_image_load_store_lod": return VK_AMD_shader_image_load_store_lod;
		case -1141099449012430311 when spirvExtension == "SPV_KHR_multiview": return VK_KHR_multiview;
		case -200167011645988128 when spirvExtension == "SPV_KHR_device_group": return VK_KHR_device_group;
		case 6291206114759454950 when spirvExtension == "SPV_KHR_shader_draw_parameters": return VK_KHR_shader_draw_parameters;
		case -132682144415276009 when spirvExtension == "SPV_KHR_shader_ballot": return VK_EXT_shader_subgroup_ballot;
		case -938160122051146569 when spirvExtension == "SPV_KHR_subgroup_vote": return VK_EXT_shader_subgroup_vote;
		case 2301540414108688213 when spirvExtension == "SPV_KHR_16bit_storage": return VK_KHR_16bit_storage;
		case -5929783114448200405 when spirvExtension == "SPV_NV_sample_mask_override_coverage": return VK_NV_sample_mask_override_coverage;
		case 6813397465387368243 when spirvExtension == "SPV_NV_geometry_shader_passthrough": return VK_NV_geometry_shader_passthrough;
		case -1608739964102583933 when spirvExtension == "SPV_NV_viewport_array2": return VK_NV_viewport_array2;
		case -5032540960600248639 when spirvExtension == "SPV_NVX_multiview_per_view_attributes": return VK_NVX_multiview_per_view_attributes;
		case -7535895524081372325 when spirvExtension == "SPV_EXT_fragment_fully_covered": return VK_EXT_conservative_rasterization;
		case -7737067537225194459 when spirvExtension == "SPV_KHR_variable_pointers": return VK_KHR_variable_pointers;
		case 7425979768969522084 when spirvExtension == "SPV_KHR_storage_buffer_storage_class": return VK_KHR_storage_buffer_storage_class;
		case -1330403930211020129 when spirvExtension == "SPV_AMD_gpu_shader_int16": return VK_AMD_gpu_shader_int16;
		case 1800713547621171110 when spirvExtension == "SPV_AMD_shader_fragment_mask": return VK_AMD_shader_fragment_mask;
		case 8142135915646196216 when spirvExtension == "SPV_EXT_shader_stencil_export": return VK_EXT_shader_stencil_export;
		case -4374577291123316518 when spirvExtension == "SPV_KHR_bfloat16": return VK_KHR_shader_bfloat16;
		case -6418196440321592522 when spirvExtension == "SPV_KHR_ray_tracing": return VK_KHR_ray_tracing_pipeline;
		case 6678244492218520214 when spirvExtension == "SPV_KHR_ray_query": return VK_KHR_ray_query;
		case 6178148494314338521 when spirvExtension == "SPV_NV_shader_sm_builtins": return VK_NV_shader_sm_builtins;
		case 5561097125826012292 when spirvExtension == "SPV_KHR_post_depth_coverage": return VK_EXT_post_depth_coverage;
		case -5627259374114843983 when spirvExtension == "SPV_EXT_descriptor_indexing": return VK_EXT_descriptor_indexing;
		case -3136246235098502995 when spirvExtension == "SPV_EXT_shader_viewport_index_layer": return VK_EXT_shader_viewport_index_layer;
		case 4242374404006328284 when spirvExtension == "SPV_NV_shading_rate": return VK_NV_shading_rate_image;
		case -3800648774650332805 when spirvExtension == "SPV_NV_ray_tracing": return VK_NV_ray_tracing;
		case 360424069223792820 when spirvExtension == "SPV_KHR_8bit_storage": return VK_KHR_8bit_storage;
		case -5134315876976594071 when spirvExtension == "SPV_KHR_shader_clock": return VK_KHR_shader_clock;
		case -2819723172347585634 when spirvExtension == "SPV_KHR_float_controls": return VK_KHR_shader_float_controls;
		case 558440027508714089 when spirvExtension == "SPV_NV_shader_subgroup_partitioned": return VK_NV_shader_subgroup_partitioned;
		case 1751895923090470334 when spirvExtension == "SPV_NV_compute_shader_derivatives": return VK_NV_compute_shader_derivatives;
		case 2440295911819051263 when spirvExtension == "SPV_NV_mesh_shader": return VK_NV_mesh_shader;
		case -8490892579253498517 when spirvExtension == "SPV_NV_fragment_shader_barycentric": return VK_NV_fragment_shader_barycentric;
		case -7529378136800496753 when spirvExtension == "SPV_NV_shader_image_footprint": return VK_NV_shader_image_footprint;
		case -6734259107514333357 when spirvExtension == "SPV_INTEL_shader_integer_functions2": return VK_INTEL_shader_integer_functions2;
		case -867250645577157749 when spirvExtension == "SPV_KHR_vulkan_memory_model": return VK_KHR_vulkan_memory_model;
		case -2483500102639986011 when spirvExtension == "SPV_KHR_terminate_invocation": return VK_KHR_shader_terminate_invocation;
		case -8320847131486162259 when spirvExtension == "SPV_EXT_fragment_invocation_density": return VK_EXT_fragment_density_map;
		case -3381503166883124794 when spirvExtension == "SPV_GOOGLE_hlsl_functionality1": return VK_GOOGLE_hlsl_functionality1;
		case 922463163697364129 when spirvExtension == "SPV_GOOGLE_decorate_string": return VK_GOOGLE_decorate_string;
		case 4666144235410625925 when spirvExtension == "SPV_KHR_fragment_shading_rate": return VK_KHR_fragment_shading_rate;
		case 7342525768265761679 when spirvExtension == "SPV_EXT_shader_image_int64": return VK_EXT_shader_image_atomic_int64;
		case -4530536774902475925 when spirvExtension == "SPV_KHR_quad_control": return VK_KHR_shader_quad_control;
		case 1618754195958064777 when spirvExtension == "SPV_EXT_physical_storage_buffer": return VK_EXT_buffer_device_address;
		case -7707206431235625682 when spirvExtension == "SPV_NV_cooperative_matrix": return VK_NV_cooperative_matrix;
		case -1667719782684638899 when spirvExtension == "SPV_EXT_fragment_shader_interlock": return VK_EXT_fragment_shader_interlock;
		case -2964085447719852407 when spirvExtension == "SPV_KHR_physical_storage_buffer": return VK_KHR_buffer_device_address;
		case 6902025909341978456 when spirvExtension == "SPV_EXT_shader_atomic_float_add": return VK_EXT_shader_atomic_float;
		case 3529049812729277217 when spirvExtension == "SPV_EXT_shader_atomic_float16_add": return VK_EXT_shader_atomic_float2;
		case -8245522993970170381 when spirvExtension == "SPV_EXT_demote_to_helper_invocation": return VK_EXT_shader_demote_to_helper_invocation;
		case -5919115207591959584 when spirvExtension == "SPV_KHR_integer_dot_product": return VK_KHR_shader_integer_dot_product;
		case 4599950423718421768 when spirvExtension == "SPV_GOOGLE_user_type": return VK_GOOGLE_user_type;
		case -8182227334327661562 when spirvExtension == "SPV_KHR_non_semantic_info": return VK_KHR_shader_non_semantic_info;
		case -6459846786130516213 when spirvExtension == "SPV_QCOM_tile_shading": return VK_QCOM_tile_shading;
		case -2687254198240773469 when spirvExtension == "SPV_AMD_shader_early_and_late_fragment_tests": return VK_AMD_shader_early_and_late_fragment_tests;
		case -6804737987158284922 when spirvExtension == "SPV_KHR_fragment_shader_barycentric": return VK_KHR_fragment_shader_barycentric;
		case 6376106423490267151 when spirvExtension == "SPV_KHR_subgroup_uniform_control_flow": return VK_KHR_shader_subgroup_uniform_control_flow;
		case 5886335017475435254 when spirvExtension == "SPV_NV_ray_tracing_motion_blur": return VK_NV_ray_tracing_motion_blur;
		case 957676047598203801 when spirvExtension == "SPV_EXT_mesh_shader": return VK_EXT_mesh_shader;
		case -2533320792726253832 when spirvExtension == "SPV_KHR_workgroup_memory_explicit_layout": return VK_KHR_workgroup_memory_explicit_layout;
		case -189994866909334631 when spirvExtension == "SPV_HUAWEI_subpass_shading": return VK_HUAWEI_subpass_shading;
		case 5944659086493185110 when spirvExtension == "SPV_KHR_ray_cull_mask": return VK_KHR_ray_tracing_maintenance1;
		case 6565442009520114869 when spirvExtension == "SPV_EXT_shader_tile_image": return VK_EXT_shader_tile_image;
		case 5853447062041999879 when spirvExtension == "SPV_EXT_opacity_micromap": return VK_EXT_opacity_micromap;
		case -1371409709764441838 when spirvExtension == "SPV_HUAWEI_cluster_culling_shader": return VK_HUAWEI_cluster_culling_shader;
		case 2318582324280597719 when spirvExtension == "SPV_KHR_subgroup_rotate": return VK_KHR_shader_subgroup_rotate;
		case 3580348601921840321 when spirvExtension == "SPV_NV_linear_swept_spheres": return VK_NV_ray_tracing_linear_swept_spheres;
		case -1504433725478369850 when spirvExtension == "SPV_KHR_maximal_reconvergence": return VK_KHR_shader_maximal_reconvergence;
		case -1132285373050108054 when spirvExtension == "SPV_QCOM_image_processing": return VK_QCOM_image_processing;
		case 2545740386476198669 when spirvExtension == "SPV_ARM_tensors": return VK_ARM_tensors;
		case -4977056365570695192 when spirvExtension == "SPV_KHR_ray_tracing_position_fetch": return VK_KHR_ray_tracing_position_fetch;
		case 5280783401519523963 when spirvExtension == "SPV_NV_shader_invocation_reorder": return VK_NV_ray_tracing_invocation_reorder;
		case -2681342609181889554 when spirvExtension == "SPV_NV_cooperative_vector": return VK_NV_cooperative_vector;
		case -6357969829631605625 when spirvExtension == "SPV_ARM_core_builtins": return VK_ARM_shader_core_builtins;
		case 7476455058448592299 when spirvExtension == "SPV_KHR_cooperative_matrix": return VK_KHR_cooperative_matrix;
		case -8808022673372580787 when spirvExtension == "SPV_ARM_graph": return VK_ARM_data_graph;
		case -993891013320677953 when spirvExtension == "SPV_KHR_compute_shader_derivatives": return VK_KHR_compute_shader_derivatives;
		case 1792641582865752982 when spirvExtension == "SPV_QCOM_image_processing2": return VK_QCOM_image_processing2;
		case 4822302025772603874 when spirvExtension == "SPV_KHR_float_controls2": return VK_KHR_shader_float_controls2;
		case -244612085740659871 when spirvExtension == "SPV_KHR_expect_assume": return VK_KHR_shader_expect_assume;
		case 6482087525749357161 when spirvExtension == "SPV_NV_raw_access_chains": return VK_NV_raw_access_chains;
		case -1224030135683479351 when spirvExtension == "SPV_KHR_relaxed_extended_instruction": return VK_KHR_shader_relaxed_extended_instruction;
		case 825034983689393814 when spirvExtension == "SPV_NV_shader_atomic_fp16_vector": return VK_NV_shader_atomic_float16_vector;
		case 3755238009648166387 when spirvExtension == "SPV_EXT_replicated_composites": return VK_EXT_shader_replicated_composites;
		case 753110955097932179 when spirvExtension == "SPV_EXT_float8": return VK_EXT_shader_float8;
		case -7671461325270328867 when spirvExtension == "SPV_NV_cluster_acceleration_structure": return VK_NV_cluster_acceleration_structure;
		case -5977891045829627448 when spirvExtension == "SPV_NV_tensor_addressing": return VK_NV_cooperative_matrix2;
		default: return null;
		}
	}

	public int DependencyCount
	{
		get
		{
			switch (this)
			{
			case .VK_KHR_swapchain: return 1;
			case .VK_KHR_display: return 1;
			case .VK_KHR_display_swapchain: return 2;
			case .VK_EXT_debug_marker: return 1;
			case .VK_KHR_video_queue: return 2;
			case .VK_KHR_video_decode_queue: return 2;
			case .VK_EXT_transform_feedback: return 1;
			case .VK_KHR_video_encode_h264: return 1;
			case .VK_KHR_video_encode_h265: return 1;
			case .VK_KHR_video_decode_h264: return 1;
			case .VK_AMD_texture_gather_bias_lod: return 1;
			case .VK_KHR_dynamic_rendering: return 2;
			case .VK_NV_corner_sampled_image: return 1;
			case .VK_KHR_multiview: return 1;
			case .VK_NV_external_memory: return 1;
			case .VK_KHR_device_group: return 1;
			case .VK_EXT_texture_compression_astc_hdr: return 1;
			case .VK_EXT_astc_decode_mode: return 1;
			case .VK_EXT_pipeline_robustness: return 1;
			case .VK_KHR_external_memory_capabilities: return 1;
			case .VK_KHR_external_memory: return 1;
			case .VK_KHR_external_memory_fd: return 1;
			case .VK_KHR_external_semaphore_capabilities: return 1;
			case .VK_KHR_external_semaphore: return 1;
			case .VK_KHR_external_semaphore_fd: return 1;
			case .VK_KHR_push_descriptor: return 1;
			case .VK_EXT_conditional_rendering: return 1;
			case .VK_KHR_shader_float16_int8: return 1;
			case .VK_KHR_16bit_storage: return 2;
			case .VK_KHR_incremental_present: return 1;
			case .VK_EXT_direct_mode_display: return 1;
			case .VK_EXT_display_surface_counter: return 1;
			case .VK_EXT_display_control: return 2;
			case .VK_GOOGLE_display_timing: return 1;
			case .VK_NVX_multiview_per_view_attributes: return 1;
			case .VK_EXT_discard_rectangles: return 1;
			case .VK_EXT_conservative_rasterization: return 1;
			case .VK_EXT_depth_clip_enable: return 1;
			case .VK_EXT_swapchain_colorspace: return 1;
			case .VK_EXT_hdr_metadata: return 1;
			case .VK_KHR_imageless_framebuffer: return 3;
			case .VK_KHR_create_renderpass2: return 2;
			case .VK_IMG_relaxed_line_rasterization: return 1;
			case .VK_KHR_shared_presentable_image: return 3;
			case .VK_KHR_external_fence_capabilities: return 1;
			case .VK_KHR_external_fence: return 1;
			case .VK_KHR_external_fence_fd: return 1;
			case .VK_KHR_performance_query: return 1;
			case .VK_KHR_get_surface_capabilities2: return 1;
			case .VK_KHR_variable_pointers: return 2;
			case .VK_KHR_get_display_properties2: return 1;
			case .VK_EXT_external_memory_dma_buf: return 1;
			case .VK_EXT_queue_family_foreign: return 1;
			case .VK_KHR_dedicated_allocation: return 1;
			case .VK_EXT_sampler_filter_minmax: return 1;
			case .VK_EXT_inline_uniform_block: return 2;
			case .VK_KHR_shader_bfloat16: return 1;
			case .VK_EXT_sample_locations: return 1;
			case .VK_EXT_blend_operation_advanced: return 1;
			case .VK_KHR_acceleration_structure: return 4;
			case .VK_KHR_ray_tracing_pipeline: return 2;
			case .VK_KHR_ray_query: return 2;
			case .VK_NV_shader_sm_builtins: return 1;
			case .VK_KHR_sampler_ycbcr_conversion: return 4;
			case .VK_EXT_image_drm_format_modifier: return 4;
			case .VK_EXT_descriptor_indexing: return 2;
			case .VK_NV_shading_rate_image: return 1;
			case .VK_NV_ray_tracing: return 2;
			case .VK_NV_representative_fragment_test: return 1;
			case .VK_KHR_maintenance3: return 1;
			case .VK_KHR_shader_subgroup_extended_types: return 1;
			case .VK_KHR_8bit_storage: return 2;
			case .VK_EXT_external_memory_host: return 1;
			case .VK_KHR_shader_atomic_int64: return 1;
			case .VK_KHR_shader_clock: return 1;
			case .VK_EXT_calibrated_timestamps: return 1;
			case .VK_AMD_shader_core_properties: return 1;
			case .VK_KHR_video_decode_h265: return 1;
			case .VK_KHR_global_priority: return 1;
			case .VK_EXT_vertex_attribute_divisor: return 1;
			case .VK_KHR_driver_properties: return 1;
			case .VK_KHR_shader_float_controls: return 1;
			case .VK_NV_shader_subgroup_partitioned: return 1;
			case .VK_KHR_depth_stencil_resolve: return 1;
			case .VK_KHR_swapchain_mutable_format: return 3;
			case .VK_NV_compute_shader_derivatives: return 1;
			case .VK_NV_mesh_shader: return 1;
			case .VK_NV_fragment_shader_barycentric: return 1;
			case .VK_NV_shader_image_footprint: return 1;
			case .VK_NV_scissor_exclusive: return 1;
			case .VK_NV_device_diagnostic_checkpoints: return 1;
			case .VK_KHR_timeline_semaphore: return 1;
			case .VK_INTEL_shader_integer_functions2: return 1;
			case .VK_KHR_vulkan_memory_model: return 1;
			case .VK_EXT_pci_bus_info: return 1;
			case .VK_AMD_display_native_hdr: return 3;
			case .VK_KHR_shader_terminate_invocation: return 1;
			case .VK_EXT_fragment_density_map: return 1;
			case .VK_EXT_scalar_block_layout: return 1;
			case .VK_EXT_subgroup_size_control: return 1;
			case .VK_KHR_fragment_shading_rate: return 2;
			case .VK_AMD_shader_core_properties2: return 1;
			case .VK_AMD_device_coherent_memory: return 1;
			case .VK_KHR_dynamic_rendering_local_read: return 1;
			case .VK_EXT_shader_image_atomic_int64: return 1;
			case .VK_KHR_shader_quad_control: return 3;
			case .VK_KHR_spirv_1_4: return 2;
			case .VK_EXT_memory_budget: return 1;
			case .VK_EXT_memory_priority: return 1;
			case .VK_KHR_surface_protected_capabilities: return 2;
			case .VK_NV_dedicated_allocation_image_aliasing: return 2;
			case .VK_KHR_separate_depth_stencil_layouts: return 2;
			case .VK_EXT_buffer_device_address: return 1;
			case .VK_KHR_present_wait: return 2;
			case .VK_NV_cooperative_matrix: return 1;
			case .VK_NV_coverage_reduction_mode: return 2;
			case .VK_EXT_fragment_shader_interlock: return 1;
			case .VK_EXT_ycbcr_image_arrays: return 1;
			case .VK_KHR_uniform_buffer_standard_layout: return 1;
			case .VK_EXT_provoking_vertex: return 1;
			case .VK_EXT_headless_surface: return 1;
			case .VK_KHR_buffer_device_address: return 2;
			case .VK_EXT_line_rasterization: return 1;
			case .VK_EXT_shader_atomic_float: return 1;
			case .VK_EXT_host_query_reset: return 1;
			case .VK_EXT_index_type_uint8: return 1;
			case .VK_EXT_extended_dynamic_state: return 1;
			case .VK_KHR_pipeline_executable_properties: return 1;
			case .VK_EXT_host_image_copy: return 3;
			case .VK_EXT_map_memory_placed: return 1;
			case .VK_EXT_shader_atomic_float2: return 1;
			case .VK_EXT_surface_maintenance1: return 2;
			case .VK_EXT_swapchain_maintenance1: return 3;
			case .VK_EXT_shader_demote_to_helper_invocation: return 1;
			case .VK_NV_device_generated_commands: return 2;
			case .VK_NV_inherited_viewport_scissor: return 1;
			case .VK_KHR_shader_integer_dot_product: return 1;
			case .VK_EXT_texel_buffer_alignment: return 1;
			case .VK_EXT_depth_bias_control: return 1;
			case .VK_EXT_device_memory_report: return 1;
			case .VK_EXT_acquire_drm_display: return 1;
			case .VK_EXT_robustness2: return 1;
			case .VK_EXT_custom_border_color: return 1;
			case .VK_NV_present_barrier: return 4;
			case .VK_KHR_present_id: return 2;
			case .VK_EXT_private_data: return 1;
			case .VK_EXT_pipeline_creation_cache_control: return 1;
			case .VK_KHR_video_encode_queue: return 2;
			case .VK_NV_device_diagnostics_config: return 1;
			case .VK_QCOM_tile_shading: return 1;
			case .VK_KHR_synchronization2: return 1;
			case .VK_EXT_descriptor_buffer: return 4;
			case .VK_EXT_graphics_pipeline_library: return 2;
			case .VK_AMD_shader_early_and_late_fragment_tests: return 1;
			case .VK_KHR_fragment_shader_barycentric: return 1;
			case .VK_KHR_shader_subgroup_uniform_control_flow: return 1;
			case .VK_KHR_zero_initialize_workgroup_memory: return 1;
			case .VK_NV_fragment_shading_rate_enums: return 1;
			case .VK_NV_ray_tracing_motion_blur: return 1;
			case .VK_EXT_mesh_shader: return 1;
			case .VK_EXT_ycbcr_2plane_444_formats: return 1;
			case .VK_EXT_fragment_density_map2: return 1;
			case .VK_QCOM_rotated_copy_commands: return 1;
			case .VK_EXT_image_robustness: return 1;
			case .VK_KHR_workgroup_memory_explicit_layout: return 1;
			case .VK_KHR_copy_commands2: return 1;
			case .VK_EXT_image_compression_control: return 1;
			case .VK_EXT_attachment_feedback_loop_layout: return 1;
			case .VK_EXT_4444_formats: return 1;
			case .VK_EXT_device_fault: return 1;
			case .VK_ARM_rasterization_order_attachment_access: return 1;
			case .VK_EXT_rgba10x6_formats: return 1;
			case .VK_VALVE_mutable_descriptor_type: return 1;
			case .VK_EXT_vertex_input_dynamic_state: return 1;
			case .VK_EXT_physical_device_drm: return 1;
			case .VK_EXT_device_address_binding_report: return 2;
			case .VK_EXT_depth_clip_control: return 1;
			case .VK_EXT_primitive_topology_list_restart: return 1;
			case .VK_KHR_format_feature_flags2: return 1;
			case .VK_EXT_present_mode_fifo_latest_ready: return 1;
			case .VK_HUAWEI_subpass_shading: return 2;
			case .VK_HUAWEI_invocation_mask: return 2;
			case .VK_NV_external_memory_rdma: return 1;
			case .VK_EXT_pipeline_properties: return 1;
			case .VK_EXT_multisampled_render_to_single_sampled: return 2;
			case .VK_EXT_extended_dynamic_state2: return 1;
			case .VK_EXT_color_write_enable: return 1;
			case .VK_EXT_primitives_generated_query: return 1;
			case .VK_KHR_ray_tracing_maintenance1: return 1;
			case .VK_EXT_global_priority_query: return 2;
			case .VK_EXT_image_view_min_lod: return 1;
			case .VK_EXT_multi_draw: return 1;
			case .VK_EXT_image_2d_view_of_3d: return 2;
			case .VK_EXT_shader_tile_image: return 1;
			case .VK_EXT_opacity_micromap: return 2;
			case .VK_HUAWEI_cluster_culling_shader: return 1;
			case .VK_EXT_border_color_swizzle: return 1;
			case .VK_EXT_pageable_device_local_memory: return 1;
			case .VK_KHR_maintenance4: return 1;
			case .VK_ARM_shader_core_properties: return 1;
			case .VK_ARM_scheduling_controls: return 1;
			case .VK_EXT_image_sliced_view_of_3d: return 2;
			case .VK_VALVE_descriptor_set_host_mapping: return 1;
			case .VK_EXT_depth_clamp_zero_one: return 1;
			case .VK_EXT_non_seamless_cube_map: return 1;
			case .VK_ARM_render_pass_striped: return 2;
			case .VK_QCOM_fragment_density_map_offset: return 2;
			case .VK_NV_copy_memory_indirect: return 2;
			case .VK_NV_memory_decompression: return 2;
			case .VK_NV_device_generated_commands_compute: return 1;
			case .VK_NV_ray_tracing_linear_swept_spheres: return 1;
			case .VK_NV_linear_color_attachment: return 1;
			case .VK_GOOGLE_surfaceless_query: return 1;
			case .VK_KHR_shader_maximal_reconvergence: return 1;
			case .VK_EXT_image_compression_control_swapchain: return 1;
			case .VK_QCOM_image_processing: return 1;
			case .VK_EXT_nested_command_buffer: return 1;
			case .VK_EXT_external_memory_acquire_unmodified: return 1;
			case .VK_EXT_extended_dynamic_state3: return 1;
			case .VK_EXT_subpass_merge_feedback: return 1;
			case .VK_ARM_tensors: return 1;
			case .VK_EXT_shader_module_identifier: return 2;
			case .VK_EXT_rasterization_order_attachment_access: return 1;
			case .VK_NV_optical_flow: return 3;
			case .VK_EXT_legacy_dithering: return 1;
			case .VK_EXT_pipeline_protected_access: return 1;
			case .VK_KHR_maintenance5: return 2;
			case .VK_KHR_present_id2: return 3;
			case .VK_KHR_present_wait2: return 4;
			case .VK_KHR_ray_tracing_position_fetch: return 1;
			case .VK_EXT_shader_object: return 2;
			case .VK_KHR_pipeline_binary: return 1;
			case .VK_QCOM_tile_properties: return 1;
			case .VK_SEC_amigo_profiling: return 1;
			case .VK_KHR_surface_maintenance1: return 1;
			case .VK_KHR_swapchain_maintenance1: return 1;
			case .VK_QCOM_multiview_per_view_viewports: return 1;
			case .VK_NV_ray_tracing_invocation_reorder: return 1;
			case .VK_EXT_mutable_descriptor_type: return 1;
			case .VK_EXT_legacy_vertex_attributes: return 1;
			case .VK_ARM_shader_core_builtins: return 1;
			case .VK_EXT_pipeline_library_group_handles: return 2;
			case .VK_EXT_dynamic_rendering_unused_attachments: return 2;
			case .VK_NV_low_latency2: return 2;
			case .VK_KHR_cooperative_matrix: return 1;
			case .VK_ARM_data_graph: return 3;
			case .VK_KHR_compute_shader_derivatives: return 1;
			case .VK_KHR_video_decode_av1: return 1;
			case .VK_KHR_video_encode_av1: return 1;
			case .VK_KHR_video_decode_vp9: return 1;
			case .VK_KHR_video_maintenance1: return 1;
			case .VK_NV_per_stage_descriptor_set: return 1;
			case .VK_QCOM_image_processing2: return 1;
			case .VK_QCOM_filter_cubic_weights: return 1;
			case .VK_QCOM_filter_cubic_clamp: return 2;
			case .VK_EXT_attachment_feedback_loop_dynamic_state: return 2;
			case .VK_KHR_vertex_attribute_divisor: return 1;
			case .VK_KHR_shader_float_controls2: return 2;
			case .VK_MSFT_layered_driver: return 1;
			case .VK_KHR_index_type_uint8: return 1;
			case .VK_KHR_line_rasterization: return 1;
			case .VK_KHR_calibrated_timestamps: return 1;
			case .VK_KHR_shader_expect_assume: return 1;
			case .VK_KHR_maintenance6: return 1;
			case .VK_NV_descriptor_pool_overallocation: return 1;
			case .VK_QCOM_tile_memory_heap: return 2;
			case .VK_NV_display_stereo: return 2;
			case .VK_KHR_video_encode_intra_refresh: return 1;
			case .VK_KHR_video_encode_quantization_map: return 2;
			case .VK_KHR_maintenance7: return 1;
			case .VK_NV_cluster_acceleration_structure: return 1;
			case .VK_NV_partitioned_acceleration_structure: return 1;
			case .VK_EXT_device_generated_commands: return 2;
			case .VK_KHR_maintenance8: return 1;
			case .VK_MESA_image_alignment_control: return 1;
			case .VK_EXT_depth_clamp_control: return 1;
			case .VK_KHR_maintenance9: return 1;
			case .VK_KHR_video_maintenance2: return 1;
			case .VK_HUAWEI_hdr_vivid: return 3;
			case .VK_NV_cooperative_matrix2: return 1;
			case .VK_ARM_pipeline_opacity_micromap: return 1;
			case .VK_KHR_depth_clamp_zero_one: return 1;
			case .VK_EXT_vertex_attribute_robustness: return 1;
			case .VK_VALVE_fragment_density_map_layered: return 2;
			case .VK_KHR_robustness2: return 1;
			case .VK_EXT_fragment_density_map_offset: return 4;
			case .VK_EXT_zero_initialize_device_memory: return 1;
			case .VK_KHR_present_mode_fifo_latest_ready: return 1;
			default: return 0;
			}
		}
	}

	public VulkanApi GetDependency(int idx)
	{
		switch (this)
		{
		case .VK_KHR_swapchain:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_display:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_display_swapchain:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_KHR_display);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_debug_marker:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_debug_report);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_queue:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_decode_queue:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_queue);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_transform_feedback:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_h264:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_encode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_h265:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_encode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_decode_h264:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_decode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_texture_gather_bias_lod:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_dynamic_rendering:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_depth_stencil_resolve);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_corner_sampled_image:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_multiview:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_external_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_NV_external_memory_capabilities);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_device_group:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_device_group_creation);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_texture_compression_astc_hdr:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_astc_decode_mode:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pipeline_robustness:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_memory_capabilities:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory_capabilities);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_memory_fd:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_semaphore_capabilities:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_semaphore:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_semaphore_capabilities);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_semaphore_fd:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_semaphore);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_push_descriptor:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_conditional_rendering:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_float16_int8:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_16bit_storage:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_storage_buffer_storage_class);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_incremental_present:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_direct_mode_display:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_display);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_display_surface_counter:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_display);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_display_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_display_surface_counter);
			case 1: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_GOOGLE_display_timing:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NVX_multiview_per_view_attributes:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_multiview);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_discard_rectangles:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_conservative_rasterization:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_depth_clip_enable:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_swapchain_colorspace:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_hdr_metadata:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_imageless_framebuffer:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance2);
			case 2: return VulkanApi.Extension(.VK_KHR_image_format_list);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_create_renderpass2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_multiview);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_IMG_relaxed_line_rasterization:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shared_presentable_image:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			case 2: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_fence_capabilities:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_fence:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_fence_capabilities);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_external_fence_fd:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_fence);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_performance_query:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_get_surface_capabilities2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_variable_pointers:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_storage_buffer_storage_class);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_get_display_properties2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_display);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_external_memory_dma_buf:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory_fd);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_queue_family_foreign:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_dedicated_allocation:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_memory_requirements2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_sampler_filter_minmax:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_inline_uniform_block:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_bfloat16:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_sample_locations:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_blend_operation_advanced:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_acceleration_structure:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_EXT_descriptor_indexing);
			case 2: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			case 3: return VulkanApi.Extension(.VK_KHR_deferred_host_operations);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_ray_tracing_pipeline:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_spirv_1_4);
			case 1: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_ray_query:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_spirv_1_4);
			case 1: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_shader_sm_builtins:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_sampler_ycbcr_conversion:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance1);
			case 1: return VulkanApi.Extension(.VK_KHR_bind_memory2);
			case 2: return VulkanApi.Extension(.VK_KHR_get_memory_requirements2);
			case 3: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_drm_format_modifier:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_bind_memory2);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 2: return VulkanApi.Extension(.VK_KHR_sampler_ycbcr_conversion);
			case 3: return VulkanApi.Extension(.VK_KHR_image_format_list);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_descriptor_indexing:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance3);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_shading_rate_image:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_ray_tracing:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_get_memory_requirements2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_representative_fragment_test:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance3:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_subgroup_extended_types:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_8bit_storage:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_storage_buffer_storage_class);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_external_memory_host:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_atomic_int64:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_clock:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_calibrated_timestamps:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_shader_core_properties:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_decode_h265:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_decode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_global_priority:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_vertex_attribute_divisor:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_driver_properties:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_float_controls:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_shader_subgroup_partitioned:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_depth_stencil_resolve:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_swapchain_mutable_format:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance2);
			case 2: return VulkanApi.Extension(.VK_KHR_image_format_list);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_compute_shader_derivatives:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_mesh_shader:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_fragment_shader_barycentric:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_shader_image_footprint:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_scissor_exclusive:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_device_diagnostic_checkpoints:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_timeline_semaphore:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_INTEL_shader_integer_functions2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_vulkan_memory_model:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pci_bus_info:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_display_native_hdr:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			case 2: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_terminate_invocation:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_fragment_density_map:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_scalar_block_layout:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_subgroup_size_control:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_fragment_shading_rate:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_shader_core_properties2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_AMD_shader_core_properties);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_device_coherent_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_dynamic_rendering_local_read:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_dynamic_rendering);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_image_atomic_int64:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_quad_control:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_vulkan_memory_model);
			case 2: return VulkanApi.Extension(.VK_KHR_shader_maximal_reconvergence);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_spirv_1_4:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_shader_float_controls);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_memory_budget:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_memory_priority:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_surface_protected_capabilities:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_dedicated_allocation_image_aliasing:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_dedicated_allocation);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_separate_depth_stencil_layouts:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_buffer_device_address:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_present_wait:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_KHR_present_id);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_cooperative_matrix:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_coverage_reduction_mode:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_NV_framebuffer_mixed_samples);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_fragment_shader_interlock:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_ycbcr_image_arrays:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_sampler_ycbcr_conversion);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_uniform_buffer_standard_layout:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_provoking_vertex:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_headless_surface:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_buffer_device_address:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_device_group);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_line_rasterization:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_atomic_float:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_host_query_reset:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_index_type_uint8:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_extended_dynamic_state:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_pipeline_executable_properties:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_host_image_copy:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_copy_commands2);
			case 2: return VulkanApi.Extension(.VK_KHR_format_feature_flags2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_map_memory_placed:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_map_memory2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_atomic_float2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_surface_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			case 1: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_swapchain_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_EXT_surface_maintenance1);
			case 2: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_demote_to_helper_invocation:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_device_generated_commands:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_inherited_viewport_scissor:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_integer_dot_product:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_texel_buffer_alignment:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_depth_bias_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_device_memory_report:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_acquire_drm_display:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_direct_mode_display);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_robustness2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_custom_border_color:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_present_barrier:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_surface);
			case 2: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			case 3: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_present_id:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_private_data:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pipeline_creation_cache_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_queue:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_queue);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_device_diagnostics_config:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_tile_shading:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_QCOM_tile_properties);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_synchronization2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_descriptor_buffer:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			case 2: return VulkanApi.Extension(.VK_EXT_descriptor_indexing);
			case 3: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_graphics_pipeline_library:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_pipeline_library);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_AMD_shader_early_and_late_fragment_tests:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_fragment_shader_barycentric:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_subgroup_uniform_control_flow:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_zero_initialize_workgroup_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_fragment_shading_rate_enums:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_fragment_shading_rate);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_ray_tracing_motion_blur:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_mesh_shader:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_spirv_1_4);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_ycbcr_2plane_444_formats:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_sampler_ycbcr_conversion);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_fragment_density_map2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_fragment_density_map);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_rotated_copy_commands:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_copy_commands2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_robustness:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_workgroup_memory_explicit_layout:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_copy_commands2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_compression_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_attachment_feedback_loop_layout:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_4444_formats:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_device_fault:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_rasterization_order_attachment_access:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_rgba10x6_formats:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_sampler_ycbcr_conversion);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_VALVE_mutable_descriptor_type:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance3);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_vertex_input_dynamic_state:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_physical_device_drm:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_device_address_binding_report:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_EXT_debug_utils);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_depth_clip_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_primitive_topology_list_restart:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_format_feature_flags2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_present_mode_fifo_latest_ready:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_HUAWEI_subpass_shading:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_HUAWEI_invocation_mask:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_external_memory_rdma:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pipeline_properties:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_multisampled_render_to_single_sampled:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			case 1: return VulkanApi.Extension(.VK_KHR_depth_stencil_resolve);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_extended_dynamic_state2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_color_write_enable:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_primitives_generated_query:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_transform_feedback);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_ray_tracing_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_global_priority_query:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_global_priority);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_view_min_lod:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_multi_draw:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_2d_view_of_3d:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance1);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_tile_image:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_opacity_micromap:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_HUAWEI_cluster_culling_shader:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_border_color_swizzle:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_custom_border_color);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pageable_device_local_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_memory_priority);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance4:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_shader_core_properties:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_scheduling_controls:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_ARM_shader_core_builtins);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_sliced_view_of_3d:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance1);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_VALVE_descriptor_set_host_mapping:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_depth_clamp_zero_one:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_non_seamless_cube_map:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_render_pass_striped:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_fragment_density_map_offset:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_EXT_fragment_density_map);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_copy_memory_indirect:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_memory_decompression:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_device_generated_commands_compute:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_NV_device_generated_commands);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_ray_tracing_linear_swept_spheres:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_linear_color_attachment:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_GOOGLE_surfaceless_query:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_maximal_reconvergence:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_image_compression_control_swapchain:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_image_compression_control);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_image_processing:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_format_feature_flags2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_nested_command_buffer:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_external_memory_acquire_unmodified:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_external_memory);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_extended_dynamic_state3:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_subpass_merge_feedback:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_tensors:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_module_identifier:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_EXT_pipeline_creation_cache_control);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_rasterization_order_attachment_access:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_optical_flow:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_format_feature_flags2);
			case 2: return VulkanApi.Extension(.VK_KHR_synchronization2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_legacy_dithering:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pipeline_protected_access:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance5:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_dynamic_rendering);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_present_id2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			case 1: return VulkanApi.Extension(.VK_KHR_surface);
			case 2: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_present_wait2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_surface_capabilities2);
			case 1: return VulkanApi.Extension(.VK_KHR_surface);
			case 2: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 3: return VulkanApi.Extension(.VK_KHR_present_id2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_ray_tracing_position_fetch:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_shader_object:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_dynamic_rendering);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_pipeline_binary:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance5);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_tile_properties:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_SEC_amigo_profiling:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_surface_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_surface);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_swapchain_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_multiview_per_view_viewports:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_ray_tracing_invocation_reorder:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_mutable_descriptor_type:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance3);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_legacy_vertex_attributes:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_vertex_input_dynamic_state);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_shader_core_builtins:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_pipeline_library_group_handles:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			case 1: return VulkanApi.Extension(.VK_KHR_pipeline_library);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_dynamic_rendering_unused_attachments:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_dynamic_rendering);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_low_latency2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_timeline_semaphore);
			case 1: return VulkanApi.Extension(.VK_KHR_present_id);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_cooperative_matrix:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_data_graph:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance5);
			case 2: return VulkanApi.Extension(.VK_KHR_deferred_host_operations);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_compute_shader_derivatives:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_decode_av1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_decode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_av1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_encode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_decode_vp9:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_decode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_maintenance1:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_per_stage_descriptor_set:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance6);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_image_processing2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_QCOM_image_processing);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_filter_cubic_weights:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_filter_cubic);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_filter_cubic_clamp:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_filter_cubic);
			case 1: return VulkanApi.Extension(.VK_EXT_sampler_filter_minmax);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_attachment_feedback_loop_dynamic_state:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_EXT_attachment_feedback_loop_layout);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_vertex_attribute_divisor:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_float_controls2:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case 1: return VulkanApi.Extension(.VK_KHR_shader_float_controls);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_MSFT_layered_driver:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_index_type_uint8:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_line_rasterization:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_calibrated_timestamps:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_shader_expect_assume:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance6:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_descriptor_pool_overallocation:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_QCOM_tile_memory_heap:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_memory_requirements2);
			case 1: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_display_stereo:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_display);
			case 1: return VulkanApi.Extension(.VK_KHR_get_display_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_intra_refresh:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_encode_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_encode_quantization_map:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_encode_queue);
			case 1: return VulkanApi.Extension(.VK_KHR_format_feature_flags2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance7:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_cluster_acceleration_structure:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_partitioned_acceleration_structure:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_device_generated_commands:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_buffer_device_address);
			case 1: return VulkanApi.Extension(.VK_KHR_maintenance5);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance8:
			switch (idx)
			{
			case 0: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_MESA_image_alignment_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_depth_clamp_control:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_maintenance9:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_video_maintenance2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_video_queue);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_HUAWEI_hdr_vivid:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_KHR_swapchain);
			case 2: return VulkanApi.Extension(.VK_EXT_hdr_metadata);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_NV_cooperative_matrix2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_cooperative_matrix);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_ARM_pipeline_opacity_micromap:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_EXT_opacity_micromap);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_depth_clamp_zero_one:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_vertex_attribute_robustness:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_VALVE_fragment_density_map_layered:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_maintenance5);
			case 1: return VulkanApi.Extension(.VK_EXT_fragment_density_map);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_robustness2:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_fragment_density_map_offset:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			case 1: return VulkanApi.Extension(.VK_EXT_fragment_density_map);
			case 2: return VulkanApi.Extension(.VK_KHR_create_renderpass2);
			case 3: return VulkanApi.Extension(.VK_KHR_dynamic_rendering);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_EXT_zero_initialize_device_memory:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_get_physical_device_properties2);
			default:
				Runtime.FatalError("Index out of range");
			}
		case .VK_KHR_present_mode_fifo_latest_ready:
			switch (idx)
			{
			case 0: return VulkanApi.Extension(.VK_KHR_swapchain);
			default:
				Runtime.FatalError("Index out of range");
			}
		default:
			Runtime.FatalError("Index out of range");
		}
	}
}

namespace Vulkan;

extension VkFormat
{
	public enum FormatClass
	{
		VK_8BIT,
		VK_16BIT,
		VK_8BIT_ALPHA,
		VK_24BIT,
		VK_32BIT,
		VK_48BIT,
		VK_64BIT,
		VK_96BIT,
		VK_128BIT,
		VK_192BIT,
		VK_256BIT,
		D16,
		D24,
		D32,
		S8,
		D16S8,
		D24S8,
		D32S8,
		BC1_RGB,
		BC1_RGBA,
		BC2,
		BC3,
		BC4,
		BC5,
		BC6H,
		BC7,
		ETC2_RGB,
		ETC2_RGBA,
		ETC2_EAC_RGBA,
		EAC_R,
		EAC_RG,
		ASTC_4X4,
		ASTC_5X4,
		ASTC_5X5,
		ASTC_6X5,
		ASTC_6X6,
		ASTC_8X5,
		ASTC_8X6,
		ASTC_8X8,
		ASTC_10X5,
		ASTC_10X6,
		ASTC_10X8,
		ASTC_10X10,
		ASTC_12X10,
		ASTC_12X12,
		VK_32BIT_G8B8G8R8,
		VK_32BIT_B8G8R8G8,
		VK_8BIT_3PLANE_420,
		VK_8BIT_2PLANE_420,
		VK_8BIT_3PLANE_422,
		VK_8BIT_2PLANE_422,
		VK_8BIT_3PLANE_444,
		VK_64BIT_R10G10B10A10,
		VK_64BIT_G10B10G10R10,
		VK_64BIT_B10G10R10G10,
		VK_10BIT_3PLANE_420,
		VK_10BIT_2PLANE_420,
		VK_10BIT_3PLANE_422,
		VK_10BIT_2PLANE_422,
		VK_10BIT_3PLANE_444,
		VK_64BIT_R12G12B12A12,
		VK_64BIT_G12B12G12R12,
		VK_64BIT_B12G12R12G12,
		VK_12BIT_3PLANE_420,
		VK_12BIT_2PLANE_420,
		VK_12BIT_3PLANE_422,
		VK_12BIT_2PLANE_422,
		VK_12BIT_3PLANE_444,
		VK_64BIT_G16B16G16R16,
		VK_64BIT_B16G16R16G16,
		VK_16BIT_3PLANE_420,
		VK_16BIT_2PLANE_420,
		VK_16BIT_3PLANE_422,
		VK_16BIT_2PLANE_422,
		VK_16BIT_3PLANE_444,
		PVRTC1_2BPP,
		PVRTC1_4BPP,
		PVRTC2_2BPP,
		PVRTC2_4BPP,
		VK_8BIT_2PLANE_444,
		VK_10BIT_2PLANE_444,
		VK_12BIT_2PLANE_444,
		VK_16BIT_2PLANE_444,
		VK_64BIT_R14G14B14A14,
		VK_14BIT_2PLANE_420,
		VK_14BIT_2PLANE_422,
	}

	public enum CompressionMode
	{
		NONE = 0,
		BC,
		ETC2,
		EAC,
		ASTC_LDR,
		PVRTC,
		ASTC_HDR,
	}

	[Inline]
	private static BasicMetadata GetBasicMetadata(Self self)
	{
		switch (self)
		{
		case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
		case .R4G4_UNORM_PACK8: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R4G4B4A4_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B4G4R4A4_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R5G6B5_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B5G6R5_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R5G5B5A1_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B5G5R5A1_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A1R5G5B5_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A1B5G5R5_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8_UNORM: return .(.VK_8BIT_ALPHA, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_UNORM: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_SNORM: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_USCALED: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_SSCALED: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_UINT: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_SINT: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8_SRGB: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_UNORM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_SNORM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_USCALED: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_SSCALED: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_UINT: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_SINT: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8_SRGB: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_UNORM: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_SNORM: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_USCALED: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_SSCALED: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_UINT: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_SINT: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8_SRGB: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_UNORM: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_SNORM: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_USCALED: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_SSCALED: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_UINT: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_SINT: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8_SRGB: return .(.VK_24BIT, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_UNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_SNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_USCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_SSCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_UINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_SINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R8G8B8A8_SRGB: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_UNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_SNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_USCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_SSCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_UINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_SINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B8G8R8A8_SRGB: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_UNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_SNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_USCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_SSCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_UINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_SINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A8B8G8R8_SRGB_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_UNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_SNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_USCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_SSCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_UINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2R10G10B10_SINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_UNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_SNORM_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_USCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_SSCALED_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_UINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A2B10G10R10_SINT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_UNORM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_SNORM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_USCALED: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_SSCALED: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_UINT: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_SINT: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16_SFLOAT: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_UNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_SNORM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_USCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_SSCALED: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_UINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_SINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_SFLOAT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_UNORM: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_SNORM: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_USCALED: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_SSCALED: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_UINT: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_SINT: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16_SFLOAT: return .(.VK_48BIT, 6, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_UNORM: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_SNORM: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_USCALED: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_SSCALED: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_UINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_SINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16B16A16_SFLOAT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32_UINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32_SINT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32_SFLOAT: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32_UINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32_SINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32_SFLOAT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32_UINT: return .(.VK_96BIT, 12, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32_SINT: return .(.VK_96BIT, 12, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32_SFLOAT: return .(.VK_96BIT, 12, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32A32_UINT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32A32_SINT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R32G32B32A32_SFLOAT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64_UINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64_SINT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64_SFLOAT: return .(.VK_64BIT, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64_UINT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64_SINT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64_SFLOAT: return .(.VK_128BIT, 16, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64_UINT: return .(.VK_192BIT, 24, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64_SINT: return .(.VK_192BIT, 24, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64_SFLOAT: return .(.VK_192BIT, 24, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64A64_UINT: return .(.VK_256BIT, 32, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64A64_SINT: return .(.VK_256BIT, 32, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R64G64B64A64_SFLOAT: return .(.VK_256BIT, 32, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .B10G11R11_UFLOAT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .E5B9G9R9_UFLOAT_PACK32: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .D16_UNORM: return .(.D16, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .X8_D24_UNORM_PACK32: return .(.D24, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .D32_SFLOAT: return .(.D32, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .S8_UINT: return .(.S8, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .D16_UNORM_S8_UINT: return .(.D16S8, 3, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .D24_UNORM_S8_UINT: return .(.D24S8, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .D32_SFLOAT_S8_UINT: return .(.D32S8, 5, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .BC1_RGB_UNORM_BLOCK: return .(.BC1_RGB, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC1_RGB_SRGB_BLOCK: return .(.BC1_RGB, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC1_RGBA_UNORM_BLOCK: return .(.BC1_RGBA, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC1_RGBA_SRGB_BLOCK: return .(.BC1_RGBA, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC2_UNORM_BLOCK: return .(.BC2, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC2_SRGB_BLOCK: return .(.BC2, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC3_UNORM_BLOCK: return .(.BC3, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC3_SRGB_BLOCK: return .(.BC3, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC4_UNORM_BLOCK: return .(.BC4, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC4_SNORM_BLOCK: return .(.BC4, 8, 16, .(4,4,1), -1, .BC, -1);
		case .BC5_UNORM_BLOCK: return .(.BC5, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC5_SNORM_BLOCK: return .(.BC5, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC6H_UFLOAT_BLOCK: return .(.BC6H, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC6H_SFLOAT_BLOCK: return .(.BC6H, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC7_UNORM_BLOCK: return .(.BC7, 16, 16, .(4,4,1), -1, .BC, -1);
		case .BC7_SRGB_BLOCK: return .(.BC7, 16, 16, .(4,4,1), -1, .BC, -1);
		case .ETC2_R8G8B8_UNORM_BLOCK: return .(.ETC2_RGB, 8, 16, .(4,4,1), -1, .ETC2, -1);
		case .ETC2_R8G8B8_SRGB_BLOCK: return .(.ETC2_RGB, 8, 16, .(4,4,1), -1, .ETC2, -1);
		case .ETC2_R8G8B8A1_UNORM_BLOCK: return .(.ETC2_RGBA, 8, 16, .(4,4,1), -1, .ETC2, -1);
		case .ETC2_R8G8B8A1_SRGB_BLOCK: return .(.ETC2_RGBA, 8, 16, .(4,4,1), -1, .ETC2, -1);
		case .ETC2_R8G8B8A8_UNORM_BLOCK: return .(.ETC2_EAC_RGBA, 16, 16, .(4,4,1), -1, .ETC2, -1);
		case .ETC2_R8G8B8A8_SRGB_BLOCK: return .(.ETC2_EAC_RGBA, 16, 16, .(4,4,1), -1, .ETC2, -1);
		case .EAC_R11_UNORM_BLOCK: return .(.EAC_R, 8, 16, .(4,4,1), -1, .EAC, -1);
		case .EAC_R11_SNORM_BLOCK: return .(.EAC_R, 8, 16, .(4,4,1), -1, .EAC, -1);
		case .EAC_R11G11_UNORM_BLOCK: return .(.EAC_RG, 16, 16, .(4,4,1), -1, .EAC, -1);
		case .EAC_R11G11_SNORM_BLOCK: return .(.EAC_RG, 16, 16, .(4,4,1), -1, .EAC, -1);
		case .ASTC_4x4_UNORM_BLOCK: return .(.ASTC_4X4, 16, 16, .(4,4,1), -1, .ASTC_LDR, -1);
		case .ASTC_4x4_SRGB_BLOCK: return .(.ASTC_4X4, 16, 16, .(4,4,1), -1, .ASTC_LDR, -1);
		case .ASTC_5x4_UNORM_BLOCK: return .(.ASTC_5X4, 16, 20, .(5,4,1), -1, .ASTC_LDR, -1);
		case .ASTC_5x4_SRGB_BLOCK: return .(.ASTC_5X4, 16, 20, .(5,4,1), -1, .ASTC_LDR, -1);
		case .ASTC_5x5_UNORM_BLOCK: return .(.ASTC_5X5, 16, 25, .(5,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_5x5_SRGB_BLOCK: return .(.ASTC_5X5, 16, 25, .(5,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_6x5_UNORM_BLOCK: return .(.ASTC_6X5, 16, 30, .(6,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_6x5_SRGB_BLOCK: return .(.ASTC_6X5, 16, 30, .(6,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_6x6_UNORM_BLOCK: return .(.ASTC_6X6, 16, 36, .(6,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_6x6_SRGB_BLOCK: return .(.ASTC_6X6, 16, 36, .(6,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x5_UNORM_BLOCK: return .(.ASTC_8X5, 16, 40, .(8,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x5_SRGB_BLOCK: return .(.ASTC_8X5, 16, 40, .(8,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x6_UNORM_BLOCK: return .(.ASTC_8X6, 16, 48, .(8,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x6_SRGB_BLOCK: return .(.ASTC_8X6, 16, 48, .(8,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x8_UNORM_BLOCK: return .(.ASTC_8X8, 16, 64, .(8,8,1), -1, .ASTC_LDR, -1);
		case .ASTC_8x8_SRGB_BLOCK: return .(.ASTC_8X8, 16, 64, .(8,8,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x5_UNORM_BLOCK: return .(.ASTC_10X5, 16, 50, .(10,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x5_SRGB_BLOCK: return .(.ASTC_10X5, 16, 50, .(10,5,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x6_UNORM_BLOCK: return .(.ASTC_10X6, 16, 60, .(10,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x6_SRGB_BLOCK: return .(.ASTC_10X6, 16, 60, .(10,6,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x8_UNORM_BLOCK: return .(.ASTC_10X8, 16, 80, .(10,8,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x8_SRGB_BLOCK: return .(.ASTC_10X8, 16, 80, .(10,8,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x10_UNORM_BLOCK: return .(.ASTC_10X10, 16, 100, .(10,10,1), -1, .ASTC_LDR, -1);
		case .ASTC_10x10_SRGB_BLOCK: return .(.ASTC_10X10, 16, 100, .(10,10,1), -1, .ASTC_LDR, -1);
		case .ASTC_12x10_UNORM_BLOCK: return .(.ASTC_12X10, 16, 120, .(12,10,1), -1, .ASTC_LDR, -1);
		case .ASTC_12x10_SRGB_BLOCK: return .(.ASTC_12X10, 16, 120, .(12,10,1), -1, .ASTC_LDR, -1);
		case .ASTC_12x12_UNORM_BLOCK: return .(.ASTC_12X12, 16, 144, .(12,12,1), -1, .ASTC_LDR, -1);
		case .ASTC_12x12_SRGB_BLOCK: return .(.ASTC_12X12, 16, 144, .(12,12,1), -1, .ASTC_LDR, -1);
		case .G8B8G8R8_422_UNORM: return .(.VK_32BIT_G8B8G8R8, 4, 1, .(2,1,1), -1, .NONE, 422);
		case .B8G8R8G8_422_UNORM: return .(.VK_32BIT_B8G8R8G8, 4, 1, .(2,1,1), -1, .NONE, 422);
		case .G8_B8_R8_3PLANE_420_UNORM: return .(.VK_8BIT_3PLANE_420, 3, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G8_B8R8_2PLANE_420_UNORM: return .(.VK_8BIT_2PLANE_420, 3, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G8_B8_R8_3PLANE_422_UNORM: return .(.VK_8BIT_3PLANE_422, 3, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G8_B8R8_2PLANE_422_UNORM: return .(.VK_8BIT_2PLANE_422, 3, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G8_B8_R8_3PLANE_444_UNORM: return .(.VK_8BIT_3PLANE_444, 3, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .R10X6_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R10X6G10X6_UNORM_2PACK16: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R10X6G10X6B10X6A10X6_UNORM_4PACK16: return .(.VK_64BIT_R10G10B10A10, 8, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: return .(.VK_64BIT_G10B10G10R10, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: return .(.VK_64BIT_B10G10R10G10, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return .(.VK_10BIT_3PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return .(.VK_10BIT_2PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return .(.VK_10BIT_3PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return .(.VK_10BIT_2PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return .(.VK_10BIT_3PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .R12X4_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R12X4G12X4_UNORM_2PACK16: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R12X4G12X4B12X4A12X4_UNORM_4PACK16: return .(.VK_64BIT_R12G12B12A12, 8, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: return .(.VK_64BIT_G12B12G12R12, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: return .(.VK_64BIT_B12G12R12G12, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return .(.VK_12BIT_3PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return .(.VK_12BIT_2PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return .(.VK_12BIT_3PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return .(.VK_12BIT_2PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return .(.VK_12BIT_3PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G16B16G16R16_422_UNORM: return .(.VK_64BIT_G16B16G16R16, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .B16G16R16G16_422_UNORM: return .(.VK_64BIT_B16G16R16G16, 8, 1, .(2,1,1), -1, .NONE, 422);
		case .G16_B16_R16_3PLANE_420_UNORM: return .(.VK_16BIT_3PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G16_B16R16_2PLANE_420_UNORM: return .(.VK_16BIT_2PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G16_B16_R16_3PLANE_422_UNORM: return .(.VK_16BIT_3PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G16_B16R16_2PLANE_422_UNORM: return .(.VK_16BIT_2PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .G16_B16_R16_3PLANE_444_UNORM: return .(.VK_16BIT_3PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .PVRTC1_2BPP_UNORM_BLOCK_IMG: return .(.PVRTC1_2BPP, 8, 1, .(8,4,1), -1, .PVRTC, -1);
		case .PVRTC1_4BPP_UNORM_BLOCK_IMG: return .(.PVRTC1_4BPP, 8, 1, .(4,4,1), -1, .PVRTC, -1);
		case .PVRTC2_2BPP_UNORM_BLOCK_IMG: return .(.PVRTC2_2BPP, 8, 1, .(8,4,1), -1, .PVRTC, -1);
		case .PVRTC2_4BPP_UNORM_BLOCK_IMG: return .(.PVRTC2_4BPP, 8, 1, .(4,4,1), -1, .PVRTC, -1);
		case .PVRTC1_2BPP_SRGB_BLOCK_IMG: return .(.PVRTC1_2BPP, 8, 1, .(8,4,1), -1, .PVRTC, -1);
		case .PVRTC1_4BPP_SRGB_BLOCK_IMG: return .(.PVRTC1_4BPP, 8, 1, .(4,4,1), -1, .PVRTC, -1);
		case .PVRTC2_2BPP_SRGB_BLOCK_IMG: return .(.PVRTC2_2BPP, 8, 1, .(8,4,1), -1, .PVRTC, -1);
		case .PVRTC2_4BPP_SRGB_BLOCK_IMG: return .(.PVRTC2_4BPP, 8, 1, .(4,4,1), -1, .PVRTC, -1);
		case .ASTC_4x4_SFLOAT_BLOCK: return .(.ASTC_4X4, 16, 16, .(4,4,1), -1, .ASTC_HDR, -1);
		case .ASTC_5x4_SFLOAT_BLOCK: return .(.ASTC_5X4, 16, 20, .(5,4,1), -1, .ASTC_HDR, -1);
		case .ASTC_5x5_SFLOAT_BLOCK: return .(.ASTC_5X5, 16, 25, .(5,5,1), -1, .ASTC_HDR, -1);
		case .ASTC_6x5_SFLOAT_BLOCK: return .(.ASTC_6X5, 16, 30, .(6,5,1), -1, .ASTC_HDR, -1);
		case .ASTC_6x6_SFLOAT_BLOCK: return .(.ASTC_6X6, 16, 36, .(6,6,1), -1, .ASTC_HDR, -1);
		case .ASTC_8x5_SFLOAT_BLOCK: return .(.ASTC_8X5, 16, 40, .(8,5,1), -1, .ASTC_HDR, -1);
		case .ASTC_8x6_SFLOAT_BLOCK: return .(.ASTC_8X6, 16, 48, .(8,6,1), -1, .ASTC_HDR, -1);
		case .ASTC_8x8_SFLOAT_BLOCK: return .(.ASTC_8X8, 16, 64, .(8,8,1), -1, .ASTC_HDR, -1);
		case .ASTC_10x5_SFLOAT_BLOCK: return .(.ASTC_10X5, 16, 50, .(10,5,1), -1, .ASTC_HDR, -1);
		case .ASTC_10x6_SFLOAT_BLOCK: return .(.ASTC_10X6, 16, 60, .(10,6,1), -1, .ASTC_HDR, -1);
		case .ASTC_10x8_SFLOAT_BLOCK: return .(.ASTC_10X8, 16, 80, .(10,8,1), -1, .ASTC_HDR, -1);
		case .ASTC_10x10_SFLOAT_BLOCK: return .(.ASTC_10X10, 16, 100, .(10,10,1), -1, .ASTC_HDR, -1);
		case .ASTC_12x10_SFLOAT_BLOCK: return .(.ASTC_12X10, 16, 120, .(12,10,1), -1, .ASTC_HDR, -1);
		case .ASTC_12x12_SFLOAT_BLOCK: return .(.ASTC_12X12, 16, 144, .(12,12,1), -1, .ASTC_HDR, -1);
		case .G8_B8R8_2PLANE_444_UNORM: return .(.VK_8BIT_2PLANE_444, 3, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return .(.VK_10BIT_2PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return .(.VK_12BIT_2PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .G16_B16R16_2PLANE_444_UNORM: return .(.VK_16BIT_2PLANE_444, 6, 1, .(/**/ 1,1,1), -1, .NONE, 444);
		case .A4R4G4B4_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .A4B4G4R4_UNORM_PACK16: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R16G16_SFIXED5_NV: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R10X6_UINT_PACK16_ARM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R10X6G10X6_UINT_2PACK16_ARM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM: return .(.VK_64BIT_R10G10B10A10, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R12X4_UINT_PACK16_ARM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R12X4G12X4_UINT_2PACK16_ARM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM: return .(.VK_64BIT_R12G12B12A12, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2_UINT_PACK16_ARM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2G14X2_UINT_2PACK16_ARM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM: return .(.VK_64BIT_R14G14B14A14, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2_UNORM_PACK16_ARM: return .(.VK_16BIT, 2, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2G14X2_UNORM_2PACK16_ARM: return .(.VK_32BIT, 4, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM: return .(.VK_64BIT_R14G14B14A14, 8, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM: return .(.VK_14BIT_2PLANE_420, 6, 1, .(/**/ 1,1,1), -1, .NONE, 420);
		case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM: return .(.VK_14BIT_2PLANE_422, 6, 1, .(/**/ 1,1,1), -1, .NONE, 422);
		case .R8_BOOL_ARM: return .(.VK_8BIT, 1, 1, .(/**/ 1,1,1), -1, .NONE, -1);
		}
	}

	public enum ComponentBits
	{
		VK_4 = 4,
		VK_5 = 5,
		VK_6 = 6,
		VK_1 = 1,
		VK_8 = 8,
		VK_2 = 2,
		VK_10 = 10,
		VK_16 = 16,
		VK_32 = 32,
		VK_64 = 64,
		VK_11 = 11,
		VK_9 = 9,
		VK_24 = 24,
		COMPRESSED = 2147483648,
		VK_12 = 12,
		VK_14 = 14,
	}

	public enum NumericFormat
	{
		UNORM,
		SNORM,
		USCALED,
		SSCALED,
		UINT,
		SINT,
		SRGB,
		SFLOAT,
		UFLOAT,
		SFIXED5,
		BOOL,
	}

	public int ComponentCount
	{
		get
		{
			switch (this)
			{
			case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
			case .R4G4_UNORM_PACK8: return 2;
			case .R4G4B4A4_UNORM_PACK16: return 4;
			case .B4G4R4A4_UNORM_PACK16: return 4;
			case .R5G6B5_UNORM_PACK16: return 3;
			case .B5G6R5_UNORM_PACK16: return 3;
			case .R5G5B5A1_UNORM_PACK16: return 4;
			case .B5G5R5A1_UNORM_PACK16: return 4;
			case .A1R5G5B5_UNORM_PACK16: return 4;
			case .A1B5G5R5_UNORM_PACK16: return 4;
			case .A8_UNORM: return 1;
			case .R8_UNORM: return 1;
			case .R8_SNORM: return 1;
			case .R8_USCALED: return 1;
			case .R8_SSCALED: return 1;
			case .R8_UINT: return 1;
			case .R8_SINT: return 1;
			case .R8_SRGB: return 1;
			case .R8G8_UNORM: return 2;
			case .R8G8_SNORM: return 2;
			case .R8G8_USCALED: return 2;
			case .R8G8_SSCALED: return 2;
			case .R8G8_UINT: return 2;
			case .R8G8_SINT: return 2;
			case .R8G8_SRGB: return 2;
			case .R8G8B8_UNORM: return 3;
			case .R8G8B8_SNORM: return 3;
			case .R8G8B8_USCALED: return 3;
			case .R8G8B8_SSCALED: return 3;
			case .R8G8B8_UINT: return 3;
			case .R8G8B8_SINT: return 3;
			case .R8G8B8_SRGB: return 3;
			case .B8G8R8_UNORM: return 3;
			case .B8G8R8_SNORM: return 3;
			case .B8G8R8_USCALED: return 3;
			case .B8G8R8_SSCALED: return 3;
			case .B8G8R8_UINT: return 3;
			case .B8G8R8_SINT: return 3;
			case .B8G8R8_SRGB: return 3;
			case .R8G8B8A8_UNORM: return 4;
			case .R8G8B8A8_SNORM: return 4;
			case .R8G8B8A8_USCALED: return 4;
			case .R8G8B8A8_SSCALED: return 4;
			case .R8G8B8A8_UINT: return 4;
			case .R8G8B8A8_SINT: return 4;
			case .R8G8B8A8_SRGB: return 4;
			case .B8G8R8A8_UNORM: return 4;
			case .B8G8R8A8_SNORM: return 4;
			case .B8G8R8A8_USCALED: return 4;
			case .B8G8R8A8_SSCALED: return 4;
			case .B8G8R8A8_UINT: return 4;
			case .B8G8R8A8_SINT: return 4;
			case .B8G8R8A8_SRGB: return 4;
			case .A8B8G8R8_UNORM_PACK32: return 4;
			case .A8B8G8R8_SNORM_PACK32: return 4;
			case .A8B8G8R8_USCALED_PACK32: return 4;
			case .A8B8G8R8_SSCALED_PACK32: return 4;
			case .A8B8G8R8_UINT_PACK32: return 4;
			case .A8B8G8R8_SINT_PACK32: return 4;
			case .A8B8G8R8_SRGB_PACK32: return 4;
			case .A2R10G10B10_UNORM_PACK32: return 4;
			case .A2R10G10B10_SNORM_PACK32: return 4;
			case .A2R10G10B10_USCALED_PACK32: return 4;
			case .A2R10G10B10_SSCALED_PACK32: return 4;
			case .A2R10G10B10_UINT_PACK32: return 4;
			case .A2R10G10B10_SINT_PACK32: return 4;
			case .A2B10G10R10_UNORM_PACK32: return 4;
			case .A2B10G10R10_SNORM_PACK32: return 4;
			case .A2B10G10R10_USCALED_PACK32: return 4;
			case .A2B10G10R10_SSCALED_PACK32: return 4;
			case .A2B10G10R10_UINT_PACK32: return 4;
			case .A2B10G10R10_SINT_PACK32: return 4;
			case .R16_UNORM: return 1;
			case .R16_SNORM: return 1;
			case .R16_USCALED: return 1;
			case .R16_SSCALED: return 1;
			case .R16_UINT: return 1;
			case .R16_SINT: return 1;
			case .R16_SFLOAT: return 1;
			case .R16G16_UNORM: return 2;
			case .R16G16_SNORM: return 2;
			case .R16G16_USCALED: return 2;
			case .R16G16_SSCALED: return 2;
			case .R16G16_UINT: return 2;
			case .R16G16_SINT: return 2;
			case .R16G16_SFLOAT: return 2;
			case .R16G16B16_UNORM: return 3;
			case .R16G16B16_SNORM: return 3;
			case .R16G16B16_USCALED: return 3;
			case .R16G16B16_SSCALED: return 3;
			case .R16G16B16_UINT: return 3;
			case .R16G16B16_SINT: return 3;
			case .R16G16B16_SFLOAT: return 3;
			case .R16G16B16A16_UNORM: return 4;
			case .R16G16B16A16_SNORM: return 4;
			case .R16G16B16A16_USCALED: return 4;
			case .R16G16B16A16_SSCALED: return 4;
			case .R16G16B16A16_UINT: return 4;
			case .R16G16B16A16_SINT: return 4;
			case .R16G16B16A16_SFLOAT: return 4;
			case .R32_UINT: return 1;
			case .R32_SINT: return 1;
			case .R32_SFLOAT: return 1;
			case .R32G32_UINT: return 2;
			case .R32G32_SINT: return 2;
			case .R32G32_SFLOAT: return 2;
			case .R32G32B32_UINT: return 3;
			case .R32G32B32_SINT: return 3;
			case .R32G32B32_SFLOAT: return 3;
			case .R32G32B32A32_UINT: return 4;
			case .R32G32B32A32_SINT: return 4;
			case .R32G32B32A32_SFLOAT: return 4;
			case .R64_UINT: return 1;
			case .R64_SINT: return 1;
			case .R64_SFLOAT: return 1;
			case .R64G64_UINT: return 2;
			case .R64G64_SINT: return 2;
			case .R64G64_SFLOAT: return 2;
			case .R64G64B64_UINT: return 3;
			case .R64G64B64_SINT: return 3;
			case .R64G64B64_SFLOAT: return 3;
			case .R64G64B64A64_UINT: return 4;
			case .R64G64B64A64_SINT: return 4;
			case .R64G64B64A64_SFLOAT: return 4;
			case .B10G11R11_UFLOAT_PACK32: return 3;
			case .E5B9G9R9_UFLOAT_PACK32: return 3;
			case .D16_UNORM: return 1;
			case .X8_D24_UNORM_PACK32: return 1;
			case .D32_SFLOAT: return 1;
			case .S8_UINT: return 1;
			case .D16_UNORM_S8_UINT: return 2;
			case .D24_UNORM_S8_UINT: return 2;
			case .D32_SFLOAT_S8_UINT: return 2;
			case .BC1_RGB_UNORM_BLOCK: return 3;
			case .BC1_RGB_SRGB_BLOCK: return 3;
			case .BC1_RGBA_UNORM_BLOCK: return 4;
			case .BC1_RGBA_SRGB_BLOCK: return 4;
			case .BC2_UNORM_BLOCK: return 4;
			case .BC2_SRGB_BLOCK: return 4;
			case .BC3_UNORM_BLOCK: return 4;
			case .BC3_SRGB_BLOCK: return 4;
			case .BC4_UNORM_BLOCK: return 1;
			case .BC4_SNORM_BLOCK: return 1;
			case .BC5_UNORM_BLOCK: return 2;
			case .BC5_SNORM_BLOCK: return 2;
			case .BC6H_UFLOAT_BLOCK: return 3;
			case .BC6H_SFLOAT_BLOCK: return 3;
			case .BC7_UNORM_BLOCK: return 4;
			case .BC7_SRGB_BLOCK: return 4;
			case .ETC2_R8G8B8_UNORM_BLOCK: return 3;
			case .ETC2_R8G8B8_SRGB_BLOCK: return 3;
			case .ETC2_R8G8B8A1_UNORM_BLOCK: return 4;
			case .ETC2_R8G8B8A1_SRGB_BLOCK: return 4;
			case .ETC2_R8G8B8A8_UNORM_BLOCK: return 4;
			case .ETC2_R8G8B8A8_SRGB_BLOCK: return 4;
			case .EAC_R11_UNORM_BLOCK: return 1;
			case .EAC_R11_SNORM_BLOCK: return 1;
			case .EAC_R11G11_UNORM_BLOCK: return 2;
			case .EAC_R11G11_SNORM_BLOCK: return 2;
			case .ASTC_4x4_UNORM_BLOCK: return 4;
			case .ASTC_4x4_SRGB_BLOCK: return 4;
			case .ASTC_5x4_UNORM_BLOCK: return 4;
			case .ASTC_5x4_SRGB_BLOCK: return 4;
			case .ASTC_5x5_UNORM_BLOCK: return 4;
			case .ASTC_5x5_SRGB_BLOCK: return 4;
			case .ASTC_6x5_UNORM_BLOCK: return 4;
			case .ASTC_6x5_SRGB_BLOCK: return 4;
			case .ASTC_6x6_UNORM_BLOCK: return 4;
			case .ASTC_6x6_SRGB_BLOCK: return 4;
			case .ASTC_8x5_UNORM_BLOCK: return 4;
			case .ASTC_8x5_SRGB_BLOCK: return 4;
			case .ASTC_8x6_UNORM_BLOCK: return 4;
			case .ASTC_8x6_SRGB_BLOCK: return 4;
			case .ASTC_8x8_UNORM_BLOCK: return 4;
			case .ASTC_8x8_SRGB_BLOCK: return 4;
			case .ASTC_10x5_UNORM_BLOCK: return 4;
			case .ASTC_10x5_SRGB_BLOCK: return 4;
			case .ASTC_10x6_UNORM_BLOCK: return 4;
			case .ASTC_10x6_SRGB_BLOCK: return 4;
			case .ASTC_10x8_UNORM_BLOCK: return 4;
			case .ASTC_10x8_SRGB_BLOCK: return 4;
			case .ASTC_10x10_UNORM_BLOCK: return 4;
			case .ASTC_10x10_SRGB_BLOCK: return 4;
			case .ASTC_12x10_UNORM_BLOCK: return 4;
			case .ASTC_12x10_SRGB_BLOCK: return 4;
			case .ASTC_12x12_UNORM_BLOCK: return 4;
			case .ASTC_12x12_SRGB_BLOCK: return 4;
			case .G8B8G8R8_422_UNORM: return 4;
			case .B8G8R8G8_422_UNORM: return 4;
			case .G8_B8_R8_3PLANE_420_UNORM: return 3;
			case .G8_B8R8_2PLANE_420_UNORM: return 3;
			case .G8_B8_R8_3PLANE_422_UNORM: return 3;
			case .G8_B8R8_2PLANE_422_UNORM: return 3;
			case .G8_B8_R8_3PLANE_444_UNORM: return 3;
			case .R10X6_UNORM_PACK16: return 1;
			case .R10X6G10X6_UNORM_2PACK16: return 2;
			case .R10X6G10X6B10X6A10X6_UNORM_4PACK16: return 4;
			case .G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: return 4;
			case .B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: return 4;
			case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return 3;
			case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return 3;
			case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return 3;
			case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return 3;
			case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return 3;
			case .R12X4_UNORM_PACK16: return 1;
			case .R12X4G12X4_UNORM_2PACK16: return 2;
			case .R12X4G12X4B12X4A12X4_UNORM_4PACK16: return 4;
			case .G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: return 4;
			case .B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: return 4;
			case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return 3;
			case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return 3;
			case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return 3;
			case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return 3;
			case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return 3;
			case .G16B16G16R16_422_UNORM: return 4;
			case .B16G16R16G16_422_UNORM: return 4;
			case .G16_B16_R16_3PLANE_420_UNORM: return 3;
			case .G16_B16R16_2PLANE_420_UNORM: return 3;
			case .G16_B16_R16_3PLANE_422_UNORM: return 3;
			case .G16_B16R16_2PLANE_422_UNORM: return 3;
			case .G16_B16_R16_3PLANE_444_UNORM: return 3;
			case .PVRTC1_2BPP_UNORM_BLOCK_IMG: return 4;
			case .PVRTC1_4BPP_UNORM_BLOCK_IMG: return 4;
			case .PVRTC2_2BPP_UNORM_BLOCK_IMG: return 4;
			case .PVRTC2_4BPP_UNORM_BLOCK_IMG: return 4;
			case .PVRTC1_2BPP_SRGB_BLOCK_IMG: return 4;
			case .PVRTC1_4BPP_SRGB_BLOCK_IMG: return 4;
			case .PVRTC2_2BPP_SRGB_BLOCK_IMG: return 4;
			case .PVRTC2_4BPP_SRGB_BLOCK_IMG: return 4;
			case .ASTC_4x4_SFLOAT_BLOCK: return 4;
			case .ASTC_5x4_SFLOAT_BLOCK: return 4;
			case .ASTC_5x5_SFLOAT_BLOCK: return 4;
			case .ASTC_6x5_SFLOAT_BLOCK: return 4;
			case .ASTC_6x6_SFLOAT_BLOCK: return 4;
			case .ASTC_8x5_SFLOAT_BLOCK: return 4;
			case .ASTC_8x6_SFLOAT_BLOCK: return 4;
			case .ASTC_8x8_SFLOAT_BLOCK: return 4;
			case .ASTC_10x5_SFLOAT_BLOCK: return 4;
			case .ASTC_10x6_SFLOAT_BLOCK: return 4;
			case .ASTC_10x8_SFLOAT_BLOCK: return 4;
			case .ASTC_10x10_SFLOAT_BLOCK: return 4;
			case .ASTC_12x10_SFLOAT_BLOCK: return 4;
			case .ASTC_12x12_SFLOAT_BLOCK: return 4;
			case .G8_B8R8_2PLANE_444_UNORM: return 3;
			case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return 3;
			case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return 3;
			case .G16_B16R16_2PLANE_444_UNORM: return 3;
			case .A4R4G4B4_UNORM_PACK16: return 4;
			case .A4B4G4R4_UNORM_PACK16: return 4;
			case .R16G16_SFIXED5_NV: return 2;
			case .R10X6_UINT_PACK16_ARM: return 1;
			case .R10X6G10X6_UINT_2PACK16_ARM: return 2;
			case .R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM: return 4;
			case .R12X4_UINT_PACK16_ARM: return 1;
			case .R12X4G12X4_UINT_2PACK16_ARM: return 2;
			case .R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM: return 4;
			case .R14X2_UINT_PACK16_ARM: return 1;
			case .R14X2G14X2_UINT_2PACK16_ARM: return 2;
			case .R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM: return 4;
			case .R14X2_UNORM_PACK16_ARM: return 1;
			case .R14X2G14X2_UNORM_2PACK16_ARM: return 2;
			case .R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM: return 4;
			case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM: return 3;
			case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM: return 3;
			case .R8_BOOL_ARM: return 1;
			}
		}
	}

	public ComponentMetadata GetComponent(int idx)
	{
		switch (this)
		{
		case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
		case .R4G4_UNORM_PACK8:
			switch (idx)
			{
			case 0: return .('R', .VK_4, .UNORM, -1);
			case 1: return .('G', .VK_4, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R4G4B4A4_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_4, .UNORM, -1);
			case 1: return .('G', .VK_4, .UNORM, -1);
			case 2: return .('B', .VK_4, .UNORM, -1);
			case 3: return .('A', .VK_4, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B4G4R4A4_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('B', .VK_4, .UNORM, -1);
			case 1: return .('G', .VK_4, .UNORM, -1);
			case 2: return .('R', .VK_4, .UNORM, -1);
			case 3: return .('A', .VK_4, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R5G6B5_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_5, .UNORM, -1);
			case 1: return .('G', .VK_6, .UNORM, -1);
			case 2: return .('B', .VK_5, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B5G6R5_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('B', .VK_5, .UNORM, -1);
			case 1: return .('G', .VK_6, .UNORM, -1);
			case 2: return .('R', .VK_5, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R5G5B5A1_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_5, .UNORM, -1);
			case 1: return .('G', .VK_5, .UNORM, -1);
			case 2: return .('B', .VK_5, .UNORM, -1);
			case 3: return .('A', .VK_1, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B5G5R5A1_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('B', .VK_5, .UNORM, -1);
			case 1: return .('G', .VK_5, .UNORM, -1);
			case 2: return .('R', .VK_5, .UNORM, -1);
			case 3: return .('A', .VK_1, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A1R5G5B5_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('A', .VK_1, .UNORM, -1);
			case 1: return .('R', .VK_5, .UNORM, -1);
			case 2: return .('G', .VK_5, .UNORM, -1);
			case 3: return .('B', .VK_5, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A1B5G5R5_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('A', .VK_1, .UNORM, -1);
			case 1: return .('B', .VK_5, .UNORM, -1);
			case 2: return .('G', .VK_5, .UNORM, -1);
			case 3: return .('R', .VK_5, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8_UNORM:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_SRGB:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SNORM, -1);
			case 1: return .('G', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .USCALED, -1);
			case 1: return .('G', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SSCALED, -1);
			case 1: return .('G', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UINT, -1);
			case 1: return .('G', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SINT, -1);
			case 1: return .('G', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8_SRGB:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SRGB, -1);
			case 1: return .('G', .VK_8, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			case 2: return .('B', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SNORM, -1);
			case 1: return .('G', .VK_8, .SNORM, -1);
			case 2: return .('B', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .USCALED, -1);
			case 1: return .('G', .VK_8, .USCALED, -1);
			case 2: return .('B', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SSCALED, -1);
			case 1: return .('G', .VK_8, .SSCALED, -1);
			case 2: return .('B', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UINT, -1);
			case 1: return .('G', .VK_8, .UINT, -1);
			case 2: return .('B', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SINT, -1);
			case 1: return .('G', .VK_8, .SINT, -1);
			case 2: return .('B', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8_SRGB:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SRGB, -1);
			case 1: return .('G', .VK_8, .SRGB, -1);
			case 2: return .('B', .VK_8, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_UNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			case 2: return .('R', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_SNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SNORM, -1);
			case 1: return .('G', .VK_8, .SNORM, -1);
			case 2: return .('R', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_USCALED:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .USCALED, -1);
			case 1: return .('G', .VK_8, .USCALED, -1);
			case 2: return .('R', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_SSCALED:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SSCALED, -1);
			case 1: return .('G', .VK_8, .SSCALED, -1);
			case 2: return .('R', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_UINT:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .UINT, -1);
			case 1: return .('G', .VK_8, .UINT, -1);
			case 2: return .('R', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_SINT:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SINT, -1);
			case 1: return .('G', .VK_8, .SINT, -1);
			case 2: return .('R', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8_SRGB:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SRGB, -1);
			case 1: return .('G', .VK_8, .SRGB, -1);
			case 2: return .('R', .VK_8, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			case 2: return .('B', .VK_8, .UNORM, -1);
			case 3: return .('A', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SNORM, -1);
			case 1: return .('G', .VK_8, .SNORM, -1);
			case 2: return .('B', .VK_8, .SNORM, -1);
			case 3: return .('A', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .USCALED, -1);
			case 1: return .('G', .VK_8, .USCALED, -1);
			case 2: return .('B', .VK_8, .USCALED, -1);
			case 3: return .('A', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SSCALED, -1);
			case 1: return .('G', .VK_8, .SSCALED, -1);
			case 2: return .('B', .VK_8, .SSCALED, -1);
			case 3: return .('A', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .UINT, -1);
			case 1: return .('G', .VK_8, .UINT, -1);
			case 2: return .('B', .VK_8, .UINT, -1);
			case 3: return .('A', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SINT, -1);
			case 1: return .('G', .VK_8, .SINT, -1);
			case 2: return .('B', .VK_8, .SINT, -1);
			case 3: return .('A', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R8G8B8A8_SRGB:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .SRGB, -1);
			case 1: return .('G', .VK_8, .SRGB, -1);
			case 2: return .('B', .VK_8, .SRGB, -1);
			case 3: return .('A', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_UNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			case 2: return .('R', .VK_8, .UNORM, -1);
			case 3: return .('A', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_SNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SNORM, -1);
			case 1: return .('G', .VK_8, .SNORM, -1);
			case 2: return .('R', .VK_8, .SNORM, -1);
			case 3: return .('A', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_USCALED:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .USCALED, -1);
			case 1: return .('G', .VK_8, .USCALED, -1);
			case 2: return .('R', .VK_8, .USCALED, -1);
			case 3: return .('A', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_SSCALED:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SSCALED, -1);
			case 1: return .('G', .VK_8, .SSCALED, -1);
			case 2: return .('R', .VK_8, .SSCALED, -1);
			case 3: return .('A', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_UINT:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .UINT, -1);
			case 1: return .('G', .VK_8, .UINT, -1);
			case 2: return .('R', .VK_8, .UINT, -1);
			case 3: return .('A', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_SINT:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SINT, -1);
			case 1: return .('G', .VK_8, .SINT, -1);
			case 2: return .('R', .VK_8, .SINT, -1);
			case 3: return .('A', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8A8_SRGB:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .SRGB, -1);
			case 1: return .('G', .VK_8, .SRGB, -1);
			case 2: return .('R', .VK_8, .SRGB, -1);
			case 3: return .('A', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_UNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .UNORM, -1);
			case 1: return .('B', .VK_8, .UNORM, -1);
			case 2: return .('G', .VK_8, .UNORM, -1);
			case 3: return .('R', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_SNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .SNORM, -1);
			case 1: return .('B', .VK_8, .SNORM, -1);
			case 2: return .('G', .VK_8, .SNORM, -1);
			case 3: return .('R', .VK_8, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_USCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .USCALED, -1);
			case 1: return .('B', .VK_8, .USCALED, -1);
			case 2: return .('G', .VK_8, .USCALED, -1);
			case 3: return .('R', .VK_8, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_SSCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .SSCALED, -1);
			case 1: return .('B', .VK_8, .SSCALED, -1);
			case 2: return .('G', .VK_8, .SSCALED, -1);
			case 3: return .('R', .VK_8, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_UINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .UINT, -1);
			case 1: return .('B', .VK_8, .UINT, -1);
			case 2: return .('G', .VK_8, .UINT, -1);
			case 3: return .('R', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_SINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .SINT, -1);
			case 1: return .('B', .VK_8, .SINT, -1);
			case 2: return .('G', .VK_8, .SINT, -1);
			case 3: return .('R', .VK_8, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A8B8G8R8_SRGB_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_8, .UNORM, -1);
			case 1: return .('B', .VK_8, .SRGB, -1);
			case 2: return .('G', .VK_8, .SRGB, -1);
			case 3: return .('R', .VK_8, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_UNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .UNORM, -1);
			case 1: return .('R', .VK_10, .UNORM, -1);
			case 2: return .('G', .VK_10, .UNORM, -1);
			case 3: return .('B', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_SNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SNORM, -1);
			case 1: return .('R', .VK_10, .SNORM, -1);
			case 2: return .('G', .VK_10, .SNORM, -1);
			case 3: return .('B', .VK_10, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_USCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .USCALED, -1);
			case 1: return .('R', .VK_10, .USCALED, -1);
			case 2: return .('G', .VK_10, .USCALED, -1);
			case 3: return .('B', .VK_10, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_SSCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SSCALED, -1);
			case 1: return .('R', .VK_10, .SSCALED, -1);
			case 2: return .('G', .VK_10, .SSCALED, -1);
			case 3: return .('B', .VK_10, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_UINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .UINT, -1);
			case 1: return .('R', .VK_10, .UINT, -1);
			case 2: return .('G', .VK_10, .UINT, -1);
			case 3: return .('B', .VK_10, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2R10G10B10_SINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SINT, -1);
			case 1: return .('R', .VK_10, .SINT, -1);
			case 2: return .('G', .VK_10, .SINT, -1);
			case 3: return .('B', .VK_10, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_UNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .UNORM, -1);
			case 1: return .('B', .VK_10, .UNORM, -1);
			case 2: return .('G', .VK_10, .UNORM, -1);
			case 3: return .('R', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_SNORM_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SNORM, -1);
			case 1: return .('B', .VK_10, .SNORM, -1);
			case 2: return .('G', .VK_10, .SNORM, -1);
			case 3: return .('R', .VK_10, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_USCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .USCALED, -1);
			case 1: return .('B', .VK_10, .USCALED, -1);
			case 2: return .('G', .VK_10, .USCALED, -1);
			case 3: return .('R', .VK_10, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_SSCALED_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SSCALED, -1);
			case 1: return .('B', .VK_10, .SSCALED, -1);
			case 2: return .('G', .VK_10, .SSCALED, -1);
			case 3: return .('R', .VK_10, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_UINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .UINT, -1);
			case 1: return .('B', .VK_10, .UINT, -1);
			case 2: return .('G', .VK_10, .UINT, -1);
			case 3: return .('R', .VK_10, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A2B10G10R10_SINT_PACK32:
			switch (idx)
			{
			case 0: return .('A', .VK_2, .SINT, -1);
			case 1: return .('B', .VK_10, .SINT, -1);
			case 2: return .('G', .VK_10, .SINT, -1);
			case 3: return .('R', .VK_10, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UNORM, -1);
			case 1: return .('G', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SNORM, -1);
			case 1: return .('G', .VK_16, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .USCALED, -1);
			case 1: return .('G', .VK_16, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SSCALED, -1);
			case 1: return .('G', .VK_16, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UINT, -1);
			case 1: return .('G', .VK_16, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SINT, -1);
			case 1: return .('G', .VK_16, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SFLOAT, -1);
			case 1: return .('G', .VK_16, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UNORM, -1);
			case 1: return .('G', .VK_16, .UNORM, -1);
			case 2: return .('B', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SNORM, -1);
			case 1: return .('G', .VK_16, .SNORM, -1);
			case 2: return .('B', .VK_16, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .USCALED, -1);
			case 1: return .('G', .VK_16, .USCALED, -1);
			case 2: return .('B', .VK_16, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SSCALED, -1);
			case 1: return .('G', .VK_16, .SSCALED, -1);
			case 2: return .('B', .VK_16, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UINT, -1);
			case 1: return .('G', .VK_16, .UINT, -1);
			case 2: return .('B', .VK_16, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SINT, -1);
			case 1: return .('G', .VK_16, .SINT, -1);
			case 2: return .('B', .VK_16, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SFLOAT, -1);
			case 1: return .('G', .VK_16, .SFLOAT, -1);
			case 2: return .('B', .VK_16, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_UNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UNORM, -1);
			case 1: return .('G', .VK_16, .UNORM, -1);
			case 2: return .('B', .VK_16, .UNORM, -1);
			case 3: return .('A', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_SNORM:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SNORM, -1);
			case 1: return .('G', .VK_16, .SNORM, -1);
			case 2: return .('B', .VK_16, .SNORM, -1);
			case 3: return .('A', .VK_16, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_USCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .USCALED, -1);
			case 1: return .('G', .VK_16, .USCALED, -1);
			case 2: return .('B', .VK_16, .USCALED, -1);
			case 3: return .('A', .VK_16, .USCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_SSCALED:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SSCALED, -1);
			case 1: return .('G', .VK_16, .SSCALED, -1);
			case 2: return .('B', .VK_16, .SSCALED, -1);
			case 3: return .('A', .VK_16, .SSCALED, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .UINT, -1);
			case 1: return .('G', .VK_16, .UINT, -1);
			case 2: return .('B', .VK_16, .UINT, -1);
			case 3: return .('A', .VK_16, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SINT, -1);
			case 1: return .('G', .VK_16, .SINT, -1);
			case 2: return .('B', .VK_16, .SINT, -1);
			case 3: return .('A', .VK_16, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16B16A16_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SFLOAT, -1);
			case 1: return .('G', .VK_16, .SFLOAT, -1);
			case 2: return .('B', .VK_16, .SFLOAT, -1);
			case 3: return .('A', .VK_16, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .UINT, -1);
			case 1: return .('G', .VK_32, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SINT, -1);
			case 1: return .('G', .VK_32, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SFLOAT, -1);
			case 1: return .('G', .VK_32, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .UINT, -1);
			case 1: return .('G', .VK_32, .UINT, -1);
			case 2: return .('B', .VK_32, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SINT, -1);
			case 1: return .('G', .VK_32, .SINT, -1);
			case 2: return .('B', .VK_32, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SFLOAT, -1);
			case 1: return .('G', .VK_32, .SFLOAT, -1);
			case 2: return .('B', .VK_32, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32A32_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .UINT, -1);
			case 1: return .('G', .VK_32, .UINT, -1);
			case 2: return .('B', .VK_32, .UINT, -1);
			case 3: return .('A', .VK_32, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32A32_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SINT, -1);
			case 1: return .('G', .VK_32, .SINT, -1);
			case 2: return .('B', .VK_32, .SINT, -1);
			case 3: return .('A', .VK_32, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R32G32B32A32_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_32, .SFLOAT, -1);
			case 1: return .('G', .VK_32, .SFLOAT, -1);
			case 2: return .('B', .VK_32, .SFLOAT, -1);
			case 3: return .('A', .VK_32, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .UINT, -1);
			case 1: return .('G', .VK_64, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SINT, -1);
			case 1: return .('G', .VK_64, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SFLOAT, -1);
			case 1: return .('G', .VK_64, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .UINT, -1);
			case 1: return .('G', .VK_64, .UINT, -1);
			case 2: return .('B', .VK_64, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SINT, -1);
			case 1: return .('G', .VK_64, .SINT, -1);
			case 2: return .('B', .VK_64, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SFLOAT, -1);
			case 1: return .('G', .VK_64, .SFLOAT, -1);
			case 2: return .('B', .VK_64, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64A64_UINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .UINT, -1);
			case 1: return .('G', .VK_64, .UINT, -1);
			case 2: return .('B', .VK_64, .UINT, -1);
			case 3: return .('A', .VK_64, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64A64_SINT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SINT, -1);
			case 1: return .('G', .VK_64, .SINT, -1);
			case 2: return .('B', .VK_64, .SINT, -1);
			case 3: return .('A', .VK_64, .SINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R64G64B64A64_SFLOAT:
			switch (idx)
			{
			case 0: return .('R', .VK_64, .SFLOAT, -1);
			case 1: return .('G', .VK_64, .SFLOAT, -1);
			case 2: return .('B', .VK_64, .SFLOAT, -1);
			case 3: return .('A', .VK_64, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B10G11R11_UFLOAT_PACK32:
			switch (idx)
			{
			case 0: return .('B', .VK_10, .UFLOAT, -1);
			case 1: return .('G', .VK_11, .UFLOAT, -1);
			case 2: return .('R', .VK_11, .UFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .E5B9G9R9_UFLOAT_PACK32:
			switch (idx)
			{
			case 0: return .('B', .VK_9, .UFLOAT, -1);
			case 1: return .('G', .VK_9, .UFLOAT, -1);
			case 2: return .('R', .VK_9, .UFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .D16_UNORM:
			switch (idx)
			{
			case 0: return .('D', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .X8_D24_UNORM_PACK32:
			switch (idx)
			{
			case 0: return .('D', .VK_24, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .D32_SFLOAT:
			switch (idx)
			{
			case 0: return .('D', .VK_32, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .S8_UINT:
			switch (idx)
			{
			case 0: return .('S', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .D16_UNORM_S8_UINT:
			switch (idx)
			{
			case 0: return .('D', .VK_16, .UNORM, -1);
			case 1: return .('S', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .D24_UNORM_S8_UINT:
			switch (idx)
			{
			case 0: return .('D', .VK_24, .UNORM, -1);
			case 1: return .('S', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .D32_SFLOAT_S8_UINT:
			switch (idx)
			{
			case 0: return .('D', .VK_32, .SFLOAT, -1);
			case 1: return .('S', .VK_8, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC1_RGB_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC1_RGB_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC1_RGBA_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC1_RGBA_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC2_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC2_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC3_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC3_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC4_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC4_SNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC5_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC5_SNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SNORM, -1);
			case 1: return .('G', .COMPRESSED, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC6H_UFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .UFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .UFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC6H_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC7_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .BC7_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8A1_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8A1_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8A8_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ETC2_R8G8B8A8_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .EAC_R11_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .VK_11, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .EAC_R11_SNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .VK_11, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .EAC_R11G11_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .VK_11, .UNORM, -1);
			case 1: return .('G', .VK_11, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .EAC_R11G11_SNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .VK_11, .SNORM, -1);
			case 1: return .('G', .VK_11, .SNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_4x4_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_4x4_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x4_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x4_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x5_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x5_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x5_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x5_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x6_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x6_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x5_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x5_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x6_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x6_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x8_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x8_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x5_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x5_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x6_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x6_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x8_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x8_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x10_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x10_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x10_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x10_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x12_UNORM_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x12_SRGB_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G8B8G8R8_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, -1);
			case 1: return .('B', .VK_8, .UNORM, -1);
			case 2: return .('G', .VK_8, .UNORM, -1);
			case 3: return .('R', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B8G8R8G8_422_UNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_8, .UNORM, -1);
			case 1: return .('G', .VK_8, .UNORM, -1);
			case 2: return .('R', .VK_8, .UNORM, -1);
			case 3: return .('G', .VK_8, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8_R8_3PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8R8_2PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8_R8_3PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8R8_2PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8_R8_3PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6G10X6_UNORM_2PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UNORM, -1);
			case 1: return .('G', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6G10X6B10X6A10X6_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UNORM, -1);
			case 1: return .('G', .VK_10, .UNORM, -1);
			case 2: return .('B', .VK_10, .UNORM, -1);
			case 3: return .('A', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, -1);
			case 1: return .('B', .VK_10, .UNORM, -1);
			case 2: return .('G', .VK_10, .UNORM, -1);
			case 3: return .('R', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('B', .VK_10, .UNORM, -1);
			case 1: return .('G', .VK_10, .UNORM, -1);
			case 2: return .('R', .VK_10, .UNORM, -1);
			case 3: return .('G', .VK_10, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4G12X4_UNORM_2PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UNORM, -1);
			case 1: return .('G', .VK_12, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4G12X4B12X4A12X4_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UNORM, -1);
			case 1: return .('G', .VK_12, .UNORM, -1);
			case 2: return .('B', .VK_12, .UNORM, -1);
			case 3: return .('A', .VK_12, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, -1);
			case 1: return .('B', .VK_12, .UNORM, -1);
			case 2: return .('G', .VK_12, .UNORM, -1);
			case 3: return .('R', .VK_12, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
			switch (idx)
			{
			case 0: return .('B', .VK_12, .UNORM, -1);
			case 1: return .('G', .VK_12, .UNORM, -1);
			case 2: return .('R', .VK_12, .UNORM, -1);
			case 3: return .('G', .VK_12, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G16B16G16R16_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, -1);
			case 1: return .('B', .VK_16, .UNORM, -1);
			case 2: return .('G', .VK_16, .UNORM, -1);
			case 3: return .('R', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .B16G16R16G16_422_UNORM:
			switch (idx)
			{
			case 0: return .('B', .VK_16, .UNORM, -1);
			case 1: return .('G', .VK_16, .UNORM, -1);
			case 2: return .('R', .VK_16, .UNORM, -1);
			case 3: return .('G', .VK_16, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16_R16_3PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16R16_2PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16_R16_3PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16R16_2PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16_R16_3PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 2);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC1_2BPP_UNORM_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC1_4BPP_UNORM_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC2_2BPP_UNORM_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC2_4BPP_UNORM_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .UNORM, -1);
			case 1: return .('G', .COMPRESSED, .UNORM, -1);
			case 2: return .('B', .COMPRESSED, .UNORM, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC1_2BPP_SRGB_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC1_4BPP_SRGB_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC2_2BPP_SRGB_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .PVRTC2_4BPP_SRGB_BLOCK_IMG:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SRGB, -1);
			case 1: return .('G', .COMPRESSED, .SRGB, -1);
			case 2: return .('B', .COMPRESSED, .SRGB, -1);
			case 3: return .('A', .COMPRESSED, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_4x4_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x4_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_5x5_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x5_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_6x6_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x5_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x6_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_8x8_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x5_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x6_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x8_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_10x10_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x10_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .ASTC_12x12_SFLOAT_BLOCK:
			switch (idx)
			{
			case 0: return .('R', .COMPRESSED, .SFLOAT, -1);
			case 1: return .('G', .COMPRESSED, .SFLOAT, -1);
			case 2: return .('B', .COMPRESSED, .SFLOAT, -1);
			case 3: return .('A', .COMPRESSED, .SFLOAT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G8_B8R8_2PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_8, .UNORM, 0);
			case 1: return .('B', .VK_8, .UNORM, 1);
			case 2: return .('R', .VK_8, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_10, .UNORM, 0);
			case 1: return .('B', .VK_10, .UNORM, 1);
			case 2: return .('R', .VK_10, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .('G', .VK_12, .UNORM, 0);
			case 1: return .('B', .VK_12, .UNORM, 1);
			case 2: return .('R', .VK_12, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G16_B16R16_2PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .('G', .VK_16, .UNORM, 0);
			case 1: return .('B', .VK_16, .UNORM, 1);
			case 2: return .('R', .VK_16, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .A4R4G4B4_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('A', .VK_4, .UNORM, -1);
			case 1: return .('R', .VK_4, .UNORM, -1);
			case 2: return .('G', .VK_4, .UNORM, -1);
			case 3: return .('B', .VK_4, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .A4B4G4R4_UNORM_PACK16:
			switch (idx)
			{
			case 0: return .('A', .VK_4, .UNORM, -1);
			case 1: return .('B', .VK_4, .UNORM, -1);
			case 2: return .('G', .VK_4, .UNORM, -1);
			case 3: return .('R', .VK_4, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R16G16_SFIXED5_NV:
			switch (idx)
			{
			case 0: return .('R', .VK_16, .SFIXED5, -1);
			case 1: return .('G', .VK_16, .SFIXED5, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6_UINT_PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6G10X6_UINT_2PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UINT, -1);
			case 1: return .('G', .VK_10, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_10, .UINT, -1);
			case 1: return .('G', .VK_10, .UINT, -1);
			case 2: return .('B', .VK_10, .UINT, -1);
			case 3: return .('A', .VK_10, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4_UINT_PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4G12X4_UINT_2PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UINT, -1);
			case 1: return .('G', .VK_12, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_12, .UINT, -1);
			case 1: return .('G', .VK_12, .UINT, -1);
			case 2: return .('B', .VK_12, .UINT, -1);
			case 3: return .('A', .VK_12, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2_UINT_PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2G14X2_UINT_2PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UINT, -1);
			case 1: return .('G', .VK_14, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UINT, -1);
			case 1: return .('G', .VK_14, .UINT, -1);
			case 2: return .('B', .VK_14, .UINT, -1);
			case 3: return .('A', .VK_14, .UINT, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2_UNORM_PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2G14X2_UNORM_2PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UNORM, -1);
			case 1: return .('G', .VK_14, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_14, .UNORM, -1);
			case 1: return .('G', .VK_14, .UNORM, -1);
			case 2: return .('B', .VK_14, .UNORM, -1);
			case 3: return .('A', .VK_14, .UNORM, -1);
			default: Runtime.FatalError("No such component");
			}
		case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM:
			switch (idx)
			{
			case 0: return .('G', .VK_14, .UNORM, 0);
			case 1: return .('B', .VK_14, .UNORM, 1);
			case 2: return .('R', .VK_14, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM:
			switch (idx)
			{
			case 0: return .('G', .VK_14, .UNORM, 0);
			case 1: return .('B', .VK_14, .UNORM, 1);
			case 2: return .('R', .VK_14, .UNORM, 1);
			default: Runtime.FatalError("No such component");
			}
		case .R8_BOOL_ARM:
			switch (idx)
			{
			case 0: return .('R', .VK_8, .BOOL, -1);
			default: Runtime.FatalError("No such component");
			}
		}
	}

	public ComponentMetadata GetComponent(char8 name)
	{
		switch (this)
		{
		case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
		case .R4G4_UNORM_PACK8:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R4G4B4A4_UNORM_PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B4G4R4A4_UNORM_PACK16:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R5G6B5_UNORM_PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B5G6R5_UNORM_PACK16:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R5G5B5A1_UNORM_PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B5G5R5A1_UNORM_PACK16:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A1R5G5B5_UNORM_PACK16:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A1B5G5R5_UNORM_PACK16:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8_UNORM:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_SRGB:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8_SRGB:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8_SRGB:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_UNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_SNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_USCALED:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_SSCALED:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_UINT:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_SINT:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8_SRGB:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8G8B8A8_SRGB:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_UNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_SNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_USCALED:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_SSCALED:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_UINT:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_SINT:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8A8_SRGB:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_UNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_SNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_USCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_SSCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_UINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_SINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A8B8G8R8_SRGB_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_UNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_SNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_USCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_SSCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_UINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2R10G10B10_SINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_UNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_SNORM_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_USCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_SSCALED_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_UINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A2B10G10R10_SINT_PACK32:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_UNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_SNORM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_USCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_SSCALED:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16B16A16_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32A32_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32A32_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R32G32B32A32_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64A64_UINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64A64_SINT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R64G64B64A64_SFLOAT:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B10G11R11_UFLOAT_PACK32:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .E5B9G9R9_UFLOAT_PACK32:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .D16_UNORM:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .X8_D24_UNORM_PACK32:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .D32_SFLOAT:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .S8_UINT:
			switch (name)
			{
			case 'S': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .D16_UNORM_S8_UINT:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			case 'S': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .D24_UNORM_S8_UINT:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			case 'S': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .D32_SFLOAT_S8_UINT:
			switch (name)
			{
			case 'D': return [Inline]GetComponent(0);
			case 'S': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC1_RGB_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC1_RGB_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC1_RGBA_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC1_RGBA_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC2_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC2_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC3_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC3_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC4_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC4_SNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC5_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC5_SNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC6H_UFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC6H_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC7_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .BC7_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8A1_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8A1_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8A8_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ETC2_R8G8B8A8_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .EAC_R11_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .EAC_R11_SNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .EAC_R11G11_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .EAC_R11G11_SNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_4x4_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_4x4_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x4_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x4_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x5_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x5_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x5_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x5_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x6_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x6_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x5_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x5_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x6_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x6_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x8_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x8_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x5_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x5_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x6_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x6_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x8_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x8_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x10_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x10_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x10_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x10_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x12_UNORM_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x12_SRGB_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8B8G8R8_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B8G8R8G8_422_UNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8_R8_3PLANE_420_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_420_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8_R8_3PLANE_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8_R8_3PLANE_444_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6_UNORM_PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6G10X6_UNORM_2PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6G10X6B10X6A10X6_UNORM_4PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4_UNORM_PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4G12X4_UNORM_2PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4G12X4B12X4A12X4_UNORM_4PACK16:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16B16G16R16_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .B16G16R16G16_422_UNORM:
			switch (name)
			{
			case 'B': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_420_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_420_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_422_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_444_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC1_2BPP_UNORM_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC1_4BPP_UNORM_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC2_2BPP_UNORM_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC2_4BPP_UNORM_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC1_2BPP_SRGB_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC1_4BPP_SRGB_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC2_2BPP_SRGB_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .PVRTC2_4BPP_SRGB_BLOCK_IMG:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_4x4_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x4_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_5x5_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x5_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_6x6_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x5_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x6_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_8x8_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x5_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x6_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x8_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_10x10_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x10_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .ASTC_12x12_SFLOAT_BLOCK:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_444_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_444_UNORM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .A4R4G4B4_UNORM_PACK16:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'R': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'B': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .A4B4G4R4_UNORM_PACK16:
			switch (name)
			{
			case 'A': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'G': return [Inline]GetComponent(2);
			case 'R': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R16G16_SFIXED5_NV:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6_UINT_PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6G10X6_UINT_2PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4_UINT_PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4G12X4_UINT_2PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2_UINT_PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2G14X2_UINT_2PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2_UNORM_PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2G14X2_UNORM_2PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			default: Runtime.FatalError("Index out of range");
			}
		case .R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			case 'G': return [Inline]GetComponent(1);
			case 'B': return [Inline]GetComponent(2);
			case 'A': return [Inline]GetComponent(3);
			default: Runtime.FatalError("Index out of range");
			}
		case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM:
			switch (name)
			{
			case 'G': return [Inline]GetComponent(0);
			case 'B': return [Inline]GetComponent(1);
			case 'R': return [Inline]GetComponent(2);
			default: Runtime.FatalError("Index out of range");
			}
		case .R8_BOOL_ARM:
			switch (name)
			{
			case 'R': return [Inline]GetComponent(0);
			default: Runtime.FatalError("Index out of range");
			}
		}
	}

	public int PlaneCount
	{
		get
		{
			switch (this)
			{
			case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
			case .G8_B8_R8_3PLANE_420_UNORM: return 3;
			case .G8_B8R8_2PLANE_420_UNORM: return 2;
			case .G8_B8_R8_3PLANE_422_UNORM: return 3;
			case .G8_B8R8_2PLANE_422_UNORM: return 2;
			case .G8_B8_R8_3PLANE_444_UNORM: return 3;
			case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return 3;
			case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return 2;
			case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return 3;
			case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return 2;
			case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return 3;
			case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return 3;
			case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return 2;
			case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return 3;
			case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return 2;
			case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return 3;
			case .G16_B16_R16_3PLANE_420_UNORM: return 3;
			case .G16_B16R16_2PLANE_420_UNORM: return 2;
			case .G16_B16_R16_3PLANE_422_UNORM: return 3;
			case .G16_B16R16_2PLANE_422_UNORM: return 2;
			case .G16_B16_R16_3PLANE_444_UNORM: return 3;
			case .G8_B8R8_2PLANE_444_UNORM: return 2;
			case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return 2;
			case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return 2;
			case .G16_B16R16_2PLANE_444_UNORM: return 2;
			case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM: return 2;
			case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM: return 2;
			default: return 0;
			}
		}
	}

	public PlaneMetadata GetPlane(int idx)
	{
		switch (this)
		{
		case .UNDEFINED: Runtime.FatalError("Attempted to access format metadata for VK_FORMAT_UNDEFINED");
		case .G8_B8_R8_3PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 2, 2, .R8_UNORM);
			case 2: return .(idx, 2, 2, .R8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 2, 2, .R8G8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8_R8_3PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 2, 1, .R8_UNORM);
			case 2: return .(idx, 2, 1, .R8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 2, 1, .R8G8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8_R8_3PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 1, 1, .R8_UNORM);
			case 2: return .(idx, 1, 1, .R8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 2, 2, .R10X6_UNORM_PACK16);
			case 2: return .(idx, 2, 2, .R10X6_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 2, 2, .R10X6G10X6_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 2, 1, .R10X6_UNORM_PACK16);
			case 2: return .(idx, 2, 1, .R10X6_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 2, 1, .R10X6G10X6_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 2: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 2, 2, .R12X4_UNORM_PACK16);
			case 2: return .(idx, 2, 2, .R12X4_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 2, 2, .R12X4G12X4_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 2, 1, .R12X4_UNORM_PACK16);
			case 2: return .(idx, 2, 1, .R12X4_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 2, 1, .R12X4G12X4_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 2: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 2, 2, .R16_UNORM);
			case 2: return .(idx, 2, 2, .R16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_420_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 2, 2, .R16G16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 2, 1, .R16_UNORM);
			case 2: return .(idx, 2, 1, .R16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_422_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 2, 1, .R16G16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16_R16_3PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 1, 1, .R16_UNORM);
			case 2: return .(idx, 1, 1, .R16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G8_B8R8_2PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R8_UNORM);
			case 1: return .(idx, 1, 1, .R8G8_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R10X6_UNORM_PACK16);
			case 1: return .(idx, 1, 1, .R10X6G10X6_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R12X4_UNORM_PACK16);
			case 1: return .(idx, 1, 1, .R12X4G12X4_UNORM_2PACK16);
			default: Runtime.FatalError("Index out of range");
			}
		case .G16_B16R16_2PLANE_444_UNORM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R16_UNORM);
			case 1: return .(idx, 1, 1, .R16G16_UNORM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R14X2_UNORM_PACK16_ARM);
			case 1: return .(idx, 2, 2, .R14X2G14X2_UNORM_2PACK16_ARM);
			default: Runtime.FatalError("Index out of range");
			}
		case .G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM:
			switch (idx)
			{
			case 0: return .(idx, 1, 1, .R14X2_UNORM_PACK16_ARM);
			case 1: return .(idx, 2, 1, .R14X2G14X2_UNORM_2PACK16_ARM);
			default: Runtime.FatalError("Index out of range");
			}
		default: Runtime.FatalError("Index out of range");
		}
	}
}

extension VkStructureType
{
	public Type VkType
	{
		get
		{
			switch (this)
			{
			case .VkApplicationInfo: return typeof(VkApplicationInfo);
			case .VkInstanceCreateInfo: return typeof(VkInstanceCreateInfo);
			case .VkDeviceQueueCreateInfo: return typeof(VkDeviceQueueCreateInfo);
			case .VkDeviceCreateInfo: return typeof(VkDeviceCreateInfo);
			case .VkSubmitInfo: return typeof(VkSubmitInfo);
			case .VkMemoryAllocateInfo: return typeof(VkMemoryAllocateInfo);
			case .VkMappedMemoryRange: return typeof(VkMappedMemoryRange);
			case .VkBindSparseInfo: return typeof(VkBindSparseInfo);
			case .VkFenceCreateInfo: return typeof(VkFenceCreateInfo);
			case .VkSemaphoreCreateInfo: return typeof(VkSemaphoreCreateInfo);
			case .VkEventCreateInfo: return typeof(VkEventCreateInfo);
			case .VkQueryPoolCreateInfo: return typeof(VkQueryPoolCreateInfo);
			case .VkBufferCreateInfo: return typeof(VkBufferCreateInfo);
			case .VkBufferViewCreateInfo: return typeof(VkBufferViewCreateInfo);
			case .VkImageCreateInfo: return typeof(VkImageCreateInfo);
			case .VkImageViewCreateInfo: return typeof(VkImageViewCreateInfo);
			case .VkShaderModuleCreateInfo: return typeof(VkShaderModuleCreateInfo);
			case .VkPipelineCacheCreateInfo: return typeof(VkPipelineCacheCreateInfo);
			case .VkPipelineShaderStageCreateInfo: return typeof(VkPipelineShaderStageCreateInfo);
			case .VkPipelineVertexInputStateCreateInfo: return typeof(VkPipelineVertexInputStateCreateInfo);
			case .VkPipelineInputAssemblyStateCreateInfo: return typeof(VkPipelineInputAssemblyStateCreateInfo);
			case .VkPipelineTessellationStateCreateInfo: return typeof(VkPipelineTessellationStateCreateInfo);
			case .VkPipelineViewportStateCreateInfo: return typeof(VkPipelineViewportStateCreateInfo);
			case .VkPipelineRasterizationStateCreateInfo: return typeof(VkPipelineRasterizationStateCreateInfo);
			case .VkPipelineMultisampleStateCreateInfo: return typeof(VkPipelineMultisampleStateCreateInfo);
			case .VkPipelineDepthStencilStateCreateInfo: return typeof(VkPipelineDepthStencilStateCreateInfo);
			case .VkPipelineColorBlendStateCreateInfo: return typeof(VkPipelineColorBlendStateCreateInfo);
			case .VkPipelineDynamicStateCreateInfo: return typeof(VkPipelineDynamicStateCreateInfo);
			case .VkGraphicsPipelineCreateInfo: return typeof(VkGraphicsPipelineCreateInfo);
			case .VkComputePipelineCreateInfo: return typeof(VkComputePipelineCreateInfo);
			case .VkPipelineLayoutCreateInfo: return typeof(VkPipelineLayoutCreateInfo);
			case .VkSamplerCreateInfo: return typeof(VkSamplerCreateInfo);
			case .VkDescriptorSetLayoutCreateInfo: return typeof(VkDescriptorSetLayoutCreateInfo);
			case .VkDescriptorPoolCreateInfo: return typeof(VkDescriptorPoolCreateInfo);
			case .VkDescriptorSetAllocateInfo: return typeof(VkDescriptorSetAllocateInfo);
			case .VkWriteDescriptorSet: return typeof(VkWriteDescriptorSet);
			case .VkCopyDescriptorSet: return typeof(VkCopyDescriptorSet);
			case .VkFramebufferCreateInfo: return typeof(VkFramebufferCreateInfo);
			case .VkRenderPassCreateInfo: return typeof(VkRenderPassCreateInfo);
			case .VkCommandPoolCreateInfo: return typeof(VkCommandPoolCreateInfo);
			case .VkCommandBufferAllocateInfo: return typeof(VkCommandBufferAllocateInfo);
			case .VkCommandBufferInheritanceInfo: return typeof(VkCommandBufferInheritanceInfo);
			case .VkCommandBufferBeginInfo: return typeof(VkCommandBufferBeginInfo);
			case .VkRenderPassBeginInfo: return typeof(VkRenderPassBeginInfo);
			case .VkBufferMemoryBarrier: return typeof(VkBufferMemoryBarrier);
			case .VkImageMemoryBarrier: return typeof(VkImageMemoryBarrier);
			case .VkMemoryBarrier: return typeof(VkMemoryBarrier);
			case .VkPhysicalDeviceSubgroupProperties: return typeof(VkPhysicalDeviceSubgroupProperties);
			case .VkBindBufferMemoryInfo: return typeof(VkBindBufferMemoryInfo);
			case .VkBindImageMemoryInfo: return typeof(VkBindImageMemoryInfo);
			case .VkPhysicalDevice16bitStorageFeatures: return typeof(VkPhysicalDevice16BitStorageFeatures);
			case .VkMemoryDedicatedRequirements: return typeof(VkMemoryDedicatedRequirements);
			case .VkMemoryDedicatedAllocateInfo: return typeof(VkMemoryDedicatedAllocateInfo);
			case .VkMemoryAllocateFlagsInfo: return typeof(VkMemoryAllocateFlagsInfo);
			case .VkDeviceGroupRenderPassBeginInfo: return typeof(VkDeviceGroupRenderPassBeginInfo);
			case .VkDeviceGroupCommandBufferBeginInfo: return typeof(VkDeviceGroupCommandBufferBeginInfo);
			case .VkDeviceGroupSubmitInfo: return typeof(VkDeviceGroupSubmitInfo);
			case .VkDeviceGroupBindSparseInfo: return typeof(VkDeviceGroupBindSparseInfo);
			case .VkBindBufferMemoryDeviceGroupInfo: return typeof(VkBindBufferMemoryDeviceGroupInfo);
			case .VkBindImageMemoryDeviceGroupInfo: return typeof(VkBindImageMemoryDeviceGroupInfo);
			case .VkPhysicalDeviceGroupProperties: return typeof(VkPhysicalDeviceGroupProperties);
			case .VkDeviceGroupDeviceCreateInfo: return typeof(VkDeviceGroupDeviceCreateInfo);
			case .VkBufferMemoryRequirementsInfo2: return typeof(VkBufferMemoryRequirementsInfo2);
			case .VkImageMemoryRequirementsInfo2: return typeof(VkImageMemoryRequirementsInfo2);
			case .VkImageSparseMemoryRequirementsInfo2: return typeof(VkImageSparseMemoryRequirementsInfo2);
			case .VkMemoryRequirements2: return typeof(VkMemoryRequirements2);
			case .VkSparseImageMemoryRequirements2: return typeof(VkSparseImageMemoryRequirements2);
			case .VkPhysicalDeviceFeatures2: return typeof(VkPhysicalDeviceFeatures2);
			case .VkPhysicalDeviceProperties2: return typeof(VkPhysicalDeviceProperties2);
			case .VkFormatProperties2: return typeof(VkFormatProperties2);
			case .VkImageFormatProperties2: return typeof(VkImageFormatProperties2);
			case .VkPhysicalDeviceImageFormatInfo2: return typeof(VkPhysicalDeviceImageFormatInfo2);
			case .VkQueueFamilyProperties2: return typeof(VkQueueFamilyProperties2);
			case .VkPhysicalDeviceMemoryProperties2: return typeof(VkPhysicalDeviceMemoryProperties2);
			case .VkSparseImageFormatProperties2: return typeof(VkSparseImageFormatProperties2);
			case .VkPhysicalDeviceSparseImageFormatInfo2: return typeof(VkPhysicalDeviceSparseImageFormatInfo2);
			case .VkPhysicalDevicePointClippingProperties: return typeof(VkPhysicalDevicePointClippingProperties);
			case .VkRenderPassInputAttachmentAspectCreateInfo: return typeof(VkRenderPassInputAttachmentAspectCreateInfo);
			case .VkImageViewUsageCreateInfo: return typeof(VkImageViewUsageCreateInfo);
			case .VkPipelineTessellationDomainOriginStateCreateInfo: return typeof(VkPipelineTessellationDomainOriginStateCreateInfo);
			case .VkRenderPassMultiviewCreateInfo: return typeof(VkRenderPassMultiviewCreateInfo);
			case .VkPhysicalDeviceMultiviewFeatures: return typeof(VkPhysicalDeviceMultiviewFeatures);
			case .VkPhysicalDeviceMultiviewProperties: return typeof(VkPhysicalDeviceMultiviewProperties);
			case .VkPhysicalDeviceVariablePointersFeatures: return typeof(VkPhysicalDeviceVariablePointersFeatures);
			case .VkProtectedSubmitInfo: return typeof(VkProtectedSubmitInfo);
			case .VkPhysicalDeviceProtectedMemoryFeatures: return typeof(VkPhysicalDeviceProtectedMemoryFeatures);
			case .VkPhysicalDeviceProtectedMemoryProperties: return typeof(VkPhysicalDeviceProtectedMemoryProperties);
			case .VkDeviceQueueInfo2: return typeof(VkDeviceQueueInfo2);
			case .VkSamplerYcbcrConversionCreateInfo: return typeof(VkSamplerYcbcrConversionCreateInfo);
			case .VkSamplerYcbcrConversionInfo: return typeof(VkSamplerYcbcrConversionInfo);
			case .VkBindImagePlaneMemoryInfo: return typeof(VkBindImagePlaneMemoryInfo);
			case .VkImagePlaneMemoryRequirementsInfo: return typeof(VkImagePlaneMemoryRequirementsInfo);
			case .VkPhysicalDeviceSamplerYcbcrConversionFeatures: return typeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures);
			case .VkSamplerYcbcrConversionImageFormatProperties: return typeof(VkSamplerYcbcrConversionImageFormatProperties);
			case .VkDescriptorUpdateTemplateCreateInfo: return typeof(VkDescriptorUpdateTemplateCreateInfo);
			case .VkPhysicalDeviceExternalImageFormatInfo: return typeof(VkPhysicalDeviceExternalImageFormatInfo);
			case .VkExternalImageFormatProperties: return typeof(VkExternalImageFormatProperties);
			case .VkPhysicalDeviceExternalBufferInfo: return typeof(VkPhysicalDeviceExternalBufferInfo);
			case .VkExternalBufferProperties: return typeof(VkExternalBufferProperties);
			case .VkPhysicalDeviceIdProperties: return typeof(VkPhysicalDeviceIDProperties);
			case .VkExternalMemoryBufferCreateInfo: return typeof(VkExternalMemoryBufferCreateInfo);
			case .VkExternalMemoryImageCreateInfo: return typeof(VkExternalMemoryImageCreateInfo);
			case .VkExportMemoryAllocateInfo: return typeof(VkExportMemoryAllocateInfo);
			case .VkPhysicalDeviceExternalFenceInfo: return typeof(VkPhysicalDeviceExternalFenceInfo);
			case .VkExternalFenceProperties: return typeof(VkExternalFenceProperties);
			case .VkExportFenceCreateInfo: return typeof(VkExportFenceCreateInfo);
			case .VkExportSemaphoreCreateInfo: return typeof(VkExportSemaphoreCreateInfo);
			case .VkPhysicalDeviceExternalSemaphoreInfo: return typeof(VkPhysicalDeviceExternalSemaphoreInfo);
			case .VkExternalSemaphoreProperties: return typeof(VkExternalSemaphoreProperties);
			case .VkPhysicalDeviceMaintenance3Properties: return typeof(VkPhysicalDeviceMaintenance3Properties);
			case .VkDescriptorSetLayoutSupport: return typeof(VkDescriptorSetLayoutSupport);
			case .VkPhysicalDeviceShaderDrawParametersFeatures: return typeof(VkPhysicalDeviceShaderDrawParametersFeatures);
			case .VkPhysicalDeviceVulkan11Features: return typeof(VkPhysicalDeviceVulkan11Features);
			case .VkPhysicalDeviceVulkan11Properties: return typeof(VkPhysicalDeviceVulkan11Properties);
			case .VkPhysicalDeviceVulkan12Features: return typeof(VkPhysicalDeviceVulkan12Features);
			case .VkPhysicalDeviceVulkan12Properties: return typeof(VkPhysicalDeviceVulkan12Properties);
			case .VkImageFormatListCreateInfo: return typeof(VkImageFormatListCreateInfo);
			case .VkAttachmentDescription2: return typeof(VkAttachmentDescription2);
			case .VkAttachmentReference2: return typeof(VkAttachmentReference2);
			case .VkSubpassDescription2: return typeof(VkSubpassDescription2);
			case .VkSubpassDependency2: return typeof(VkSubpassDependency2);
			case .VkRenderPassCreateInfo2: return typeof(VkRenderPassCreateInfo2);
			case .VkSubpassBeginInfo: return typeof(VkSubpassBeginInfo);
			case .VkSubpassEndInfo: return typeof(VkSubpassEndInfo);
			case .VkPhysicalDevice8bitStorageFeatures: return typeof(VkPhysicalDevice8BitStorageFeatures);
			case .VkPhysicalDeviceDriverProperties: return typeof(VkPhysicalDeviceDriverProperties);
			case .VkPhysicalDeviceShaderAtomicInt64Features: return typeof(VkPhysicalDeviceShaderAtomicInt64Features);
			case .VkPhysicalDeviceShaderFloat16Int8Features: return typeof(VkPhysicalDeviceShaderFloat16Int8Features);
			case .VkPhysicalDeviceFloatControlsProperties: return typeof(VkPhysicalDeviceFloatControlsProperties);
			case .VkDescriptorSetLayoutBindingFlagsCreateInfo: return typeof(VkDescriptorSetLayoutBindingFlagsCreateInfo);
			case .VkPhysicalDeviceDescriptorIndexingFeatures: return typeof(VkPhysicalDeviceDescriptorIndexingFeatures);
			case .VkPhysicalDeviceDescriptorIndexingProperties: return typeof(VkPhysicalDeviceDescriptorIndexingProperties);
			case .VkDescriptorSetVariableDescriptorCountAllocateInfo: return typeof(VkDescriptorSetVariableDescriptorCountAllocateInfo);
			case .VkDescriptorSetVariableDescriptorCountLayoutSupport: return typeof(VkDescriptorSetVariableDescriptorCountLayoutSupport);
			case .VkPhysicalDeviceDepthStencilResolveProperties: return typeof(VkPhysicalDeviceDepthStencilResolveProperties);
			case .VkSubpassDescriptionDepthStencilResolve: return typeof(VkSubpassDescriptionDepthStencilResolve);
			case .VkPhysicalDeviceScalarBlockLayoutFeatures: return typeof(VkPhysicalDeviceScalarBlockLayoutFeatures);
			case .VkImageStencilUsageCreateInfo: return typeof(VkImageStencilUsageCreateInfo);
			case .VkPhysicalDeviceSamplerFilterMinmaxProperties: return typeof(VkPhysicalDeviceSamplerFilterMinmaxProperties);
			case .VkSamplerReductionModeCreateInfo: return typeof(VkSamplerReductionModeCreateInfo);
			case .VkPhysicalDeviceVulkanMemoryModelFeatures: return typeof(VkPhysicalDeviceVulkanMemoryModelFeatures);
			case .VkPhysicalDeviceImagelessFramebufferFeatures: return typeof(VkPhysicalDeviceImagelessFramebufferFeatures);
			case .VkFramebufferAttachmentsCreateInfo: return typeof(VkFramebufferAttachmentsCreateInfo);
			case .VkFramebufferAttachmentImageInfo: return typeof(VkFramebufferAttachmentImageInfo);
			case .VkRenderPassAttachmentBeginInfo: return typeof(VkRenderPassAttachmentBeginInfo);
			case .VkPhysicalDeviceUniformBufferStandardLayoutFeatures: return typeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures);
			case .VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures: return typeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures);
			case .VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures: return typeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures);
			case .VkAttachmentReferenceStencilLayout: return typeof(VkAttachmentReferenceStencilLayout);
			case .VkAttachmentDescriptionStencilLayout: return typeof(VkAttachmentDescriptionStencilLayout);
			case .VkPhysicalDeviceHostQueryResetFeatures: return typeof(VkPhysicalDeviceHostQueryResetFeatures);
			case .VkPhysicalDeviceTimelineSemaphoreFeatures: return typeof(VkPhysicalDeviceTimelineSemaphoreFeatures);
			case .VkPhysicalDeviceTimelineSemaphoreProperties: return typeof(VkPhysicalDeviceTimelineSemaphoreProperties);
			case .VkSemaphoreTypeCreateInfo: return typeof(VkSemaphoreTypeCreateInfo);
			case .VkTimelineSemaphoreSubmitInfo: return typeof(VkTimelineSemaphoreSubmitInfo);
			case .VkSemaphoreWaitInfo: return typeof(VkSemaphoreWaitInfo);
			case .VkSemaphoreSignalInfo: return typeof(VkSemaphoreSignalInfo);
			case .VkPhysicalDeviceBufferDeviceAddressFeatures: return typeof(VkPhysicalDeviceBufferDeviceAddressFeatures);
			case .VkBufferDeviceAddressInfo: return typeof(VkBufferDeviceAddressInfo);
			case .VkBufferOpaqueCaptureAddressCreateInfo: return typeof(VkBufferOpaqueCaptureAddressCreateInfo);
			case .VkMemoryOpaqueCaptureAddressAllocateInfo: return typeof(VkMemoryOpaqueCaptureAddressAllocateInfo);
			case .VkDeviceMemoryOpaqueCaptureAddressInfo: return typeof(VkDeviceMemoryOpaqueCaptureAddressInfo);
			case .VkPhysicalDeviceVulkan13Features: return typeof(VkPhysicalDeviceVulkan13Features);
			case .VkPhysicalDeviceVulkan13Properties: return typeof(VkPhysicalDeviceVulkan13Properties);
			case .VkPipelineCreationFeedbackCreateInfo: return typeof(VkPipelineCreationFeedbackCreateInfo);
			case .VkPhysicalDeviceShaderTerminateInvocationFeatures: return typeof(VkPhysicalDeviceShaderTerminateInvocationFeatures);
			case .VkPhysicalDeviceToolProperties: return typeof(VkPhysicalDeviceToolProperties);
			case .VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures: return typeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures);
			case .VkPhysicalDevicePrivateDataFeatures: return typeof(VkPhysicalDevicePrivateDataFeatures);
			case .VkDevicePrivateDataCreateInfo: return typeof(VkDevicePrivateDataCreateInfo);
			case .VkPrivateDataSlotCreateInfo: return typeof(VkPrivateDataSlotCreateInfo);
			case .VkPhysicalDevicePipelineCreationCacheControlFeatures: return typeof(VkPhysicalDevicePipelineCreationCacheControlFeatures);
			case .VkMemoryBarrier2: return typeof(VkMemoryBarrier2);
			case .VkBufferMemoryBarrier2: return typeof(VkBufferMemoryBarrier2);
			case .VkImageMemoryBarrier2: return typeof(VkImageMemoryBarrier2);
			case .VkDependencyInfo: return typeof(VkDependencyInfo);
			case .VkSubmitInfo2: return typeof(VkSubmitInfo2);
			case .VkSemaphoreSubmitInfo: return typeof(VkSemaphoreSubmitInfo);
			case .VkCommandBufferSubmitInfo: return typeof(VkCommandBufferSubmitInfo);
			case .VkPhysicalDeviceSynchronization2Features: return typeof(VkPhysicalDeviceSynchronization2Features);
			case .VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures: return typeof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures);
			case .VkPhysicalDeviceImageRobustnessFeatures: return typeof(VkPhysicalDeviceImageRobustnessFeatures);
			case .VkCopyBufferInfo2: return typeof(VkCopyBufferInfo2);
			case .VkCopyImageInfo2: return typeof(VkCopyImageInfo2);
			case .VkCopyBufferToImageInfo2: return typeof(VkCopyBufferToImageInfo2);
			case .VkCopyImageToBufferInfo2: return typeof(VkCopyImageToBufferInfo2);
			case .VkBlitImageInfo2: return typeof(VkBlitImageInfo2);
			case .VkResolveImageInfo2: return typeof(VkResolveImageInfo2);
			case .VkBufferCopy2: return typeof(VkBufferCopy2);
			case .VkImageCopy2: return typeof(VkImageCopy2);
			case .VkImageBlit2: return typeof(VkImageBlit2);
			case .VkBufferImageCopy2: return typeof(VkBufferImageCopy2);
			case .VkImageResolve2: return typeof(VkImageResolve2);
			case .VkPhysicalDeviceSubgroupSizeControlProperties: return typeof(VkPhysicalDeviceSubgroupSizeControlProperties);
			case .VkPipelineShaderStageRequiredSubgroupSizeCreateInfo: return typeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo);
			case .VkPhysicalDeviceSubgroupSizeControlFeatures: return typeof(VkPhysicalDeviceSubgroupSizeControlFeatures);
			case .VkPhysicalDeviceInlineUniformBlockFeatures: return typeof(VkPhysicalDeviceInlineUniformBlockFeatures);
			case .VkPhysicalDeviceInlineUniformBlockProperties: return typeof(VkPhysicalDeviceInlineUniformBlockProperties);
			case .VkWriteDescriptorSetInlineUniformBlock: return typeof(VkWriteDescriptorSetInlineUniformBlock);
			case .VkDescriptorPoolInlineUniformBlockCreateInfo: return typeof(VkDescriptorPoolInlineUniformBlockCreateInfo);
			case .VkPhysicalDeviceTextureCompressionAstcHdrFeatures: return typeof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures);
			case .VkRenderingInfo: return typeof(VkRenderingInfo);
			case .VkRenderingAttachmentInfo: return typeof(VkRenderingAttachmentInfo);
			case .VkPipelineRenderingCreateInfo: return typeof(VkPipelineRenderingCreateInfo);
			case .VkPhysicalDeviceDynamicRenderingFeatures: return typeof(VkPhysicalDeviceDynamicRenderingFeatures);
			case .VkCommandBufferInheritanceRenderingInfo: return typeof(VkCommandBufferInheritanceRenderingInfo);
			case .VkPhysicalDeviceShaderIntegerDotProductFeatures: return typeof(VkPhysicalDeviceShaderIntegerDotProductFeatures);
			case .VkPhysicalDeviceShaderIntegerDotProductProperties: return typeof(VkPhysicalDeviceShaderIntegerDotProductProperties);
			case .VkPhysicalDeviceTexelBufferAlignmentProperties: return typeof(VkPhysicalDeviceTexelBufferAlignmentProperties);
			case .VkFormatProperties3: return typeof(VkFormatProperties3);
			case .VkPhysicalDeviceMaintenance4Features: return typeof(VkPhysicalDeviceMaintenance4Features);
			case .VkPhysicalDeviceMaintenance4Properties: return typeof(VkPhysicalDeviceMaintenance4Properties);
			case .VkDeviceBufferMemoryRequirements: return typeof(VkDeviceBufferMemoryRequirements);
			case .VkDeviceImageMemoryRequirements: return typeof(VkDeviceImageMemoryRequirements);
			case .VkPhysicalDeviceVulkan14Features: return typeof(VkPhysicalDeviceVulkan14Features);
			case .VkPhysicalDeviceVulkan14Properties: return typeof(VkPhysicalDeviceVulkan14Properties);
			case .VkDeviceQueueGlobalPriorityCreateInfo: return typeof(VkDeviceQueueGlobalPriorityCreateInfo);
			case .VkPhysicalDeviceGlobalPriorityQueryFeatures: return typeof(VkPhysicalDeviceGlobalPriorityQueryFeatures);
			case .VkQueueFamilyGlobalPriorityProperties: return typeof(VkQueueFamilyGlobalPriorityProperties);
			case .VkPhysicalDeviceShaderSubgroupRotateFeatures: return typeof(VkPhysicalDeviceShaderSubgroupRotateFeatures);
			case .VkPhysicalDeviceShaderFloatControls2Features: return typeof(VkPhysicalDeviceShaderFloatControls2Features);
			case .VkPhysicalDeviceShaderExpectAssumeFeatures: return typeof(VkPhysicalDeviceShaderExpectAssumeFeatures);
			case .VkPhysicalDeviceLineRasterizationFeatures: return typeof(VkPhysicalDeviceLineRasterizationFeatures);
			case .VkPipelineRasterizationLineStateCreateInfo: return typeof(VkPipelineRasterizationLineStateCreateInfo);
			case .VkPhysicalDeviceLineRasterizationProperties: return typeof(VkPhysicalDeviceLineRasterizationProperties);
			case .VkPhysicalDeviceVertexAttributeDivisorProperties: return typeof(VkPhysicalDeviceVertexAttributeDivisorProperties);
			case .VkPipelineVertexInputDivisorStateCreateInfo: return typeof(VkPipelineVertexInputDivisorStateCreateInfo);
			case .VkPhysicalDeviceVertexAttributeDivisorFeatures: return typeof(VkPhysicalDeviceVertexAttributeDivisorFeatures);
			case .VkPhysicalDeviceIndexTypeUint8Features: return typeof(VkPhysicalDeviceIndexTypeUint8Features);
			case .VkMemoryMapInfo: return typeof(VkMemoryMapInfo);
			case .VkMemoryUnmapInfo: return typeof(VkMemoryUnmapInfo);
			case .VkPhysicalDeviceMaintenance5Features: return typeof(VkPhysicalDeviceMaintenance5Features);
			case .VkPhysicalDeviceMaintenance5Properties: return typeof(VkPhysicalDeviceMaintenance5Properties);
			case .VkRenderingAreaInfo: return typeof(VkRenderingAreaInfo);
			case .VkDeviceImageSubresourceInfo: return typeof(VkDeviceImageSubresourceInfo);
			case .VkSubresourceLayout2: return typeof(VkSubresourceLayout2);
			case .VkImageSubresource2: return typeof(VkImageSubresource2);
			case .VkPipelineCreateFlags2CreateInfo: return typeof(VkPipelineCreateFlags2CreateInfo);
			case .VkBufferUsageFlags2CreateInfo: return typeof(VkBufferUsageFlags2CreateInfo);
			case .VkPhysicalDevicePushDescriptorProperties: return typeof(VkPhysicalDevicePushDescriptorProperties);
			case .VkPhysicalDeviceDynamicRenderingLocalReadFeatures: return typeof(VkPhysicalDeviceDynamicRenderingLocalReadFeatures);
			case .VkRenderingAttachmentLocationInfo: return typeof(VkRenderingAttachmentLocationInfo);
			case .VkRenderingInputAttachmentIndexInfo: return typeof(VkRenderingInputAttachmentIndexInfo);
			case .VkPhysicalDeviceMaintenance6Features: return typeof(VkPhysicalDeviceMaintenance6Features);
			case .VkPhysicalDeviceMaintenance6Properties: return typeof(VkPhysicalDeviceMaintenance6Properties);
			case .VkBindMemoryStatus: return typeof(VkBindMemoryStatus);
			case .VkBindDescriptorSetsInfo: return typeof(VkBindDescriptorSetsInfo);
			case .VkPushConstantsInfo: return typeof(VkPushConstantsInfo);
			case .VkPushDescriptorSetInfo: return typeof(VkPushDescriptorSetInfo);
			case .VkPushDescriptorSetWithTemplateInfo: return typeof(VkPushDescriptorSetWithTemplateInfo);
			case .VkPhysicalDevicePipelineProtectedAccessFeatures: return typeof(VkPhysicalDevicePipelineProtectedAccessFeatures);
			case .VkPipelineRobustnessCreateInfo: return typeof(VkPipelineRobustnessCreateInfo);
			case .VkPhysicalDevicePipelineRobustnessFeatures: return typeof(VkPhysicalDevicePipelineRobustnessFeatures);
			case .VkPhysicalDevicePipelineRobustnessProperties: return typeof(VkPhysicalDevicePipelineRobustnessProperties);
			case .VkPhysicalDeviceHostImageCopyFeatures: return typeof(VkPhysicalDeviceHostImageCopyFeatures);
			case .VkPhysicalDeviceHostImageCopyProperties: return typeof(VkPhysicalDeviceHostImageCopyProperties);
			case .VkMemoryToImageCopy: return typeof(VkMemoryToImageCopy);
			case .VkImageToMemoryCopy: return typeof(VkImageToMemoryCopy);
			case .VkCopyImageToMemoryInfo: return typeof(VkCopyImageToMemoryInfo);
			case .VkCopyMemoryToImageInfo: return typeof(VkCopyMemoryToImageInfo);
			case .VkHostImageLayoutTransitionInfo: return typeof(VkHostImageLayoutTransitionInfo);
			case .VkCopyImageToImageInfo: return typeof(VkCopyImageToImageInfo);
			case .VkSubresourceHostMemcpySize: return typeof(VkSubresourceHostMemcpySize);
			case .VkHostImageCopyDevicePerformanceQuery: return typeof(VkHostImageCopyDevicePerformanceQuery);
			case .VkSwapchainCreateInfoKHR: return typeof(VkSwapchainCreateInfoKHR);
			case .VkPresentInfoKHR: return typeof(VkPresentInfoKHR);
			case .VkDeviceGroupPresentCapabilitiesKHR: return typeof(VkDeviceGroupPresentCapabilitiesKHR);
			case .VkImageSwapchainCreateInfoKHR: return typeof(VkImageSwapchainCreateInfoKHR);
			case .VkBindImageMemorySwapchainInfoKHR: return typeof(VkBindImageMemorySwapchainInfoKHR);
			case .VkAcquireNextImageInfoKHR: return typeof(VkAcquireNextImageInfoKHR);
			case .VkDeviceGroupPresentInfoKHR: return typeof(VkDeviceGroupPresentInfoKHR);
			case .VkDeviceGroupSwapchainCreateInfoKHR: return typeof(VkDeviceGroupSwapchainCreateInfoKHR);
			case .VkDisplayModeCreateInfoKHR: return typeof(VkDisplayModeCreateInfoKHR);
			case .VkDisplaySurfaceCreateInfoKHR: return typeof(VkDisplaySurfaceCreateInfoKHR);
			case .VkDisplayPresentInfoKHR: return typeof(VkDisplayPresentInfoKHR);
			case .VkDebugReportCallbackCreateInfoEXT: return typeof(VkDebugReportCallbackCreateInfoEXT);
			case .VkPipelineRasterizationStateRasterizationOrderAMD: return typeof(VkPipelineRasterizationStateRasterizationOrderAMD);
			case .VkDebugMarkerObjectNameInfoEXT: return typeof(VkDebugMarkerObjectNameInfoEXT);
			case .VkDebugMarkerObjectTagInfoEXT: return typeof(VkDebugMarkerObjectTagInfoEXT);
			case .VkDebugMarkerMarkerInfoEXT: return typeof(VkDebugMarkerMarkerInfoEXT);
			case .VkVideoProfileInfoKHR: return typeof(VkVideoProfileInfoKHR);
			case .VkVideoCapabilitiesKHR: return typeof(VkVideoCapabilitiesKHR);
			case .VkVideoPictureResourceInfoKHR: return typeof(VkVideoPictureResourceInfoKHR);
			case .VkVideoSessionMemoryRequirementsKHR: return typeof(VkVideoSessionMemoryRequirementsKHR);
			case .VkBindVideoSessionMemoryInfoKHR: return typeof(VkBindVideoSessionMemoryInfoKHR);
			case .VkVideoSessionCreateInfoKHR: return typeof(VkVideoSessionCreateInfoKHR);
			case .VkVideoSessionParametersCreateInfoKHR: return typeof(VkVideoSessionParametersCreateInfoKHR);
			case .VkVideoSessionParametersUpdateInfoKHR: return typeof(VkVideoSessionParametersUpdateInfoKHR);
			case .VkVideoBeginCodingInfoKHR: return typeof(VkVideoBeginCodingInfoKHR);
			case .VkVideoEndCodingInfoKHR: return typeof(VkVideoEndCodingInfoKHR);
			case .VkVideoCodingControlInfoKHR: return typeof(VkVideoCodingControlInfoKHR);
			case .VkVideoReferenceSlotInfoKHR: return typeof(VkVideoReferenceSlotInfoKHR);
			case .VkQueueFamilyVideoPropertiesKHR: return typeof(VkQueueFamilyVideoPropertiesKHR);
			case .VkVideoProfileListInfoKHR: return typeof(VkVideoProfileListInfoKHR);
			case .VkPhysicalDeviceVideoFormatInfoKHR: return typeof(VkPhysicalDeviceVideoFormatInfoKHR);
			case .VkVideoFormatPropertiesKHR: return typeof(VkVideoFormatPropertiesKHR);
			case .VkQueueFamilyQueryResultStatusPropertiesKHR: return typeof(VkQueueFamilyQueryResultStatusPropertiesKHR);
			case .VkVideoDecodeInfoKHR: return typeof(VkVideoDecodeInfoKHR);
			case .VkVideoDecodeCapabilitiesKHR: return typeof(VkVideoDecodeCapabilitiesKHR);
			case .VkVideoDecodeUsageInfoKHR: return typeof(VkVideoDecodeUsageInfoKHR);
			case .VkDedicatedAllocationImageCreateInfoNV: return typeof(VkDedicatedAllocationImageCreateInfoNV);
			case .VkDedicatedAllocationBufferCreateInfoNV: return typeof(VkDedicatedAllocationBufferCreateInfoNV);
			case .VkDedicatedAllocationMemoryAllocateInfoNV: return typeof(VkDedicatedAllocationMemoryAllocateInfoNV);
			case .VkPhysicalDeviceTransformFeedbackFeaturesEXT: return typeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT);
			case .VkPhysicalDeviceTransformFeedbackPropertiesEXT: return typeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT);
			case .VkPipelineRasterizationStateStreamCreateInfoEXT: return typeof(VkPipelineRasterizationStateStreamCreateInfoEXT);
			case .VkCuModuleCreateInfoNVX: return typeof(VkCuModuleCreateInfoNVX);
			case .VkCuFunctionCreateInfoNVX: return typeof(VkCuFunctionCreateInfoNVX);
			case .VkCuLaunchInfoNVX: return typeof(VkCuLaunchInfoNVX);
			case .VkCuModuleTexturingModeCreateInfoNVX: return typeof(VkCuModuleTexturingModeCreateInfoNVX);
			case .VkImageViewHandleInfoNVX: return typeof(VkImageViewHandleInfoNVX);
			case .VkImageViewAddressPropertiesNVX: return typeof(VkImageViewAddressPropertiesNVX);
			case .VkVideoEncodeH264CapabilitiesKHR: return typeof(VkVideoEncodeH264CapabilitiesKHR);
			case .VkVideoEncodeH264SessionParametersCreateInfoKHR: return typeof(VkVideoEncodeH264SessionParametersCreateInfoKHR);
			case .VkVideoEncodeH264SessionParametersAddInfoKHR: return typeof(VkVideoEncodeH264SessionParametersAddInfoKHR);
			case .VkVideoEncodeH264PictureInfoKHR: return typeof(VkVideoEncodeH264PictureInfoKHR);
			case .VkVideoEncodeH264DpbSlotInfoKHR: return typeof(VkVideoEncodeH264DpbSlotInfoKHR);
			case .VkVideoEncodeH264NaluSliceInfoKHR: return typeof(VkVideoEncodeH264NaluSliceInfoKHR);
			case .VkVideoEncodeH264GopRemainingFrameInfoKHR: return typeof(VkVideoEncodeH264GopRemainingFrameInfoKHR);
			case .VkVideoEncodeH264ProfileInfoKHR: return typeof(VkVideoEncodeH264ProfileInfoKHR);
			case .VkVideoEncodeH264RateControlInfoKHR: return typeof(VkVideoEncodeH264RateControlInfoKHR);
			case .VkVideoEncodeH264RateControlLayerInfoKHR: return typeof(VkVideoEncodeH264RateControlLayerInfoKHR);
			case .VkVideoEncodeH264SessionCreateInfoKHR: return typeof(VkVideoEncodeH264SessionCreateInfoKHR);
			case .VkVideoEncodeH264QualityLevelPropertiesKHR: return typeof(VkVideoEncodeH264QualityLevelPropertiesKHR);
			case .VkVideoEncodeH264SessionParametersGetInfoKHR: return typeof(VkVideoEncodeH264SessionParametersGetInfoKHR);
			case .VkVideoEncodeH264SessionParametersFeedbackInfoKHR: return typeof(VkVideoEncodeH264SessionParametersFeedbackInfoKHR);
			case .VkVideoEncodeH265CapabilitiesKHR: return typeof(VkVideoEncodeH265CapabilitiesKHR);
			case .VkVideoEncodeH265SessionParametersCreateInfoKHR: return typeof(VkVideoEncodeH265SessionParametersCreateInfoKHR);
			case .VkVideoEncodeH265SessionParametersAddInfoKHR: return typeof(VkVideoEncodeH265SessionParametersAddInfoKHR);
			case .VkVideoEncodeH265PictureInfoKHR: return typeof(VkVideoEncodeH265PictureInfoKHR);
			case .VkVideoEncodeH265DpbSlotInfoKHR: return typeof(VkVideoEncodeH265DpbSlotInfoKHR);
			case .VkVideoEncodeH265NaluSliceSegmentInfoKHR: return typeof(VkVideoEncodeH265NaluSliceSegmentInfoKHR);
			case .VkVideoEncodeH265GopRemainingFrameInfoKHR: return typeof(VkVideoEncodeH265GopRemainingFrameInfoKHR);
			case .VkVideoEncodeH265ProfileInfoKHR: return typeof(VkVideoEncodeH265ProfileInfoKHR);
			case .VkVideoEncodeH265RateControlInfoKHR: return typeof(VkVideoEncodeH265RateControlInfoKHR);
			case .VkVideoEncodeH265RateControlLayerInfoKHR: return typeof(VkVideoEncodeH265RateControlLayerInfoKHR);
			case .VkVideoEncodeH265SessionCreateInfoKHR: return typeof(VkVideoEncodeH265SessionCreateInfoKHR);
			case .VkVideoEncodeH265QualityLevelPropertiesKHR: return typeof(VkVideoEncodeH265QualityLevelPropertiesKHR);
			case .VkVideoEncodeH265SessionParametersGetInfoKHR: return typeof(VkVideoEncodeH265SessionParametersGetInfoKHR);
			case .VkVideoEncodeH265SessionParametersFeedbackInfoKHR: return typeof(VkVideoEncodeH265SessionParametersFeedbackInfoKHR);
			case .VkVideoDecodeH264CapabilitiesKHR: return typeof(VkVideoDecodeH264CapabilitiesKHR);
			case .VkVideoDecodeH264PictureInfoKHR: return typeof(VkVideoDecodeH264PictureInfoKHR);
			case .VkVideoDecodeH264ProfileInfoKHR: return typeof(VkVideoDecodeH264ProfileInfoKHR);
			case .VkVideoDecodeH264SessionParametersCreateInfoKHR: return typeof(VkVideoDecodeH264SessionParametersCreateInfoKHR);
			case .VkVideoDecodeH264SessionParametersAddInfoKHR: return typeof(VkVideoDecodeH264SessionParametersAddInfoKHR);
			case .VkVideoDecodeH264DpbSlotInfoKHR: return typeof(VkVideoDecodeH264DpbSlotInfoKHR);
			case .VkTextureLodGatherFormatPropertiesAMD: return typeof(VkTextureLODGatherFormatPropertiesAMD);
			case .VkPhysicalDeviceCornerSampledImageFeaturesNV: return typeof(VkPhysicalDeviceCornerSampledImageFeaturesNV);
			case .VkExternalMemoryImageCreateInfoNV: return typeof(VkExternalMemoryImageCreateInfoNV);
			case .VkExportMemoryAllocateInfoNV: return typeof(VkExportMemoryAllocateInfoNV);
			case .VkValidationFlagsEXT: return typeof(VkValidationFlagsEXT);
			case .VkImageViewAstcDecodeModeEXT: return typeof(VkImageViewASTCDecodeModeEXT);
			case .VkPhysicalDeviceAstcDecodeFeaturesEXT: return typeof(VkPhysicalDeviceASTCDecodeFeaturesEXT);
			case .VkImportMemoryFdInfoKHR: return typeof(VkImportMemoryFdInfoKHR);
			case .VkMemoryFdPropertiesKHR: return typeof(VkMemoryFdPropertiesKHR);
			case .VkMemoryGetFdInfoKHR: return typeof(VkMemoryGetFdInfoKHR);
			case .VkImportSemaphoreFdInfoKHR: return typeof(VkImportSemaphoreFdInfoKHR);
			case .VkSemaphoreGetFdInfoKHR: return typeof(VkSemaphoreGetFdInfoKHR);
			case .VkCommandBufferInheritanceConditionalRenderingInfoEXT: return typeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT);
			case .VkPhysicalDeviceConditionalRenderingFeaturesEXT: return typeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT);
			case .VkConditionalRenderingBeginInfoEXT: return typeof(VkConditionalRenderingBeginInfoEXT);
			case .VkPresentRegionsKHR: return typeof(VkPresentRegionsKHR);
			case .VkPipelineViewportWScalingStateCreateInfoNV: return typeof(VkPipelineViewportWScalingStateCreateInfoNV);
			case .VkSurfaceCapabilities2EXT: return typeof(VkSurfaceCapabilities2EXT);
			case .VkDisplayPowerInfoEXT: return typeof(VkDisplayPowerInfoEXT);
			case .VkDeviceEventInfoEXT: return typeof(VkDeviceEventInfoEXT);
			case .VkDisplayEventInfoEXT: return typeof(VkDisplayEventInfoEXT);
			case .VkSwapchainCounterCreateInfoEXT: return typeof(VkSwapchainCounterCreateInfoEXT);
			case .VkPresentTimesInfoGOOGLE: return typeof(VkPresentTimesInfoGOOGLE);
			case .VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX: return typeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX);
			case .VkMultiviewPerViewAttributesInfoNVX: return typeof(VkMultiviewPerViewAttributesInfoNVX);
			case .VkPipelineViewportSwizzleStateCreateInfoNV: return typeof(VkPipelineViewportSwizzleStateCreateInfoNV);
			case .VkPhysicalDeviceDiscardRectanglePropertiesEXT: return typeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT);
			case .VkPipelineDiscardRectangleStateCreateInfoEXT: return typeof(VkPipelineDiscardRectangleStateCreateInfoEXT);
			case .VkPhysicalDeviceConservativeRasterizationPropertiesEXT: return typeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT);
			case .VkPipelineRasterizationConservativeStateCreateInfoEXT: return typeof(VkPipelineRasterizationConservativeStateCreateInfoEXT);
			case .VkPhysicalDeviceDepthClipEnableFeaturesEXT: return typeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT);
			case .VkPipelineRasterizationDepthClipStateCreateInfoEXT: return typeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT);
			case .VkHdrMetadataEXT: return typeof(VkHdrMetadataEXT);
			case .VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG: return typeof(VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG);
			case .VkSharedPresentSurfaceCapabilitiesKHR: return typeof(VkSharedPresentSurfaceCapabilitiesKHR);
			case .VkImportFenceFdInfoKHR: return typeof(VkImportFenceFdInfoKHR);
			case .VkFenceGetFdInfoKHR: return typeof(VkFenceGetFdInfoKHR);
			case .VkPhysicalDevicePerformanceQueryFeaturesKHR: return typeof(VkPhysicalDevicePerformanceQueryFeaturesKHR);
			case .VkPhysicalDevicePerformanceQueryPropertiesKHR: return typeof(VkPhysicalDevicePerformanceQueryPropertiesKHR);
			case .VkQueryPoolPerformanceCreateInfoKHR: return typeof(VkQueryPoolPerformanceCreateInfoKHR);
			case .VkPerformanceQuerySubmitInfoKHR: return typeof(VkPerformanceQuerySubmitInfoKHR);
			case .VkAcquireProfilingLockInfoKHR: return typeof(VkAcquireProfilingLockInfoKHR);
			case .VkPerformanceCounterKHR: return typeof(VkPerformanceCounterKHR);
			case .VkPerformanceCounterDescriptionKHR: return typeof(VkPerformanceCounterDescriptionKHR);
			case .VkPhysicalDeviceSurfaceInfo2KHR: return typeof(VkPhysicalDeviceSurfaceInfo2KHR);
			case .VkSurfaceCapabilities2KHR: return typeof(VkSurfaceCapabilities2KHR);
			case .VkSurfaceFormat2KHR: return typeof(VkSurfaceFormat2KHR);
			case .VkDisplayProperties2KHR: return typeof(VkDisplayProperties2KHR);
			case .VkDisplayPlaneProperties2KHR: return typeof(VkDisplayPlaneProperties2KHR);
			case .VkDisplayModeProperties2KHR: return typeof(VkDisplayModeProperties2KHR);
			case .VkDisplayPlaneInfo2KHR: return typeof(VkDisplayPlaneInfo2KHR);
			case .VkDisplayPlaneCapabilities2KHR: return typeof(VkDisplayPlaneCapabilities2KHR);
			case .VkDebugUtilsObjectNameInfoEXT: return typeof(VkDebugUtilsObjectNameInfoEXT);
			case .VkDebugUtilsObjectTagInfoEXT: return typeof(VkDebugUtilsObjectTagInfoEXT);
			case .VkDebugUtilsLabelEXT: return typeof(VkDebugUtilsLabelEXT);
			case .VkDebugUtilsMessengerCallbackDataEXT: return typeof(VkDebugUtilsMessengerCallbackDataEXT);
			case .VkDebugUtilsMessengerCreateInfoEXT: return typeof(VkDebugUtilsMessengerCreateInfoEXT);
			case .VkAttachmentSampleCountInfoAMD: return typeof(VkAttachmentSampleCountInfoAMD);
			case .VkPhysicalDeviceShaderBfloat16FeaturesKHR: return typeof(VkPhysicalDeviceShaderBfloat16FeaturesKHR);
			case .VkSampleLocationsInfoEXT: return typeof(VkSampleLocationsInfoEXT);
			case .VkRenderPassSampleLocationsBeginInfoEXT: return typeof(VkRenderPassSampleLocationsBeginInfoEXT);
			case .VkPipelineSampleLocationsStateCreateInfoEXT: return typeof(VkPipelineSampleLocationsStateCreateInfoEXT);
			case .VkPhysicalDeviceSampleLocationsPropertiesEXT: return typeof(VkPhysicalDeviceSampleLocationsPropertiesEXT);
			case .VkMultisamplePropertiesEXT: return typeof(VkMultisamplePropertiesEXT);
			case .VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT: return typeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT);
			case .VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT: return typeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT);
			case .VkPipelineColorBlendAdvancedStateCreateInfoEXT: return typeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT);
			case .VkPipelineCoverageToColorStateCreateInfoNV: return typeof(VkPipelineCoverageToColorStateCreateInfoNV);
			case .VkWriteDescriptorSetAccelerationStructureKHR: return typeof(VkWriteDescriptorSetAccelerationStructureKHR);
			case .VkAccelerationStructureBuildGeometryInfoKHR: return typeof(VkAccelerationStructureBuildGeometryInfoKHR);
			case .VkAccelerationStructureDeviceAddressInfoKHR: return typeof(VkAccelerationStructureDeviceAddressInfoKHR);
			case .VkAccelerationStructureGeometryAabbsDataKHR: return typeof(VkAccelerationStructureGeometryAabbsDataKHR);
			case .VkAccelerationStructureGeometryInstancesDataKHR: return typeof(VkAccelerationStructureGeometryInstancesDataKHR);
			case .VkAccelerationStructureGeometryTrianglesDataKHR: return typeof(VkAccelerationStructureGeometryTrianglesDataKHR);
			case .VkAccelerationStructureGeometryKHR: return typeof(VkAccelerationStructureGeometryKHR);
			case .VkAccelerationStructureVersionInfoKHR: return typeof(VkAccelerationStructureVersionInfoKHR);
			case .VkCopyAccelerationStructureInfoKHR: return typeof(VkCopyAccelerationStructureInfoKHR);
			case .VkCopyAccelerationStructureToMemoryInfoKHR: return typeof(VkCopyAccelerationStructureToMemoryInfoKHR);
			case .VkCopyMemoryToAccelerationStructureInfoKHR: return typeof(VkCopyMemoryToAccelerationStructureInfoKHR);
			case .VkPhysicalDeviceAccelerationStructureFeaturesKHR: return typeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR);
			case .VkPhysicalDeviceAccelerationStructurePropertiesKHR: return typeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR);
			case .VkAccelerationStructureCreateInfoKHR: return typeof(VkAccelerationStructureCreateInfoKHR);
			case .VkAccelerationStructureBuildSizesInfoKHR: return typeof(VkAccelerationStructureBuildSizesInfoKHR);
			case .VkPhysicalDeviceRayTracingPipelineFeaturesKHR: return typeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR);
			case .VkPhysicalDeviceRayTracingPipelinePropertiesKHR: return typeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR);
			case .VkRayTracingPipelineCreateInfoKHR: return typeof(VkRayTracingPipelineCreateInfoKHR);
			case .VkRayTracingShaderGroupCreateInfoKHR: return typeof(VkRayTracingShaderGroupCreateInfoKHR);
			case .VkRayTracingPipelineInterfaceCreateInfoKHR: return typeof(VkRayTracingPipelineInterfaceCreateInfoKHR);
			case .VkPhysicalDeviceRayQueryFeaturesKHR: return typeof(VkPhysicalDeviceRayQueryFeaturesKHR);
			case .VkPipelineCoverageModulationStateCreateInfoNV: return typeof(VkPipelineCoverageModulationStateCreateInfoNV);
			case .VkPhysicalDeviceShaderSmBuiltinsFeaturesNV: return typeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV);
			case .VkPhysicalDeviceShaderSmBuiltinsPropertiesNV: return typeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV);
			case .VkDrmFormatModifierPropertiesListEXT: return typeof(VkDrmFormatModifierPropertiesListEXT);
			case .VkPhysicalDeviceImageDrmFormatModifierInfoEXT: return typeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT);
			case .VkImageDrmFormatModifierListCreateInfoEXT: return typeof(VkImageDrmFormatModifierListCreateInfoEXT);
			case .VkImageDrmFormatModifierExplicitCreateInfoEXT: return typeof(VkImageDrmFormatModifierExplicitCreateInfoEXT);
			case .VkImageDrmFormatModifierPropertiesEXT: return typeof(VkImageDrmFormatModifierPropertiesEXT);
			case .VkDrmFormatModifierPropertiesList2EXT: return typeof(VkDrmFormatModifierPropertiesList2EXT);
			case .VkValidationCacheCreateInfoEXT: return typeof(VkValidationCacheCreateInfoEXT);
			case .VkShaderModuleValidationCacheCreateInfoEXT: return typeof(VkShaderModuleValidationCacheCreateInfoEXT);
			case .VkPipelineViewportShadingRateImageStateCreateInfoNV: return typeof(VkPipelineViewportShadingRateImageStateCreateInfoNV);
			case .VkPhysicalDeviceShadingRateImageFeaturesNV: return typeof(VkPhysicalDeviceShadingRateImageFeaturesNV);
			case .VkPhysicalDeviceShadingRateImagePropertiesNV: return typeof(VkPhysicalDeviceShadingRateImagePropertiesNV);
			case .VkPipelineViewportCoarseSampleOrderStateCreateInfoNV: return typeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV);
			case .VkRayTracingPipelineCreateInfoNV: return typeof(VkRayTracingPipelineCreateInfoNV);
			case .VkAccelerationStructureCreateInfoNV: return typeof(VkAccelerationStructureCreateInfoNV);
			case .VkGeometryNV: return typeof(VkGeometryNV);
			case .VkGeometryTrianglesNV: return typeof(VkGeometryTrianglesNV);
			case .VkGeometryAabbNV: return typeof(VkGeometryAABBNV);
			case .VkBindAccelerationStructureMemoryInfoNV: return typeof(VkBindAccelerationStructureMemoryInfoNV);
			case .VkWriteDescriptorSetAccelerationStructureNV: return typeof(VkWriteDescriptorSetAccelerationStructureNV);
			case .VkAccelerationStructureMemoryRequirementsInfoNV: return typeof(VkAccelerationStructureMemoryRequirementsInfoNV);
			case .VkPhysicalDeviceRayTracingPropertiesNV: return typeof(VkPhysicalDeviceRayTracingPropertiesNV);
			case .VkRayTracingShaderGroupCreateInfoNV: return typeof(VkRayTracingShaderGroupCreateInfoNV);
			case .VkAccelerationStructureInfoNV: return typeof(VkAccelerationStructureInfoNV);
			case .VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV: return typeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV);
			case .VkPipelineRepresentativeFragmentTestStateCreateInfoNV: return typeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV);
			case .VkPhysicalDeviceImageViewImageFormatInfoEXT: return typeof(VkPhysicalDeviceImageViewImageFormatInfoEXT);
			case .VkFilterCubicImageViewImageFormatPropertiesEXT: return typeof(VkFilterCubicImageViewImageFormatPropertiesEXT);
			case .VkImportMemoryHostPointerInfoEXT: return typeof(VkImportMemoryHostPointerInfoEXT);
			case .VkMemoryHostPointerPropertiesEXT: return typeof(VkMemoryHostPointerPropertiesEXT);
			case .VkPhysicalDeviceExternalMemoryHostPropertiesEXT: return typeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT);
			case .VkPhysicalDeviceShaderClockFeaturesKHR: return typeof(VkPhysicalDeviceShaderClockFeaturesKHR);
			case .VkPipelineCompilerControlCreateInfoAMD: return typeof(VkPipelineCompilerControlCreateInfoAMD);
			case .VkPhysicalDeviceShaderCorePropertiesAMD: return typeof(VkPhysicalDeviceShaderCorePropertiesAMD);
			case .VkVideoDecodeH265CapabilitiesKHR: return typeof(VkVideoDecodeH265CapabilitiesKHR);
			case .VkVideoDecodeH265SessionParametersCreateInfoKHR: return typeof(VkVideoDecodeH265SessionParametersCreateInfoKHR);
			case .VkVideoDecodeH265SessionParametersAddInfoKHR: return typeof(VkVideoDecodeH265SessionParametersAddInfoKHR);
			case .VkVideoDecodeH265ProfileInfoKHR: return typeof(VkVideoDecodeH265ProfileInfoKHR);
			case .VkVideoDecodeH265PictureInfoKHR: return typeof(VkVideoDecodeH265PictureInfoKHR);
			case .VkVideoDecodeH265DpbSlotInfoKHR: return typeof(VkVideoDecodeH265DpbSlotInfoKHR);
			case .VkDeviceMemoryOverallocationCreateInfoAMD: return typeof(VkDeviceMemoryOverallocationCreateInfoAMD);
			case .VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT: return typeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT);
			case .VkPhysicalDeviceMeshShaderFeaturesNV: return typeof(VkPhysicalDeviceMeshShaderFeaturesNV);
			case .VkPhysicalDeviceMeshShaderPropertiesNV: return typeof(VkPhysicalDeviceMeshShaderPropertiesNV);
			case .VkPhysicalDeviceShaderImageFootprintFeaturesNV: return typeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV);
			case .VkPipelineViewportExclusiveScissorStateCreateInfoNV: return typeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV);
			case .VkPhysicalDeviceExclusiveScissorFeaturesNV: return typeof(VkPhysicalDeviceExclusiveScissorFeaturesNV);
			case .VkCheckpointDataNV: return typeof(VkCheckpointDataNV);
			case .VkQueueFamilyCheckpointPropertiesNV: return typeof(VkQueueFamilyCheckpointPropertiesNV);
			case .VkQueueFamilyCheckpointProperties2NV: return typeof(VkQueueFamilyCheckpointProperties2NV);
			case .VkCheckpointData2NV: return typeof(VkCheckpointData2NV);
			case .VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL: return typeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL);
			case .VkQueryPoolPerformanceQueryCreateInfoINTEL: return typeof(VkQueryPoolPerformanceQueryCreateInfoINTEL);
			case .VkInitializePerformanceApiInfoINTEL: return typeof(VkInitializePerformanceApiInfoINTEL);
			case .VkPerformanceMarkerInfoINTEL: return typeof(VkPerformanceMarkerInfoINTEL);
			case .VkPerformanceStreamMarkerInfoINTEL: return typeof(VkPerformanceStreamMarkerInfoINTEL);
			case .VkPerformanceOverrideInfoINTEL: return typeof(VkPerformanceOverrideInfoINTEL);
			case .VkPerformanceConfigurationAcquireInfoINTEL: return typeof(VkPerformanceConfigurationAcquireInfoINTEL);
			case .VkPhysicalDevicePciBusInfoPropertiesEXT: return typeof(VkPhysicalDevicePCIBusInfoPropertiesEXT);
			case .VkDisplayNativeHdrSurfaceCapabilitiesAMD: return typeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD);
			case .VkSwapchainDisplayNativeHdrCreateInfoAMD: return typeof(VkSwapchainDisplayNativeHdrCreateInfoAMD);
			case .VkPhysicalDeviceFragmentDensityMapFeaturesEXT: return typeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT);
			case .VkPhysicalDeviceFragmentDensityMapPropertiesEXT: return typeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT);
			case .VkRenderPassFragmentDensityMapCreateInfoEXT: return typeof(VkRenderPassFragmentDensityMapCreateInfoEXT);
			case .VkRenderingFragmentDensityMapAttachmentInfoEXT: return typeof(VkRenderingFragmentDensityMapAttachmentInfoEXT);
			case .VkFragmentShadingRateAttachmentInfoKHR: return typeof(VkFragmentShadingRateAttachmentInfoKHR);
			case .VkPipelineFragmentShadingRateStateCreateInfoKHR: return typeof(VkPipelineFragmentShadingRateStateCreateInfoKHR);
			case .VkPhysicalDeviceFragmentShadingRatePropertiesKHR: return typeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR);
			case .VkPhysicalDeviceFragmentShadingRateFeaturesKHR: return typeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR);
			case .VkPhysicalDeviceFragmentShadingRateKHR: return typeof(VkPhysicalDeviceFragmentShadingRateKHR);
			case .VkRenderingFragmentShadingRateAttachmentInfoKHR: return typeof(VkRenderingFragmentShadingRateAttachmentInfoKHR);
			case .VkPhysicalDeviceShaderCoreProperties2AMD: return typeof(VkPhysicalDeviceShaderCoreProperties2AMD);
			case .VkPhysicalDeviceCoherentMemoryFeaturesAMD: return typeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD);
			case .VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT: return typeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT);
			case .VkPhysicalDeviceShaderQuadControlFeaturesKHR: return typeof(VkPhysicalDeviceShaderQuadControlFeaturesKHR);
			case .VkPhysicalDeviceMemoryBudgetPropertiesEXT: return typeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT);
			case .VkPhysicalDeviceMemoryPriorityFeaturesEXT: return typeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT);
			case .VkMemoryPriorityAllocateInfoEXT: return typeof(VkMemoryPriorityAllocateInfoEXT);
			case .VkSurfaceProtectedCapabilitiesKHR: return typeof(VkSurfaceProtectedCapabilitiesKHR);
			case .VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV: return typeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV);
			case .VkPhysicalDeviceBufferDeviceAddressFeaturesEXT: return typeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT);
			case .VkBufferDeviceAddressCreateInfoEXT: return typeof(VkBufferDeviceAddressCreateInfoEXT);
			case .VkValidationFeaturesEXT: return typeof(VkValidationFeaturesEXT);
			case .VkPhysicalDevicePresentWaitFeaturesKHR: return typeof(VkPhysicalDevicePresentWaitFeaturesKHR);
			case .VkPhysicalDeviceCooperativeMatrixFeaturesNV: return typeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV);
			case .VkCooperativeMatrixPropertiesNV: return typeof(VkCooperativeMatrixPropertiesNV);
			case .VkPhysicalDeviceCooperativeMatrixPropertiesNV: return typeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV);
			case .VkPhysicalDeviceCoverageReductionModeFeaturesNV: return typeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV);
			case .VkPipelineCoverageReductionStateCreateInfoNV: return typeof(VkPipelineCoverageReductionStateCreateInfoNV);
			case .VkFramebufferMixedSamplesCombinationNV: return typeof(VkFramebufferMixedSamplesCombinationNV);
			case .VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT: return typeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT);
			case .VkPhysicalDeviceYcbcrImageArraysFeaturesEXT: return typeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT);
			case .VkPhysicalDeviceProvokingVertexFeaturesEXT: return typeof(VkPhysicalDeviceProvokingVertexFeaturesEXT);
			case .VkPipelineRasterizationProvokingVertexStateCreateInfoEXT: return typeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT);
			case .VkPhysicalDeviceProvokingVertexPropertiesEXT: return typeof(VkPhysicalDeviceProvokingVertexPropertiesEXT);
			case .VkHeadlessSurfaceCreateInfoEXT: return typeof(VkHeadlessSurfaceCreateInfoEXT);
			case .VkPhysicalDeviceShaderAtomicFloatFeaturesEXT: return typeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT);
			case .VkPhysicalDeviceExtendedDynamicStateFeaturesEXT: return typeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT);
			case .VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR: return typeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR);
			case .VkPipelineInfoKHR: return typeof(VkPipelineInfoKHR);
			case .VkPipelineExecutablePropertiesKHR: return typeof(VkPipelineExecutablePropertiesKHR);
			case .VkPipelineExecutableInfoKHR: return typeof(VkPipelineExecutableInfoKHR);
			case .VkPipelineExecutableStatisticKHR: return typeof(VkPipelineExecutableStatisticKHR);
			case .VkPipelineExecutableInternalRepresentationKHR: return typeof(VkPipelineExecutableInternalRepresentationKHR);
			case .VkPhysicalDeviceMapMemoryPlacedFeaturesEXT: return typeof(VkPhysicalDeviceMapMemoryPlacedFeaturesEXT);
			case .VkPhysicalDeviceMapMemoryPlacedPropertiesEXT: return typeof(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT);
			case .VkMemoryMapPlacedInfoEXT: return typeof(VkMemoryMapPlacedInfoEXT);
			case .VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT: return typeof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT);
			case .VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV: return typeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV);
			case .VkGraphicsShaderGroupCreateInfoNV: return typeof(VkGraphicsShaderGroupCreateInfoNV);
			case .VkGraphicsPipelineShaderGroupsCreateInfoNV: return typeof(VkGraphicsPipelineShaderGroupsCreateInfoNV);
			case .VkIndirectCommandsLayoutTokenNV: return typeof(VkIndirectCommandsLayoutTokenNV);
			case .VkIndirectCommandsLayoutCreateInfoNV: return typeof(VkIndirectCommandsLayoutCreateInfoNV);
			case .VkGeneratedCommandsInfoNV: return typeof(VkGeneratedCommandsInfoNV);
			case .VkGeneratedCommandsMemoryRequirementsInfoNV: return typeof(VkGeneratedCommandsMemoryRequirementsInfoNV);
			case .VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV: return typeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV);
			case .VkPhysicalDeviceInheritedViewportScissorFeaturesNV: return typeof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV);
			case .VkCommandBufferInheritanceViewportScissorInfoNV: return typeof(VkCommandBufferInheritanceViewportScissorInfoNV);
			case .VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT: return typeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT);
			case .VkCommandBufferInheritanceRenderPassTransformInfoQCOM: return typeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM);
			case .VkRenderPassTransformBeginInfoQCOM: return typeof(VkRenderPassTransformBeginInfoQCOM);
			case .VkPhysicalDeviceDepthBiasControlFeaturesEXT: return typeof(VkPhysicalDeviceDepthBiasControlFeaturesEXT);
			case .VkDepthBiasInfoEXT: return typeof(VkDepthBiasInfoEXT);
			case .VkDepthBiasRepresentationInfoEXT: return typeof(VkDepthBiasRepresentationInfoEXT);
			case .VkPhysicalDeviceDeviceMemoryReportFeaturesEXT: return typeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT);
			case .VkDeviceDeviceMemoryReportCreateInfoEXT: return typeof(VkDeviceDeviceMemoryReportCreateInfoEXT);
			case .VkDeviceMemoryReportCallbackDataEXT: return typeof(VkDeviceMemoryReportCallbackDataEXT);
			case .VkSamplerCustomBorderColorCreateInfoEXT: return typeof(VkSamplerCustomBorderColorCreateInfoEXT);
			case .VkPhysicalDeviceCustomBorderColorPropertiesEXT: return typeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT);
			case .VkPhysicalDeviceCustomBorderColorFeaturesEXT: return typeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT);
			case .VkPipelineLibraryCreateInfoKHR: return typeof(VkPipelineLibraryCreateInfoKHR);
			case .VkPhysicalDevicePresentBarrierFeaturesNV: return typeof(VkPhysicalDevicePresentBarrierFeaturesNV);
			case .VkSurfaceCapabilitiesPresentBarrierNV: return typeof(VkSurfaceCapabilitiesPresentBarrierNV);
			case .VkSwapchainPresentBarrierCreateInfoNV: return typeof(VkSwapchainPresentBarrierCreateInfoNV);
			case .VkPresentIdKHR: return typeof(VkPresentIdKHR);
			case .VkPhysicalDevicePresentIdFeaturesKHR: return typeof(VkPhysicalDevicePresentIdFeaturesKHR);
			case .VkVideoEncodeInfoKHR: return typeof(VkVideoEncodeInfoKHR);
			case .VkVideoEncodeRateControlInfoKHR: return typeof(VkVideoEncodeRateControlInfoKHR);
			case .VkVideoEncodeRateControlLayerInfoKHR: return typeof(VkVideoEncodeRateControlLayerInfoKHR);
			case .VkVideoEncodeCapabilitiesKHR: return typeof(VkVideoEncodeCapabilitiesKHR);
			case .VkVideoEncodeUsageInfoKHR: return typeof(VkVideoEncodeUsageInfoKHR);
			case .VkQueryPoolVideoEncodeFeedbackCreateInfoKHR: return typeof(VkQueryPoolVideoEncodeFeedbackCreateInfoKHR);
			case .VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR: return typeof(VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR);
			case .VkVideoEncodeQualityLevelPropertiesKHR: return typeof(VkVideoEncodeQualityLevelPropertiesKHR);
			case .VkVideoEncodeQualityLevelInfoKHR: return typeof(VkVideoEncodeQualityLevelInfoKHR);
			case .VkVideoEncodeSessionParametersGetInfoKHR: return typeof(VkVideoEncodeSessionParametersGetInfoKHR);
			case .VkVideoEncodeSessionParametersFeedbackInfoKHR: return typeof(VkVideoEncodeSessionParametersFeedbackInfoKHR);
			case .VkPhysicalDeviceDiagnosticsConfigFeaturesNV: return typeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV);
			case .VkDeviceDiagnosticsConfigCreateInfoNV: return typeof(VkDeviceDiagnosticsConfigCreateInfoNV);
			case .VkPhysicalDeviceTileShadingFeaturesQCOM: return typeof(VkPhysicalDeviceTileShadingFeaturesQCOM);
			case .VkPhysicalDeviceTileShadingPropertiesQCOM: return typeof(VkPhysicalDeviceTileShadingPropertiesQCOM);
			case .VkRenderPassTileShadingCreateInfoQCOM: return typeof(VkRenderPassTileShadingCreateInfoQCOM);
			case .VkPerTileBeginInfoQCOM: return typeof(VkPerTileBeginInfoQCOM);
			case .VkPerTileEndInfoQCOM: return typeof(VkPerTileEndInfoQCOM);
			case .VkDispatchTileInfoQCOM: return typeof(VkDispatchTileInfoQCOM);
			case .VkQueryLowLatencySupportNV: return typeof(VkQueryLowLatencySupportNV);
			case .VkPhysicalDeviceDescriptorBufferPropertiesEXT: return typeof(VkPhysicalDeviceDescriptorBufferPropertiesEXT);
			case .VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT: return typeof(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT);
			case .VkPhysicalDeviceDescriptorBufferFeaturesEXT: return typeof(VkPhysicalDeviceDescriptorBufferFeaturesEXT);
			case .VkDescriptorAddressInfoEXT: return typeof(VkDescriptorAddressInfoEXT);
			case .VkDescriptorGetInfoEXT: return typeof(VkDescriptorGetInfoEXT);
			case .VkBufferCaptureDescriptorDataInfoEXT: return typeof(VkBufferCaptureDescriptorDataInfoEXT);
			case .VkImageCaptureDescriptorDataInfoEXT: return typeof(VkImageCaptureDescriptorDataInfoEXT);
			case .VkImageViewCaptureDescriptorDataInfoEXT: return typeof(VkImageViewCaptureDescriptorDataInfoEXT);
			case .VkSamplerCaptureDescriptorDataInfoEXT: return typeof(VkSamplerCaptureDescriptorDataInfoEXT);
			case .VkOpaqueCaptureDescriptorDataCreateInfoEXT: return typeof(VkOpaqueCaptureDescriptorDataCreateInfoEXT);
			case .VkDescriptorBufferBindingInfoEXT: return typeof(VkDescriptorBufferBindingInfoEXT);
			case .VkDescriptorBufferBindingPushDescriptorBufferHandleEXT: return typeof(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT);
			case .VkAccelerationStructureCaptureDescriptorDataInfoEXT: return typeof(VkAccelerationStructureCaptureDescriptorDataInfoEXT);
			case .VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT: return typeof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT);
			case .VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT: return typeof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT);
			case .VkGraphicsPipelineLibraryCreateInfoEXT: return typeof(VkGraphicsPipelineLibraryCreateInfoEXT);
			case .VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD: return typeof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD);
			case .VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR: return typeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR);
			case .VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR: return typeof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR);
			case .VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR: return typeof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR);
			case .VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV: return typeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV);
			case .VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV: return typeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV);
			case .VkPipelineFragmentShadingRateEnumStateCreateInfoNV: return typeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV);
			case .VkAccelerationStructureGeometryMotionTrianglesDataNV: return typeof(VkAccelerationStructureGeometryMotionTrianglesDataNV);
			case .VkPhysicalDeviceRayTracingMotionBlurFeaturesNV: return typeof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV);
			case .VkAccelerationStructureMotionInfoNV: return typeof(VkAccelerationStructureMotionInfoNV);
			case .VkPhysicalDeviceMeshShaderFeaturesEXT: return typeof(VkPhysicalDeviceMeshShaderFeaturesEXT);
			case .VkPhysicalDeviceMeshShaderPropertiesEXT: return typeof(VkPhysicalDeviceMeshShaderPropertiesEXT);
			case .VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT: return typeof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT);
			case .VkPhysicalDeviceFragmentDensityMap2FeaturesEXT: return typeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT);
			case .VkPhysicalDeviceFragmentDensityMap2PropertiesEXT: return typeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT);
			case .VkCopyCommandTransformInfoQCOM: return typeof(VkCopyCommandTransformInfoQCOM);
			case .VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR: return typeof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR);
			case .VkPhysicalDeviceImageCompressionControlFeaturesEXT: return typeof(VkPhysicalDeviceImageCompressionControlFeaturesEXT);
			case .VkImageCompressionControlEXT: return typeof(VkImageCompressionControlEXT);
			case .VkImageCompressionPropertiesEXT: return typeof(VkImageCompressionPropertiesEXT);
			case .VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT: return typeof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT);
			case .VkPhysicalDevice4444FormatsFeaturesEXT: return typeof(VkPhysicalDevice4444FormatsFeaturesEXT);
			case .VkPhysicalDeviceFaultFeaturesEXT: return typeof(VkPhysicalDeviceFaultFeaturesEXT);
			case .VkDeviceFaultCountsEXT: return typeof(VkDeviceFaultCountsEXT);
			case .VkDeviceFaultInfoEXT: return typeof(VkDeviceFaultInfoEXT);
			case .VkPhysicalDeviceRgba10x6FormatsFeaturesEXT: return typeof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT);
			case .VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT: return typeof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT);
			case .VkVertexInputBindingDescription2EXT: return typeof(VkVertexInputBindingDescription2EXT);
			case .VkVertexInputAttributeDescription2EXT: return typeof(VkVertexInputAttributeDescription2EXT);
			case .VkPhysicalDeviceDrmPropertiesEXT: return typeof(VkPhysicalDeviceDrmPropertiesEXT);
			case .VkPhysicalDeviceAddressBindingReportFeaturesEXT: return typeof(VkPhysicalDeviceAddressBindingReportFeaturesEXT);
			case .VkDeviceAddressBindingCallbackDataEXT: return typeof(VkDeviceAddressBindingCallbackDataEXT);
			case .VkPhysicalDeviceDepthClipControlFeaturesEXT: return typeof(VkPhysicalDeviceDepthClipControlFeaturesEXT);
			case .VkPipelineViewportDepthClipControlCreateInfoEXT: return typeof(VkPipelineViewportDepthClipControlCreateInfoEXT);
			case .VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT: return typeof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT);
			case .VkSubpassShadingPipelineCreateInfoHUAWEI: return typeof(VkSubpassShadingPipelineCreateInfoHUAWEI);
			case .VkPhysicalDeviceSubpassShadingFeaturesHUAWEI: return typeof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI);
			case .VkPhysicalDeviceSubpassShadingPropertiesHUAWEI: return typeof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI);
			case .VkPhysicalDeviceInvocationMaskFeaturesHUAWEI: return typeof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI);
			case .VkMemoryGetRemoteAddressInfoNV: return typeof(VkMemoryGetRemoteAddressInfoNV);
			case .VkPhysicalDeviceExternalMemoryRdmaFeaturesNV: return typeof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV);
			case .VkPipelinePropertiesIdentifierEXT: return typeof(VkPipelinePropertiesIdentifierEXT);
			case .VkPhysicalDevicePipelinePropertiesFeaturesEXT: return typeof(VkPhysicalDevicePipelinePropertiesFeaturesEXT);
			case .VkPhysicalDeviceFrameBoundaryFeaturesEXT: return typeof(VkPhysicalDeviceFrameBoundaryFeaturesEXT);
			case .VkFrameBoundaryEXT: return typeof(VkFrameBoundaryEXT);
			case .VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT: return typeof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT);
			case .VkSubpassResolvePerformanceQueryEXT: return typeof(VkSubpassResolvePerformanceQueryEXT);
			case .VkMultisampledRenderToSingleSampledInfoEXT: return typeof(VkMultisampledRenderToSingleSampledInfoEXT);
			case .VkPhysicalDeviceExtendedDynamicState2FeaturesEXT: return typeof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT);
			case .VkPhysicalDeviceColorWriteEnableFeaturesEXT: return typeof(VkPhysicalDeviceColorWriteEnableFeaturesEXT);
			case .VkPipelineColorWriteCreateInfoEXT: return typeof(VkPipelineColorWriteCreateInfoEXT);
			case .VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT: return typeof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT);
			case .VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR: return typeof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR);
			case .VkPhysicalDeviceImageViewMinLodFeaturesEXT: return typeof(VkPhysicalDeviceImageViewMinLodFeaturesEXT);
			case .VkImageViewMinLodCreateInfoEXT: return typeof(VkImageViewMinLodCreateInfoEXT);
			case .VkPhysicalDeviceMultiDrawFeaturesEXT: return typeof(VkPhysicalDeviceMultiDrawFeaturesEXT);
			case .VkPhysicalDeviceMultiDrawPropertiesEXT: return typeof(VkPhysicalDeviceMultiDrawPropertiesEXT);
			case .VkPhysicalDeviceImage2dViewOf3dFeaturesEXT: return typeof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT);
			case .VkPhysicalDeviceShaderTileImageFeaturesEXT: return typeof(VkPhysicalDeviceShaderTileImageFeaturesEXT);
			case .VkPhysicalDeviceShaderTileImagePropertiesEXT: return typeof(VkPhysicalDeviceShaderTileImagePropertiesEXT);
			case .VkMicromapBuildInfoEXT: return typeof(VkMicromapBuildInfoEXT);
			case .VkMicromapVersionInfoEXT: return typeof(VkMicromapVersionInfoEXT);
			case .VkCopyMicromapInfoEXT: return typeof(VkCopyMicromapInfoEXT);
			case .VkCopyMicromapToMemoryInfoEXT: return typeof(VkCopyMicromapToMemoryInfoEXT);
			case .VkCopyMemoryToMicromapInfoEXT: return typeof(VkCopyMemoryToMicromapInfoEXT);
			case .VkPhysicalDeviceOpacityMicromapFeaturesEXT: return typeof(VkPhysicalDeviceOpacityMicromapFeaturesEXT);
			case .VkPhysicalDeviceOpacityMicromapPropertiesEXT: return typeof(VkPhysicalDeviceOpacityMicromapPropertiesEXT);
			case .VkMicromapCreateInfoEXT: return typeof(VkMicromapCreateInfoEXT);
			case .VkMicromapBuildSizesInfoEXT: return typeof(VkMicromapBuildSizesInfoEXT);
			case .VkAccelerationStructureTrianglesOpacityMicromapEXT: return typeof(VkAccelerationStructureTrianglesOpacityMicromapEXT);
			case .VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI: return typeof(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI);
			case .VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI: return typeof(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI);
			case .VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI: return typeof(VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI);
			case .VkPhysicalDeviceBorderColorSwizzleFeaturesEXT: return typeof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT);
			case .VkSamplerBorderColorComponentMappingCreateInfoEXT: return typeof(VkSamplerBorderColorComponentMappingCreateInfoEXT);
			case .VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT: return typeof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT);
			case .VkPhysicalDeviceShaderCorePropertiesARM: return typeof(VkPhysicalDeviceShaderCorePropertiesARM);
			case .VkDeviceQueueShaderCoreControlCreateInfoARM: return typeof(VkDeviceQueueShaderCoreControlCreateInfoARM);
			case .VkPhysicalDeviceSchedulingControlsFeaturesARM: return typeof(VkPhysicalDeviceSchedulingControlsFeaturesARM);
			case .VkPhysicalDeviceSchedulingControlsPropertiesARM: return typeof(VkPhysicalDeviceSchedulingControlsPropertiesARM);
			case .VkPhysicalDeviceImageSlicedViewOf3dFeaturesEXT: return typeof(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT);
			case .VkImageViewSlicedCreateInfoEXT: return typeof(VkImageViewSlicedCreateInfoEXT);
			case .VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE: return typeof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE);
			case .VkDescriptorSetBindingReferenceVALVE: return typeof(VkDescriptorSetBindingReferenceVALVE);
			case .VkDescriptorSetLayoutHostMappingInfoVALVE: return typeof(VkDescriptorSetLayoutHostMappingInfoVALVE);
			case .VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT: return typeof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT);
			case .VkPhysicalDeviceRenderPassStripedFeaturesARM: return typeof(VkPhysicalDeviceRenderPassStripedFeaturesARM);
			case .VkPhysicalDeviceRenderPassStripedPropertiesARM: return typeof(VkPhysicalDeviceRenderPassStripedPropertiesARM);
			case .VkRenderPassStripeBeginInfoARM: return typeof(VkRenderPassStripeBeginInfoARM);
			case .VkRenderPassStripeInfoARM: return typeof(VkRenderPassStripeInfoARM);
			case .VkRenderPassStripeSubmitInfoARM: return typeof(VkRenderPassStripeSubmitInfoARM);
			case .VkPhysicalDeviceCopyMemoryIndirectFeaturesNV: return typeof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV);
			case .VkPhysicalDeviceCopyMemoryIndirectPropertiesNV: return typeof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV);
			case .VkPhysicalDeviceMemoryDecompressionFeaturesNV: return typeof(VkPhysicalDeviceMemoryDecompressionFeaturesNV);
			case .VkPhysicalDeviceMemoryDecompressionPropertiesNV: return typeof(VkPhysicalDeviceMemoryDecompressionPropertiesNV);
			case .VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV: return typeof(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV);
			case .VkComputePipelineIndirectBufferInfoNV: return typeof(VkComputePipelineIndirectBufferInfoNV);
			case .VkPipelineIndirectDeviceAddressInfoNV: return typeof(VkPipelineIndirectDeviceAddressInfoNV);
			case .VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV: return typeof(VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV);
			case .VkAccelerationStructureGeometryLinearSweptSpheresDataNV: return typeof(VkAccelerationStructureGeometryLinearSweptSpheresDataNV);
			case .VkAccelerationStructureGeometrySpheresDataNV: return typeof(VkAccelerationStructureGeometrySpheresDataNV);
			case .VkPhysicalDeviceLinearColorAttachmentFeaturesNV: return typeof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV);
			case .VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR: return typeof(VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR);
			case .VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT: return typeof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT);
			case .VkPhysicalDeviceImageProcessingFeaturesQCOM: return typeof(VkPhysicalDeviceImageProcessingFeaturesQCOM);
			case .VkPhysicalDeviceImageProcessingPropertiesQCOM: return typeof(VkPhysicalDeviceImageProcessingPropertiesQCOM);
			case .VkImageViewSampleWeightCreateInfoQCOM: return typeof(VkImageViewSampleWeightCreateInfoQCOM);
			case .VkPhysicalDeviceNestedCommandBufferFeaturesEXT: return typeof(VkPhysicalDeviceNestedCommandBufferFeaturesEXT);
			case .VkPhysicalDeviceNestedCommandBufferPropertiesEXT: return typeof(VkPhysicalDeviceNestedCommandBufferPropertiesEXT);
			case .VkExternalMemoryAcquireUnmodifiedEXT: return typeof(VkExternalMemoryAcquireUnmodifiedEXT);
			case .VkPhysicalDeviceExtendedDynamicState3FeaturesEXT: return typeof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT);
			case .VkPhysicalDeviceExtendedDynamicState3PropertiesEXT: return typeof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT);
			case .VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT: return typeof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT);
			case .VkRenderPassCreationControlEXT: return typeof(VkRenderPassCreationControlEXT);
			case .VkRenderPassCreationFeedbackCreateInfoEXT: return typeof(VkRenderPassCreationFeedbackCreateInfoEXT);
			case .VkRenderPassSubpassFeedbackCreateInfoEXT: return typeof(VkRenderPassSubpassFeedbackCreateInfoEXT);
			case .VkDirectDriverLoadingInfoLUNARG: return typeof(VkDirectDriverLoadingInfoLUNARG);
			case .VkDirectDriverLoadingListLUNARG: return typeof(VkDirectDriverLoadingListLUNARG);
			case .VkTensorCreateInfoARM: return typeof(VkTensorCreateInfoARM);
			case .VkTensorViewCreateInfoARM: return typeof(VkTensorViewCreateInfoARM);
			case .VkBindTensorMemoryInfoARM: return typeof(VkBindTensorMemoryInfoARM);
			case .VkWriteDescriptorSetTensorARM: return typeof(VkWriteDescriptorSetTensorARM);
			case .VkPhysicalDeviceTensorPropertiesARM: return typeof(VkPhysicalDeviceTensorPropertiesARM);
			case .VkTensorFormatPropertiesARM: return typeof(VkTensorFormatPropertiesARM);
			case .VkTensorDescriptionARM: return typeof(VkTensorDescriptionARM);
			case .VkTensorMemoryRequirementsInfoARM: return typeof(VkTensorMemoryRequirementsInfoARM);
			case .VkTensorMemoryBarrierARM: return typeof(VkTensorMemoryBarrierARM);
			case .VkPhysicalDeviceTensorFeaturesARM: return typeof(VkPhysicalDeviceTensorFeaturesARM);
			case .VkDeviceTensorMemoryRequirementsARM: return typeof(VkDeviceTensorMemoryRequirementsARM);
			case .VkCopyTensorInfoARM: return typeof(VkCopyTensorInfoARM);
			case .VkTensorCopyARM: return typeof(VkTensorCopyARM);
			case .VkTensorDependencyInfoARM: return typeof(VkTensorDependencyInfoARM);
			case .VkMemoryDedicatedAllocateInfoTensorARM: return typeof(VkMemoryDedicatedAllocateInfoTensorARM);
			case .VkPhysicalDeviceExternalTensorInfoARM: return typeof(VkPhysicalDeviceExternalTensorInfoARM);
			case .VkExternalTensorPropertiesARM: return typeof(VkExternalTensorPropertiesARM);
			case .VkExternalMemoryTensorCreateInfoARM: return typeof(VkExternalMemoryTensorCreateInfoARM);
			case .VkPhysicalDeviceDescriptorBufferTensorFeaturesARM: return typeof(VkPhysicalDeviceDescriptorBufferTensorFeaturesARM);
			case .VkPhysicalDeviceDescriptorBufferTensorPropertiesARM: return typeof(VkPhysicalDeviceDescriptorBufferTensorPropertiesARM);
			case .VkDescriptorGetTensorInfoARM: return typeof(VkDescriptorGetTensorInfoARM);
			case .VkTensorCaptureDescriptorDataInfoARM: return typeof(VkTensorCaptureDescriptorDataInfoARM);
			case .VkTensorViewCaptureDescriptorDataInfoARM: return typeof(VkTensorViewCaptureDescriptorDataInfoARM);
			case .VkFrameBoundaryTensorsARM: return typeof(VkFrameBoundaryTensorsARM);
			case .VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT: return typeof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT);
			case .VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT: return typeof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT);
			case .VkPipelineShaderStageModuleIdentifierCreateInfoEXT: return typeof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT);
			case .VkShaderModuleIdentifierEXT: return typeof(VkShaderModuleIdentifierEXT);
			case .VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT: return typeof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT);
			case .VkPhysicalDeviceOpticalFlowFeaturesNV: return typeof(VkPhysicalDeviceOpticalFlowFeaturesNV);
			case .VkPhysicalDeviceOpticalFlowPropertiesNV: return typeof(VkPhysicalDeviceOpticalFlowPropertiesNV);
			case .VkOpticalFlowImageFormatInfoNV: return typeof(VkOpticalFlowImageFormatInfoNV);
			case .VkOpticalFlowImageFormatPropertiesNV: return typeof(VkOpticalFlowImageFormatPropertiesNV);
			case .VkOpticalFlowSessionCreateInfoNV: return typeof(VkOpticalFlowSessionCreateInfoNV);
			case .VkOpticalFlowExecuteInfoNV: return typeof(VkOpticalFlowExecuteInfoNV);
			case .VkOpticalFlowSessionCreatePrivateDataInfoNV: return typeof(VkOpticalFlowSessionCreatePrivateDataInfoNV);
			case .VkPhysicalDeviceLegacyDitheringFeaturesEXT: return typeof(VkPhysicalDeviceLegacyDitheringFeaturesEXT);
			case .VkPhysicalDeviceAntiLagFeaturesAMD: return typeof(VkPhysicalDeviceAntiLagFeaturesAMD);
			case .VkAntiLagDataAMD: return typeof(VkAntiLagDataAMD);
			case .VkAntiLagPresentationInfoAMD: return typeof(VkAntiLagPresentationInfoAMD);
			case .VkSurfaceCapabilitiesPresentId2KHR: return typeof(VkSurfaceCapabilitiesPresentId2KHR);
			case .VkPresentId2KHR: return typeof(VkPresentId2KHR);
			case .VkPhysicalDevicePresentId2FeaturesKHR: return typeof(VkPhysicalDevicePresentId2FeaturesKHR);
			case .VkSurfaceCapabilitiesPresentWait2KHR: return typeof(VkSurfaceCapabilitiesPresentWait2KHR);
			case .VkPhysicalDevicePresentWait2FeaturesKHR: return typeof(VkPhysicalDevicePresentWait2FeaturesKHR);
			case .VkPresentWait2InfoKHR: return typeof(VkPresentWait2InfoKHR);
			case .VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR: return typeof(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR);
			case .VkPhysicalDeviceShaderObjectFeaturesEXT: return typeof(VkPhysicalDeviceShaderObjectFeaturesEXT);
			case .VkPhysicalDeviceShaderObjectPropertiesEXT: return typeof(VkPhysicalDeviceShaderObjectPropertiesEXT);
			case .VkShaderCreateInfoEXT: return typeof(VkShaderCreateInfoEXT);
			case .VkPhysicalDevicePipelineBinaryFeaturesKHR: return typeof(VkPhysicalDevicePipelineBinaryFeaturesKHR);
			case .VkPipelineBinaryCreateInfoKHR: return typeof(VkPipelineBinaryCreateInfoKHR);
			case .VkPipelineBinaryInfoKHR: return typeof(VkPipelineBinaryInfoKHR);
			case .VkPipelineBinaryKeyKHR: return typeof(VkPipelineBinaryKeyKHR);
			case .VkPhysicalDevicePipelineBinaryPropertiesKHR: return typeof(VkPhysicalDevicePipelineBinaryPropertiesKHR);
			case .VkReleaseCapturedPipelineDataInfoKHR: return typeof(VkReleaseCapturedPipelineDataInfoKHR);
			case .VkPipelineBinaryDataInfoKHR: return typeof(VkPipelineBinaryDataInfoKHR);
			case .VkPipelineCreateInfoKHR: return typeof(VkPipelineCreateInfoKHR);
			case .VkDevicePipelineBinaryInternalCacheControlKHR: return typeof(VkDevicePipelineBinaryInternalCacheControlKHR);
			case .VkPipelineBinaryHandlesInfoKHR: return typeof(VkPipelineBinaryHandlesInfoKHR);
			case .VkPhysicalDeviceTilePropertiesFeaturesQCOM: return typeof(VkPhysicalDeviceTilePropertiesFeaturesQCOM);
			case .VkTilePropertiesQCOM: return typeof(VkTilePropertiesQCOM);
			case .VkPhysicalDeviceAmigoProfilingFeaturesSEC: return typeof(VkPhysicalDeviceAmigoProfilingFeaturesSEC);
			case .VkAmigoProfilingSubmitInfoSEC: return typeof(VkAmigoProfilingSubmitInfoSEC);
			case .VkSurfacePresentModeKHR: return typeof(VkSurfacePresentModeKHR);
			case .VkSurfacePresentScalingCapabilitiesKHR: return typeof(VkSurfacePresentScalingCapabilitiesKHR);
			case .VkSurfacePresentModeCompatibilityKHR: return typeof(VkSurfacePresentModeCompatibilityKHR);
			case .VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR: return typeof(VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR);
			case .VkSwapchainPresentFenceInfoKHR: return typeof(VkSwapchainPresentFenceInfoKHR);
			case .VkSwapchainPresentModesCreateInfoKHR: return typeof(VkSwapchainPresentModesCreateInfoKHR);
			case .VkSwapchainPresentModeInfoKHR: return typeof(VkSwapchainPresentModeInfoKHR);
			case .VkSwapchainPresentScalingCreateInfoKHR: return typeof(VkSwapchainPresentScalingCreateInfoKHR);
			case .VkReleaseSwapchainImagesInfoKHR: return typeof(VkReleaseSwapchainImagesInfoKHR);
			case .VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM: return typeof(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM);
			case .VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV: return typeof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV);
			case .VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV: return typeof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV);
			case .VkPhysicalDeviceCooperativeVectorFeaturesNV: return typeof(VkPhysicalDeviceCooperativeVectorFeaturesNV);
			case .VkPhysicalDeviceCooperativeVectorPropertiesNV: return typeof(VkPhysicalDeviceCooperativeVectorPropertiesNV);
			case .VkCooperativeVectorPropertiesNV: return typeof(VkCooperativeVectorPropertiesNV);
			case .VkConvertCooperativeVectorMatrixInfoNV: return typeof(VkConvertCooperativeVectorMatrixInfoNV);
			case .VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV: return typeof(VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV);
			case .VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV: return typeof(VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV);
			case .VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT: return typeof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT);
			case .VkMutableDescriptorTypeCreateInfoEXT: return typeof(VkMutableDescriptorTypeCreateInfoEXT);
			case .VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT: return typeof(VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT);
			case .VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT: return typeof(VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT);
			case .VkLayerSettingsCreateInfoEXT: return typeof(VkLayerSettingsCreateInfoEXT);
			case .VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM: return typeof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM);
			case .VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM: return typeof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM);
			case .VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT: return typeof(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT);
			case .VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT: return typeof(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT);
			case .VkLatencySleepModeInfoNV: return typeof(VkLatencySleepModeInfoNV);
			case .VkLatencySleepInfoNV: return typeof(VkLatencySleepInfoNV);
			case .VkSetLatencyMarkerInfoNV: return typeof(VkSetLatencyMarkerInfoNV);
			case .VkGetLatencyMarkerInfoNV: return typeof(VkGetLatencyMarkerInfoNV);
			case .VkLatencyTimingsFrameReportNV: return typeof(VkLatencyTimingsFrameReportNV);
			case .VkLatencySubmissionPresentIdNV: return typeof(VkLatencySubmissionPresentIdNV);
			case .VkOutOfBandQueueTypeInfoNV: return typeof(VkOutOfBandQueueTypeInfoNV);
			case .VkSwapchainLatencyCreateInfoNV: return typeof(VkSwapchainLatencyCreateInfoNV);
			case .VkLatencySurfaceCapabilitiesNV: return typeof(VkLatencySurfaceCapabilitiesNV);
			case .VkPhysicalDeviceCooperativeMatrixFeaturesKHR: return typeof(VkPhysicalDeviceCooperativeMatrixFeaturesKHR);
			case .VkCooperativeMatrixPropertiesKHR: return typeof(VkCooperativeMatrixPropertiesKHR);
			case .VkPhysicalDeviceCooperativeMatrixPropertiesKHR: return typeof(VkPhysicalDeviceCooperativeMatrixPropertiesKHR);
			case .VkDataGraphPipelineCreateInfoARM: return typeof(VkDataGraphPipelineCreateInfoARM);
			case .VkDataGraphPipelineSessionCreateInfoARM: return typeof(VkDataGraphPipelineSessionCreateInfoARM);
			case .VkDataGraphPipelineResourceInfoARM: return typeof(VkDataGraphPipelineResourceInfoARM);
			case .VkDataGraphPipelineConstantARM: return typeof(VkDataGraphPipelineConstantARM);
			case .VkDataGraphPipelineSessionMemoryRequirementsInfoARM: return typeof(VkDataGraphPipelineSessionMemoryRequirementsInfoARM);
			case .VkBindDataGraphPipelineSessionMemoryInfoARM: return typeof(VkBindDataGraphPipelineSessionMemoryInfoARM);
			case .VkPhysicalDeviceDataGraphFeaturesARM: return typeof(VkPhysicalDeviceDataGraphFeaturesARM);
			case .VkDataGraphPipelineShaderModuleCreateInfoARM: return typeof(VkDataGraphPipelineShaderModuleCreateInfoARM);
			case .VkDataGraphPipelinePropertyQueryResultARM: return typeof(VkDataGraphPipelinePropertyQueryResultARM);
			case .VkDataGraphPipelineInfoARM: return typeof(VkDataGraphPipelineInfoARM);
			case .VkDataGraphPipelineCompilerControlCreateInfoARM: return typeof(VkDataGraphPipelineCompilerControlCreateInfoARM);
			case .VkDataGraphPipelineSessionBindPointRequirementsInfoARM: return typeof(VkDataGraphPipelineSessionBindPointRequirementsInfoARM);
			case .VkDataGraphPipelineSessionBindPointRequirementARM: return typeof(VkDataGraphPipelineSessionBindPointRequirementARM);
			case .VkDataGraphPipelineIdentifierCreateInfoARM: return typeof(VkDataGraphPipelineIdentifierCreateInfoARM);
			case .VkDataGraphPipelineDispatchInfoARM: return typeof(VkDataGraphPipelineDispatchInfoARM);
			case .VkDataGraphProcessingEngineCreateInfoARM: return typeof(VkDataGraphProcessingEngineCreateInfoARM);
			case .VkQueueFamilyDataGraphProcessingEnginePropertiesARM: return typeof(VkQueueFamilyDataGraphProcessingEnginePropertiesARM);
			case .VkQueueFamilyDataGraphPropertiesARM: return typeof(VkQueueFamilyDataGraphPropertiesARM);
			case .VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM: return typeof(VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM);
			case .VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM: return typeof(VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM);
			case .VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM: return typeof(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM);
			case .VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM: return typeof(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM);
			case .VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR: return typeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR);
			case .VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR: return typeof(VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR);
			case .VkVideoDecodeAv1CapabilitiesKHR: return typeof(VkVideoDecodeAV1CapabilitiesKHR);
			case .VkVideoDecodeAv1PictureInfoKHR: return typeof(VkVideoDecodeAV1PictureInfoKHR);
			case .VkVideoDecodeAv1ProfileInfoKHR: return typeof(VkVideoDecodeAV1ProfileInfoKHR);
			case .VkVideoDecodeAv1SessionParametersCreateInfoKHR: return typeof(VkVideoDecodeAV1SessionParametersCreateInfoKHR);
			case .VkVideoDecodeAv1DpbSlotInfoKHR: return typeof(VkVideoDecodeAV1DpbSlotInfoKHR);
			case .VkVideoEncodeAv1CapabilitiesKHR: return typeof(VkVideoEncodeAV1CapabilitiesKHR);
			case .VkVideoEncodeAv1SessionParametersCreateInfoKHR: return typeof(VkVideoEncodeAV1SessionParametersCreateInfoKHR);
			case .VkVideoEncodeAv1PictureInfoKHR: return typeof(VkVideoEncodeAV1PictureInfoKHR);
			case .VkVideoEncodeAv1DpbSlotInfoKHR: return typeof(VkVideoEncodeAV1DpbSlotInfoKHR);
			case .VkPhysicalDeviceVideoEncodeAv1FeaturesKHR: return typeof(VkPhysicalDeviceVideoEncodeAV1FeaturesKHR);
			case .VkVideoEncodeAv1ProfileInfoKHR: return typeof(VkVideoEncodeAV1ProfileInfoKHR);
			case .VkVideoEncodeAv1RateControlInfoKHR: return typeof(VkVideoEncodeAV1RateControlInfoKHR);
			case .VkVideoEncodeAv1RateControlLayerInfoKHR: return typeof(VkVideoEncodeAV1RateControlLayerInfoKHR);
			case .VkVideoEncodeAv1QualityLevelPropertiesKHR: return typeof(VkVideoEncodeAV1QualityLevelPropertiesKHR);
			case .VkVideoEncodeAv1SessionCreateInfoKHR: return typeof(VkVideoEncodeAV1SessionCreateInfoKHR);
			case .VkVideoEncodeAv1GopRemainingFrameInfoKHR: return typeof(VkVideoEncodeAV1GopRemainingFrameInfoKHR);
			case .VkPhysicalDeviceVideoDecodeVp9FeaturesKHR: return typeof(VkPhysicalDeviceVideoDecodeVP9FeaturesKHR);
			case .VkVideoDecodeVp9CapabilitiesKHR: return typeof(VkVideoDecodeVP9CapabilitiesKHR);
			case .VkVideoDecodeVp9PictureInfoKHR: return typeof(VkVideoDecodeVP9PictureInfoKHR);
			case .VkVideoDecodeVp9ProfileInfoKHR: return typeof(VkVideoDecodeVP9ProfileInfoKHR);
			case .VkPhysicalDeviceVideoMaintenance1FeaturesKHR: return typeof(VkPhysicalDeviceVideoMaintenance1FeaturesKHR);
			case .VkVideoInlineQueryInfoKHR: return typeof(VkVideoInlineQueryInfoKHR);
			case .VkPhysicalDevicePerStageDescriptorSetFeaturesNV: return typeof(VkPhysicalDevicePerStageDescriptorSetFeaturesNV);
			case .VkPhysicalDeviceImageProcessing2FeaturesQCOM: return typeof(VkPhysicalDeviceImageProcessing2FeaturesQCOM);
			case .VkPhysicalDeviceImageProcessing2PropertiesQCOM: return typeof(VkPhysicalDeviceImageProcessing2PropertiesQCOM);
			case .VkSamplerBlockMatchWindowCreateInfoQCOM: return typeof(VkSamplerBlockMatchWindowCreateInfoQCOM);
			case .VkSamplerCubicWeightsCreateInfoQCOM: return typeof(VkSamplerCubicWeightsCreateInfoQCOM);
			case .VkPhysicalDeviceCubicWeightsFeaturesQCOM: return typeof(VkPhysicalDeviceCubicWeightsFeaturesQCOM);
			case .VkBlitImageCubicWeightsInfoQCOM: return typeof(VkBlitImageCubicWeightsInfoQCOM);
			case .VkPhysicalDeviceYcbcrDegammaFeaturesQCOM: return typeof(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM);
			case .VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM: return typeof(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM);
			case .VkPhysicalDeviceCubicClampFeaturesQCOM: return typeof(VkPhysicalDeviceCubicClampFeaturesQCOM);
			case .VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT: return typeof(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT);
			case .VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR: return typeof(VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR);
			case .VkAttachmentFeedbackLoopInfoEXT: return typeof(VkAttachmentFeedbackLoopInfoEXT);
			case .VkPhysicalDeviceLayeredDriverPropertiesMSFT: return typeof(VkPhysicalDeviceLayeredDriverPropertiesMSFT);
			case .VkCalibratedTimestampInfoKHR: return typeof(VkCalibratedTimestampInfoKHR);
			case .VkSetDescriptorBufferOffsetsInfoEXT: return typeof(VkSetDescriptorBufferOffsetsInfoEXT);
			case .VkBindDescriptorBufferEmbeddedSamplersInfoEXT: return typeof(VkBindDescriptorBufferEmbeddedSamplersInfoEXT);
			case .VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV: return typeof(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV);
			case .VkPhysicalDeviceTileMemoryHeapFeaturesQCOM: return typeof(VkPhysicalDeviceTileMemoryHeapFeaturesQCOM);
			case .VkPhysicalDeviceTileMemoryHeapPropertiesQCOM: return typeof(VkPhysicalDeviceTileMemoryHeapPropertiesQCOM);
			case .VkTileMemoryRequirementsQCOM: return typeof(VkTileMemoryRequirementsQCOM);
			case .VkTileMemoryBindInfoQCOM: return typeof(VkTileMemoryBindInfoQCOM);
			case .VkTileMemorySizeInfoQCOM: return typeof(VkTileMemorySizeInfoQCOM);
			case .VkDisplaySurfaceStereoCreateInfoNV: return typeof(VkDisplaySurfaceStereoCreateInfoNV);
			case .VkDisplayModeStereoPropertiesNV: return typeof(VkDisplayModeStereoPropertiesNV);
			case .VkVideoEncodeIntraRefreshCapabilitiesKHR: return typeof(VkVideoEncodeIntraRefreshCapabilitiesKHR);
			case .VkVideoEncodeSessionIntraRefreshCreateInfoKHR: return typeof(VkVideoEncodeSessionIntraRefreshCreateInfoKHR);
			case .VkVideoEncodeIntraRefreshInfoKHR: return typeof(VkVideoEncodeIntraRefreshInfoKHR);
			case .VkVideoReferenceIntraRefreshInfoKHR: return typeof(VkVideoReferenceIntraRefreshInfoKHR);
			case .VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR: return typeof(VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR);
			case .VkVideoEncodeQuantizationMapCapabilitiesKHR: return typeof(VkVideoEncodeQuantizationMapCapabilitiesKHR);
			case .VkVideoFormatQuantizationMapPropertiesKHR: return typeof(VkVideoFormatQuantizationMapPropertiesKHR);
			case .VkVideoEncodeQuantizationMapInfoKHR: return typeof(VkVideoEncodeQuantizationMapInfoKHR);
			case .VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR: return typeof(VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR);
			case .VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR: return typeof(VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR);
			case .VkVideoEncodeH264QuantizationMapCapabilitiesKHR: return typeof(VkVideoEncodeH264QuantizationMapCapabilitiesKHR);
			case .VkVideoEncodeH265QuantizationMapCapabilitiesKHR: return typeof(VkVideoEncodeH265QuantizationMapCapabilitiesKHR);
			case .VkVideoFormatH265QuantizationMapPropertiesKHR: return typeof(VkVideoFormatH265QuantizationMapPropertiesKHR);
			case .VkVideoEncodeAv1QuantizationMapCapabilitiesKHR: return typeof(VkVideoEncodeAV1QuantizationMapCapabilitiesKHR);
			case .VkVideoFormatAv1QuantizationMapPropertiesKHR: return typeof(VkVideoFormatAV1QuantizationMapPropertiesKHR);
			case .VkPhysicalDeviceRawAccessChainsFeaturesNV: return typeof(VkPhysicalDeviceRawAccessChainsFeaturesNV);
			case .VkExternalComputeQueueDeviceCreateInfoNV: return typeof(VkExternalComputeQueueDeviceCreateInfoNV);
			case .VkExternalComputeQueueCreateInfoNV: return typeof(VkExternalComputeQueueCreateInfoNV);
			case .VkExternalComputeQueueDataParamsNV: return typeof(VkExternalComputeQueueDataParamsNV);
			case .VkPhysicalDeviceExternalComputeQueuePropertiesNV: return typeof(VkPhysicalDeviceExternalComputeQueuePropertiesNV);
			case .VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR: return typeof(VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR);
			case .VkPhysicalDeviceCommandBufferInheritanceFeaturesNV: return typeof(VkPhysicalDeviceCommandBufferInheritanceFeaturesNV);
			case .VkPhysicalDeviceMaintenance7FeaturesKHR: return typeof(VkPhysicalDeviceMaintenance7FeaturesKHR);
			case .VkPhysicalDeviceMaintenance7PropertiesKHR: return typeof(VkPhysicalDeviceMaintenance7PropertiesKHR);
			case .VkPhysicalDeviceLayeredApiPropertiesListKHR: return typeof(VkPhysicalDeviceLayeredApiPropertiesListKHR);
			case .VkPhysicalDeviceLayeredApiPropertiesKHR: return typeof(VkPhysicalDeviceLayeredApiPropertiesKHR);
			case .VkPhysicalDeviceLayeredApiVulkanPropertiesKHR: return typeof(VkPhysicalDeviceLayeredApiVulkanPropertiesKHR);
			case .VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV: return typeof(VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV);
			case .VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT: return typeof(VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT);
			case .VkPhysicalDeviceShaderFloat8FeaturesEXT: return typeof(VkPhysicalDeviceShaderFloat8FeaturesEXT);
			case .VkPhysicalDeviceRayTracingValidationFeaturesNV: return typeof(VkPhysicalDeviceRayTracingValidationFeaturesNV);
			case .VkPhysicalDeviceClusterAccelerationStructureFeaturesNV: return typeof(VkPhysicalDeviceClusterAccelerationStructureFeaturesNV);
			case .VkPhysicalDeviceClusterAccelerationStructurePropertiesNV: return typeof(VkPhysicalDeviceClusterAccelerationStructurePropertiesNV);
			case .VkClusterAccelerationStructureClustersBottomLevelInputNV: return typeof(VkClusterAccelerationStructureClustersBottomLevelInputNV);
			case .VkClusterAccelerationStructureTriangleClusterInputNV: return typeof(VkClusterAccelerationStructureTriangleClusterInputNV);
			case .VkClusterAccelerationStructureMoveObjectsInputNV: return typeof(VkClusterAccelerationStructureMoveObjectsInputNV);
			case .VkClusterAccelerationStructureInputInfoNV: return typeof(VkClusterAccelerationStructureInputInfoNV);
			case .VkClusterAccelerationStructureCommandsInfoNV: return typeof(VkClusterAccelerationStructureCommandsInfoNV);
			case .VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV: return typeof(VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV);
			case .VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV: return typeof(VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV);
			case .VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV: return typeof(VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV);
			case .VkWriteDescriptorSetPartitionedAccelerationStructureNV: return typeof(VkWriteDescriptorSetPartitionedAccelerationStructureNV);
			case .VkPartitionedAccelerationStructureInstancesInputNV: return typeof(VkPartitionedAccelerationStructureInstancesInputNV);
			case .VkBuildPartitionedAccelerationStructureInfoNV: return typeof(VkBuildPartitionedAccelerationStructureInfoNV);
			case .VkPartitionedAccelerationStructureFlagsNV: return typeof(VkPartitionedAccelerationStructureFlagsNV);
			case .VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT: return typeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT);
			case .VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT: return typeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT);
			case .VkGeneratedCommandsMemoryRequirementsInfoEXT: return typeof(VkGeneratedCommandsMemoryRequirementsInfoEXT);
			case .VkIndirectExecutionSetCreateInfoEXT: return typeof(VkIndirectExecutionSetCreateInfoEXT);
			case .VkGeneratedCommandsInfoEXT: return typeof(VkGeneratedCommandsInfoEXT);
			case .VkIndirectCommandsLayoutCreateInfoEXT: return typeof(VkIndirectCommandsLayoutCreateInfoEXT);
			case .VkIndirectCommandsLayoutTokenEXT: return typeof(VkIndirectCommandsLayoutTokenEXT);
			case .VkWriteIndirectExecutionSetPipelineEXT: return typeof(VkWriteIndirectExecutionSetPipelineEXT);
			case .VkWriteIndirectExecutionSetShaderEXT: return typeof(VkWriteIndirectExecutionSetShaderEXT);
			case .VkIndirectExecutionSetPipelineInfoEXT: return typeof(VkIndirectExecutionSetPipelineInfoEXT);
			case .VkIndirectExecutionSetShaderInfoEXT: return typeof(VkIndirectExecutionSetShaderInfoEXT);
			case .VkIndirectExecutionSetShaderLayoutInfoEXT: return typeof(VkIndirectExecutionSetShaderLayoutInfoEXT);
			case .VkGeneratedCommandsPipelineInfoEXT: return typeof(VkGeneratedCommandsPipelineInfoEXT);
			case .VkGeneratedCommandsShaderInfoEXT: return typeof(VkGeneratedCommandsShaderInfoEXT);
			case .VkPhysicalDeviceMaintenance8FeaturesKHR: return typeof(VkPhysicalDeviceMaintenance8FeaturesKHR);
			case .VkMemoryBarrierAccessFlags3KHR: return typeof(VkMemoryBarrierAccessFlags3KHR);
			case .VkPhysicalDeviceImageAlignmentControlFeaturesMESA: return typeof(VkPhysicalDeviceImageAlignmentControlFeaturesMESA);
			case .VkPhysicalDeviceImageAlignmentControlPropertiesMESA: return typeof(VkPhysicalDeviceImageAlignmentControlPropertiesMESA);
			case .VkImageAlignmentControlCreateInfoMESA: return typeof(VkImageAlignmentControlCreateInfoMESA);
			case .VkPhysicalDeviceDepthClampControlFeaturesEXT: return typeof(VkPhysicalDeviceDepthClampControlFeaturesEXT);
			case .VkPipelineViewportDepthClampControlCreateInfoEXT: return typeof(VkPipelineViewportDepthClampControlCreateInfoEXT);
			case .VkPhysicalDeviceMaintenance9FeaturesKHR: return typeof(VkPhysicalDeviceMaintenance9FeaturesKHR);
			case .VkPhysicalDeviceMaintenance9PropertiesKHR: return typeof(VkPhysicalDeviceMaintenance9PropertiesKHR);
			case .VkQueueFamilyOwnershipTransferPropertiesKHR: return typeof(VkQueueFamilyOwnershipTransferPropertiesKHR);
			case .VkPhysicalDeviceVideoMaintenance2FeaturesKHR: return typeof(VkPhysicalDeviceVideoMaintenance2FeaturesKHR);
			case .VkVideoDecodeH264InlineSessionParametersInfoKHR: return typeof(VkVideoDecodeH264InlineSessionParametersInfoKHR);
			case .VkVideoDecodeH265InlineSessionParametersInfoKHR: return typeof(VkVideoDecodeH265InlineSessionParametersInfoKHR);
			case .VkVideoDecodeAv1InlineSessionParametersInfoKHR: return typeof(VkVideoDecodeAV1InlineSessionParametersInfoKHR);
			case .VkPhysicalDeviceHdrVividFeaturesHUAWEI: return typeof(VkPhysicalDeviceHdrVividFeaturesHUAWEI);
			case .VkHdrVividDynamicMetadataHUAWEI: return typeof(VkHdrVividDynamicMetadataHUAWEI);
			case .VkPhysicalDeviceCooperativeMatrix2FeaturesNV: return typeof(VkPhysicalDeviceCooperativeMatrix2FeaturesNV);
			case .VkCooperativeMatrixFlexibleDimensionsPropertiesNV: return typeof(VkCooperativeMatrixFlexibleDimensionsPropertiesNV);
			case .VkPhysicalDeviceCooperativeMatrix2PropertiesNV: return typeof(VkPhysicalDeviceCooperativeMatrix2PropertiesNV);
			case .VkPhysicalDevicePipelineOpacityMicromapFeaturesARM: return typeof(VkPhysicalDevicePipelineOpacityMicromapFeaturesARM);
			case .VkPhysicalDeviceDepthClampZeroOneFeaturesKHR: return typeof(VkPhysicalDeviceDepthClampZeroOneFeaturesKHR);
			case .VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT: return typeof(VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT);
			case .VkPhysicalDeviceFormatPackFeaturesARM: return typeof(VkPhysicalDeviceFormatPackFeaturesARM);
			case .VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE: return typeof(VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE);
			case .VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE: return typeof(VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE);
			case .VkPipelineFragmentDensityMapLayeredCreateInfoVALVE: return typeof(VkPipelineFragmentDensityMapLayeredCreateInfoVALVE);
			case .VkPhysicalDeviceRobustness2FeaturesKHR: return typeof(VkPhysicalDeviceRobustness2FeaturesKHR);
			case .VkPhysicalDeviceRobustness2PropertiesKHR: return typeof(VkPhysicalDeviceRobustness2PropertiesKHR);
			case .VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT: return typeof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT);
			case .VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT: return typeof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT);
			case .VkRenderPassFragmentDensityMapOffsetEndInfoEXT: return typeof(VkRenderPassFragmentDensityMapOffsetEndInfoEXT);
			case .VkRenderingEndInfoEXT: return typeof(VkRenderingEndInfoEXT);
			case .VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT: return typeof(VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT);
			case .VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR: return typeof(VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR);
			case .VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC: return typeof(VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC);
			default: return null;
			}
		}
	}
}

namespace Vulkan.Metadata;

enum VulkanCommand
{
	case vkCreateInstance;
	case vkDestroyInstance;
	case vkEnumeratePhysicalDevices;
	case vkGetDeviceProcAddr;
	case vkGetInstanceProcAddr;
	case vkGetPhysicalDeviceProperties;
	case vkGetPhysicalDeviceQueueFamilyProperties;
	case vkGetPhysicalDeviceMemoryProperties;
	case vkGetPhysicalDeviceFeatures;
	case vkGetPhysicalDeviceFormatProperties;
	case vkGetPhysicalDeviceImageFormatProperties;
	case vkCreateDevice;
	case vkDestroyDevice;
	case vkEnumerateInstanceVersion;
	case vkEnumerateInstanceLayerProperties;
	case vkEnumerateInstanceExtensionProperties;
	case vkEnumerateDeviceLayerProperties;
	case vkEnumerateDeviceExtensionProperties;
	case vkGetDeviceQueue;
	case vkQueueSubmit;
	case vkQueueWaitIdle;
	case vkDeviceWaitIdle;
	case vkAllocateMemory;
	case vkFreeMemory;
	case vkMapMemory;
	case vkUnmapMemory;
	case vkFlushMappedMemoryRanges;
	case vkInvalidateMappedMemoryRanges;
	case vkGetDeviceMemoryCommitment;
	case vkGetBufferMemoryRequirements;
	case vkBindBufferMemory;
	case vkGetImageMemoryRequirements;
	case vkBindImageMemory;
	case vkGetImageSparseMemoryRequirements;
	case vkGetPhysicalDeviceSparseImageFormatProperties;
	case vkQueueBindSparse;
	case vkCreateFence;
	case vkDestroyFence;
	case vkResetFences;
	case vkGetFenceStatus;
	case vkWaitForFences;
	case vkCreateSemaphore;
	case vkDestroySemaphore;
	case vkCreateEvent;
	case vkDestroyEvent;
	case vkGetEventStatus;
	case vkSetEvent;
	case vkResetEvent;
	case vkCreateQueryPool;
	case vkDestroyQueryPool;
	case vkGetQueryPoolResults;
	case vkResetQueryPool;
	case vkCreateBuffer;
	case vkDestroyBuffer;
	case vkCreateBufferView;
	case vkDestroyBufferView;
	case vkCreateImage;
	case vkDestroyImage;
	case vkGetImageSubresourceLayout;
	case vkCreateImageView;
	case vkDestroyImageView;
	case vkCreateShaderModule;
	case vkDestroyShaderModule;
	case vkCreatePipelineCache;
	case vkDestroyPipelineCache;
	case vkGetPipelineCacheData;
	case vkMergePipelineCaches;
	case vkCreatePipelineBinariesKHR;
	case vkDestroyPipelineBinaryKHR;
	case vkGetPipelineKeyKHR;
	case vkGetPipelineBinaryDataKHR;
	case vkReleaseCapturedPipelineDataKHR;
	case vkCreateGraphicsPipelines;
	case vkCreateComputePipelines;
	case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	case vkDestroyPipeline;
	case vkCreatePipelineLayout;
	case vkDestroyPipelineLayout;
	case vkCreateSampler;
	case vkDestroySampler;
	case vkCreateDescriptorSetLayout;
	case vkDestroyDescriptorSetLayout;
	case vkCreateDescriptorPool;
	case vkDestroyDescriptorPool;
	case vkResetDescriptorPool;
	case vkAllocateDescriptorSets;
	case vkFreeDescriptorSets;
	case vkUpdateDescriptorSets;
	case vkCreateFramebuffer;
	case vkDestroyFramebuffer;
	case vkCreateRenderPass;
	case vkDestroyRenderPass;
	case vkGetRenderAreaGranularity;
	case vkGetRenderingAreaGranularity;
	case vkCreateCommandPool;
	case vkDestroyCommandPool;
	case vkResetCommandPool;
	case vkAllocateCommandBuffers;
	case vkFreeCommandBuffers;
	case vkBeginCommandBuffer;
	case vkEndCommandBuffer;
	case vkResetCommandBuffer;
	case vkCmdBindPipeline;
	case vkCmdSetAttachmentFeedbackLoopEnableEXT;
	case vkCmdSetViewport;
	case vkCmdSetScissor;
	case vkCmdSetLineWidth;
	case vkCmdSetDepthBias;
	case vkCmdSetBlendConstants;
	case vkCmdSetDepthBounds;
	case vkCmdSetStencilCompareMask;
	case vkCmdSetStencilWriteMask;
	case vkCmdSetStencilReference;
	case vkCmdBindDescriptorSets;
	case vkCmdBindIndexBuffer;
	case vkCmdBindVertexBuffers;
	case vkCmdDraw;
	case vkCmdDrawIndexed;
	case vkCmdDrawMultiEXT;
	case vkCmdDrawMultiIndexedEXT;
	case vkCmdDrawIndirect;
	case vkCmdDrawIndexedIndirect;
	case vkCmdDispatch;
	case vkCmdDispatchIndirect;
	case vkCmdSubpassShadingHUAWEI;
	case vkCmdDrawClusterHUAWEI;
	case vkCmdDrawClusterIndirectHUAWEI;
	case vkCmdUpdatePipelineIndirectBufferNV;
	case vkCmdCopyBuffer;
	case vkCmdCopyImage;
	case vkCmdBlitImage;
	case vkCmdCopyBufferToImage;
	case vkCmdCopyImageToBuffer;
	case vkCmdCopyMemoryIndirectNV;
	case vkCmdCopyMemoryToImageIndirectNV;
	case vkCmdUpdateBuffer;
	case vkCmdFillBuffer;
	case vkCmdClearColorImage;
	case vkCmdClearDepthStencilImage;
	case vkCmdClearAttachments;
	case vkCmdResolveImage;
	case vkCmdSetEvent;
	case vkCmdResetEvent;
	case vkCmdWaitEvents;
	case vkCmdPipelineBarrier;
	case vkCmdBeginQuery;
	case vkCmdEndQuery;
	case vkCmdBeginConditionalRenderingEXT;
	case vkCmdEndConditionalRenderingEXT;
	case vkCmdResetQueryPool;
	case vkCmdWriteTimestamp;
	case vkCmdCopyQueryPoolResults;
	case vkCmdPushConstants;
	case vkCmdBeginRenderPass;
	case vkCmdNextSubpass;
	case vkCmdEndRenderPass;
	case vkCmdExecuteCommands;
	case vkGetPhysicalDeviceDisplayPropertiesKHR;
	case vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	case vkGetDisplayPlaneSupportedDisplaysKHR;
	case vkGetDisplayModePropertiesKHR;
	case vkCreateDisplayModeKHR;
	case vkGetDisplayPlaneCapabilitiesKHR;
	case vkCreateDisplayPlaneSurfaceKHR;
	case vkCreateSharedSwapchainsKHR;
	case vkDestroySurfaceKHR;
	case vkGetPhysicalDeviceSurfaceSupportKHR;
	case vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	case vkGetPhysicalDeviceSurfaceFormatsKHR;
	case vkGetPhysicalDeviceSurfacePresentModesKHR;
	case vkCreateSwapchainKHR;
	case vkDestroySwapchainKHR;
	case vkGetSwapchainImagesKHR;
	case vkAcquireNextImageKHR;
	case vkQueuePresentKHR;
	case vkCreateDebugReportCallbackEXT;
	case vkDestroyDebugReportCallbackEXT;
	case vkDebugReportMessageEXT;
	case vkDebugMarkerSetObjectNameEXT;
	case vkDebugMarkerSetObjectTagEXT;
	case vkCmdDebugMarkerBeginEXT;
	case vkCmdDebugMarkerEndEXT;
	case vkCmdDebugMarkerInsertEXT;
	case vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	case vkCmdExecuteGeneratedCommandsNV;
	case vkCmdPreprocessGeneratedCommandsNV;
	case vkCmdBindPipelineShaderGroupNV;
	case vkGetGeneratedCommandsMemoryRequirementsNV;
	case vkCreateIndirectCommandsLayoutNV;
	case vkDestroyIndirectCommandsLayoutNV;
	case vkCmdExecuteGeneratedCommandsEXT;
	case vkCmdPreprocessGeneratedCommandsEXT;
	case vkGetGeneratedCommandsMemoryRequirementsEXT;
	case vkCreateIndirectCommandsLayoutEXT;
	case vkDestroyIndirectCommandsLayoutEXT;
	case vkCreateIndirectExecutionSetEXT;
	case vkDestroyIndirectExecutionSetEXT;
	case vkUpdateIndirectExecutionSetPipelineEXT;
	case vkUpdateIndirectExecutionSetShaderEXT;
	case vkGetPhysicalDeviceFeatures2;
	case vkGetPhysicalDeviceProperties2;
	case vkGetPhysicalDeviceFormatProperties2;
	case vkGetPhysicalDeviceImageFormatProperties2;
	case vkGetPhysicalDeviceQueueFamilyProperties2;
	case vkGetPhysicalDeviceMemoryProperties2;
	case vkGetPhysicalDeviceSparseImageFormatProperties2;
	case vkCmdPushDescriptorSet;
	case vkTrimCommandPool;
	case vkGetPhysicalDeviceExternalBufferProperties;
	case vkGetMemoryFdKHR;
	case vkGetMemoryFdPropertiesKHR;
	case vkGetMemoryRemoteAddressNV;
	case vkGetPhysicalDeviceExternalSemaphoreProperties;
	case vkGetSemaphoreFdKHR;
	case vkImportSemaphoreFdKHR;
	case vkGetPhysicalDeviceExternalFenceProperties;
	case vkGetFenceFdKHR;
	case vkImportFenceFdKHR;
	case vkReleaseDisplayEXT;
	case vkDisplayPowerControlEXT;
	case vkRegisterDeviceEventEXT;
	case vkRegisterDisplayEventEXT;
	case vkGetSwapchainCounterEXT;
	case vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	case vkEnumeratePhysicalDeviceGroups;
	case vkGetDeviceGroupPeerMemoryFeatures;
	case vkBindBufferMemory2;
	case vkBindImageMemory2;
	case vkCmdSetDeviceMask;
	case vkGetDeviceGroupPresentCapabilitiesKHR;
	case vkGetDeviceGroupSurfacePresentModesKHR;
	case vkAcquireNextImage2KHR;
	case vkCmdDispatchBase;
	case vkGetPhysicalDevicePresentRectanglesKHR;
	case vkCreateDescriptorUpdateTemplate;
	case vkDestroyDescriptorUpdateTemplate;
	case vkUpdateDescriptorSetWithTemplate;
	case vkCmdPushDescriptorSetWithTemplate;
	case vkSetHdrMetadataEXT;
	case vkGetSwapchainStatusKHR;
	case vkGetRefreshCycleDurationGOOGLE;
	case vkGetPastPresentationTimingGOOGLE;
	case vkCmdSetViewportWScalingNV;
	case vkCmdSetDiscardRectangleEXT;
	case vkCmdSetDiscardRectangleEnableEXT;
	case vkCmdSetDiscardRectangleModeEXT;
	case vkCmdSetSampleLocationsEXT;
	case vkGetPhysicalDeviceMultisamplePropertiesEXT;
	case vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	case vkGetPhysicalDeviceSurfaceFormats2KHR;
	case vkGetPhysicalDeviceDisplayProperties2KHR;
	case vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	case vkGetDisplayModeProperties2KHR;
	case vkGetDisplayPlaneCapabilities2KHR;
	case vkGetBufferMemoryRequirements2;
	case vkGetImageMemoryRequirements2;
	case vkGetImageSparseMemoryRequirements2;
	case vkGetDeviceBufferMemoryRequirements;
	case vkGetDeviceImageMemoryRequirements;
	case vkGetDeviceImageSparseMemoryRequirements;
	case vkCreateSamplerYcbcrConversion;
	case vkDestroySamplerYcbcrConversion;
	case vkGetDeviceQueue2;
	case vkCreateValidationCacheEXT;
	case vkDestroyValidationCacheEXT;
	case vkGetValidationCacheDataEXT;
	case vkMergeValidationCachesEXT;
	case vkGetDescriptorSetLayoutSupport;
	case vkGetShaderInfoAMD;
	case vkSetLocalDimmingAMD;
	case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
	case vkGetCalibratedTimestampsKHR;
	case vkSetDebugUtilsObjectNameEXT;
	case vkSetDebugUtilsObjectTagEXT;
	case vkQueueBeginDebugUtilsLabelEXT;
	case vkQueueEndDebugUtilsLabelEXT;
	case vkQueueInsertDebugUtilsLabelEXT;
	case vkCmdBeginDebugUtilsLabelEXT;
	case vkCmdEndDebugUtilsLabelEXT;
	case vkCmdInsertDebugUtilsLabelEXT;
	case vkCreateDebugUtilsMessengerEXT;
	case vkDestroyDebugUtilsMessengerEXT;
	case vkSubmitDebugUtilsMessageEXT;
	case vkGetMemoryHostPointerPropertiesEXT;
	case vkCmdWriteBufferMarkerAMD;
	case vkCreateRenderPass2;
	case vkCmdBeginRenderPass2;
	case vkCmdNextSubpass2;
	case vkCmdEndRenderPass2;
	case vkGetSemaphoreCounterValue;
	case vkWaitSemaphores;
	case vkSignalSemaphore;
	case vkCmdDrawIndirectCount;
	case vkCmdDrawIndexedIndirectCount;
	case vkCmdSetCheckpointNV;
	case vkGetQueueCheckpointDataNV;
	case vkCmdBindTransformFeedbackBuffersEXT;
	case vkCmdBeginTransformFeedbackEXT;
	case vkCmdEndTransformFeedbackEXT;
	case vkCmdBeginQueryIndexedEXT;
	case vkCmdEndQueryIndexedEXT;
	case vkCmdDrawIndirectByteCountEXT;
	case vkCmdSetExclusiveScissorNV;
	case vkCmdSetExclusiveScissorEnableNV;
	case vkCmdBindShadingRateImageNV;
	case vkCmdSetViewportShadingRatePaletteNV;
	case vkCmdSetCoarseSampleOrderNV;
	case vkCmdDrawMeshTasksNV;
	case vkCmdDrawMeshTasksIndirectNV;
	case vkCmdDrawMeshTasksIndirectCountNV;
	case vkCmdDrawMeshTasksEXT;
	case vkCmdDrawMeshTasksIndirectEXT;
	case vkCmdDrawMeshTasksIndirectCountEXT;
	case vkCompileDeferredNV;
	case vkCreateAccelerationStructureNV;
	case vkCmdBindInvocationMaskHUAWEI;
	case vkDestroyAccelerationStructureKHR;
	case vkDestroyAccelerationStructureNV;
	case vkGetAccelerationStructureMemoryRequirementsNV;
	case vkBindAccelerationStructureMemoryNV;
	case vkCmdCopyAccelerationStructureNV;
	case vkCmdCopyAccelerationStructureKHR;
	case vkCopyAccelerationStructureKHR;
	case vkCmdCopyAccelerationStructureToMemoryKHR;
	case vkCopyAccelerationStructureToMemoryKHR;
	case vkCmdCopyMemoryToAccelerationStructureKHR;
	case vkCopyMemoryToAccelerationStructureKHR;
	case vkCmdWriteAccelerationStructuresPropertiesKHR;
	case vkCmdWriteAccelerationStructuresPropertiesNV;
	case vkCmdBuildAccelerationStructureNV;
	case vkWriteAccelerationStructuresPropertiesKHR;
	case vkCmdTraceRaysKHR;
	case vkCmdTraceRaysNV;
	case vkGetRayTracingShaderGroupHandlesKHR;
	case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	case vkGetAccelerationStructureHandleNV;
	case vkCreateRayTracingPipelinesNV;
	case vkCreateRayTracingPipelinesKHR;
	case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
	case vkCmdTraceRaysIndirectKHR;
	case vkCmdTraceRaysIndirect2KHR;
	case vkGetClusterAccelerationStructureBuildSizesNV;
	case vkCmdBuildClusterAccelerationStructureIndirectNV;
	case vkGetDeviceAccelerationStructureCompatibilityKHR;
	case vkGetRayTracingShaderGroupStackSizeKHR;
	case vkCmdSetRayTracingPipelineStackSizeKHR;
	case vkGetImageViewHandleNVX;
	case vkGetImageViewHandle64NVX;
	case vkGetImageViewAddressNVX;
	case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	case vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	case vkAcquireProfilingLockKHR;
	case vkReleaseProfilingLockKHR;
	case vkGetImageDrmFormatModifierPropertiesEXT;
	case vkGetBufferOpaqueCaptureAddress;
	case vkGetBufferDeviceAddress;
	case vkCreateHeadlessSurfaceEXT;
	case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	case vkInitializePerformanceApiINTEL;
	case vkUninitializePerformanceApiINTEL;
	case vkCmdSetPerformanceMarkerINTEL;
	case vkCmdSetPerformanceStreamMarkerINTEL;
	case vkCmdSetPerformanceOverrideINTEL;
	case vkAcquirePerformanceConfigurationINTEL;
	case vkReleasePerformanceConfigurationINTEL;
	case vkQueueSetPerformanceConfigurationINTEL;
	case vkGetPerformanceParameterINTEL;
	case vkGetDeviceMemoryOpaqueCaptureAddress;
	case vkGetPipelineExecutablePropertiesKHR;
	case vkGetPipelineExecutableStatisticsKHR;
	case vkGetPipelineExecutableInternalRepresentationsKHR;
	case vkCmdSetLineStipple;
	case vkGetPhysicalDeviceToolProperties;
	case vkCreateAccelerationStructureKHR;
	case vkCmdBuildAccelerationStructuresKHR;
	case vkCmdBuildAccelerationStructuresIndirectKHR;
	case vkBuildAccelerationStructuresKHR;
	case vkGetAccelerationStructureDeviceAddressKHR;
	case vkCreateDeferredOperationKHR;
	case vkDestroyDeferredOperationKHR;
	case vkGetDeferredOperationMaxConcurrencyKHR;
	case vkGetDeferredOperationResultKHR;
	case vkDeferredOperationJoinKHR;
	case vkGetPipelineIndirectMemoryRequirementsNV;
	case vkGetPipelineIndirectDeviceAddressNV;
	case vkAntiLagUpdateAMD;
	case vkCmdSetCullMode;
	case vkCmdSetFrontFace;
	case vkCmdSetPrimitiveTopology;
	case vkCmdSetViewportWithCount;
	case vkCmdSetScissorWithCount;
	case vkCmdBindIndexBuffer2;
	case vkCmdBindVertexBuffers2;
	case vkCmdSetDepthTestEnable;
	case vkCmdSetDepthWriteEnable;
	case vkCmdSetDepthCompareOp;
	case vkCmdSetDepthBoundsTestEnable;
	case vkCmdSetStencilTestEnable;
	case vkCmdSetStencilOp;
	case vkCmdSetPatchControlPointsEXT;
	case vkCmdSetRasterizerDiscardEnable;
	case vkCmdSetDepthBiasEnable;
	case vkCmdSetLogicOpEXT;
	case vkCmdSetPrimitiveRestartEnable;
	case vkCmdSetTessellationDomainOriginEXT;
	case vkCmdSetDepthClampEnableEXT;
	case vkCmdSetPolygonModeEXT;
	case vkCmdSetRasterizationSamplesEXT;
	case vkCmdSetSampleMaskEXT;
	case vkCmdSetAlphaToCoverageEnableEXT;
	case vkCmdSetAlphaToOneEnableEXT;
	case vkCmdSetLogicOpEnableEXT;
	case vkCmdSetColorBlendEnableEXT;
	case vkCmdSetColorBlendEquationEXT;
	case vkCmdSetColorWriteMaskEXT;
	case vkCmdSetRasterizationStreamEXT;
	case vkCmdSetConservativeRasterizationModeEXT;
	case vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	case vkCmdSetDepthClipEnableEXT;
	case vkCmdSetSampleLocationsEnableEXT;
	case vkCmdSetColorBlendAdvancedEXT;
	case vkCmdSetProvokingVertexModeEXT;
	case vkCmdSetLineRasterizationModeEXT;
	case vkCmdSetLineStippleEnableEXT;
	case vkCmdSetDepthClipNegativeOneToOneEXT;
	case vkCmdSetViewportWScalingEnableNV;
	case vkCmdSetViewportSwizzleNV;
	case vkCmdSetCoverageToColorEnableNV;
	case vkCmdSetCoverageToColorLocationNV;
	case vkCmdSetCoverageModulationModeNV;
	case vkCmdSetCoverageModulationTableEnableNV;
	case vkCmdSetCoverageModulationTableNV;
	case vkCmdSetShadingRateImageEnableNV;
	case vkCmdSetCoverageReductionModeNV;
	case vkCmdSetRepresentativeFragmentTestEnableNV;
	case vkCreatePrivateDataSlot;
	case vkDestroyPrivateDataSlot;
	case vkSetPrivateData;
	case vkGetPrivateData;
	case vkCmdCopyBuffer2;
	case vkCmdCopyImage2;
	case vkCmdBlitImage2;
	case vkCmdCopyBufferToImage2;
	case vkCmdCopyImageToBuffer2;
	case vkCmdResolveImage2;
	case vkCmdSetFragmentShadingRateKHR;
	case vkGetPhysicalDeviceFragmentShadingRatesKHR;
	case vkCmdSetFragmentShadingRateEnumNV;
	case vkGetAccelerationStructureBuildSizesKHR;
	case vkCmdSetVertexInputEXT;
	case vkCmdSetColorWriteEnableEXT;
	case vkCmdSetEvent2;
	case vkCmdResetEvent2;
	case vkCmdWaitEvents2;
	case vkCmdPipelineBarrier2;
	case vkQueueSubmit2;
	case vkCmdWriteTimestamp2;
	case vkCmdWriteBufferMarker2AMD;
	case vkGetQueueCheckpointData2NV;
	case vkCopyMemoryToImage;
	case vkCopyImageToMemory;
	case vkCopyImageToImage;
	case vkTransitionImageLayout;
	case vkGetPhysicalDeviceVideoCapabilitiesKHR;
	case vkGetPhysicalDeviceVideoFormatPropertiesKHR;
	case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
	case vkCreateVideoSessionKHR;
	case vkDestroyVideoSessionKHR;
	case vkCreateVideoSessionParametersKHR;
	case vkUpdateVideoSessionParametersKHR;
	case vkGetEncodedVideoSessionParametersKHR;
	case vkDestroyVideoSessionParametersKHR;
	case vkGetVideoSessionMemoryRequirementsKHR;
	case vkBindVideoSessionMemoryKHR;
	case vkCmdDecodeVideoKHR;
	case vkCmdBeginVideoCodingKHR;
	case vkCmdControlVideoCodingKHR;
	case vkCmdEndVideoCodingKHR;
	case vkCmdEncodeVideoKHR;
	case vkCmdDecompressMemoryNV;
	case vkCmdDecompressMemoryIndirectCountNV;
	case vkGetPartitionedAccelerationStructuresBuildSizesNV;
	case vkCmdBuildPartitionedAccelerationStructuresNV;
	case vkCreateCuModuleNVX;
	case vkCreateCuFunctionNVX;
	case vkDestroyCuModuleNVX;
	case vkDestroyCuFunctionNVX;
	case vkCmdCuLaunchKernelNVX;
	case vkGetDescriptorSetLayoutSizeEXT;
	case vkGetDescriptorSetLayoutBindingOffsetEXT;
	case vkGetDescriptorEXT;
	case vkCmdBindDescriptorBuffersEXT;
	case vkCmdSetDescriptorBufferOffsetsEXT;
	case vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	case vkGetBufferOpaqueCaptureDescriptorDataEXT;
	case vkGetImageOpaqueCaptureDescriptorDataEXT;
	case vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	case vkGetSamplerOpaqueCaptureDescriptorDataEXT;
	case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
	case vkSetDeviceMemoryPriorityEXT;
	case vkAcquireDrmDisplayEXT;
	case vkGetDrmDisplayEXT;
	case vkWaitForPresent2KHR;
	case vkWaitForPresentKHR;
	case vkCmdBeginRendering;
	case vkCmdEndRendering;
	case vkCmdEndRendering2EXT;
	case vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	case vkGetDescriptorSetHostMappingVALVE;
	case vkCreateMicromapEXT;
	case vkCmdBuildMicromapsEXT;
	case vkBuildMicromapsEXT;
	case vkDestroyMicromapEXT;
	case vkCmdCopyMicromapEXT;
	case vkCopyMicromapEXT;
	case vkCmdCopyMicromapToMemoryEXT;
	case vkCopyMicromapToMemoryEXT;
	case vkCmdCopyMemoryToMicromapEXT;
	case vkCopyMemoryToMicromapEXT;
	case vkCmdWriteMicromapsPropertiesEXT;
	case vkWriteMicromapsPropertiesEXT;
	case vkGetDeviceMicromapCompatibilityEXT;
	case vkGetMicromapBuildSizesEXT;
	case vkGetShaderModuleIdentifierEXT;
	case vkGetShaderModuleCreateInfoIdentifierEXT;
	case vkGetImageSubresourceLayout2;
	case vkGetPipelinePropertiesEXT;
	case vkCmdBindTileMemoryQCOM;
	case vkGetFramebufferTilePropertiesQCOM;
	case vkGetDynamicRenderingTilePropertiesQCOM;
	case vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	case vkCreateOpticalFlowSessionNV;
	case vkDestroyOpticalFlowSessionNV;
	case vkBindOpticalFlowSessionImageNV;
	case vkCmdOpticalFlowExecuteNV;
	case vkGetDeviceFaultInfoEXT;
	case vkCmdSetDepthBias2EXT;
	case vkReleaseSwapchainImagesKHR;
	case vkGetDeviceImageSubresourceLayout;
	case vkMapMemory2;
	case vkUnmapMemory2;
	case vkCreateShadersEXT;
	case vkDestroyShaderEXT;
	case vkGetShaderBinaryDataEXT;
	case vkCmdBindShadersEXT;
	case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	case vkCmdBindDescriptorSets2;
	case vkCmdPushConstants2;
	case vkCmdPushDescriptorSet2;
	case vkCmdPushDescriptorSetWithTemplate2;
	case vkCmdSetDescriptorBufferOffsets2EXT;
	case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
	case vkSetLatencySleepModeNV;
	case vkLatencySleepNV;
	case vkSetLatencyMarkerNV;
	case vkGetLatencyTimingsNV;
	case vkQueueNotifyOutOfBandNV;
	case vkCmdSetRenderingAttachmentLocations;
	case vkCmdSetRenderingInputAttachmentIndices;
	case vkCmdSetDepthClampRangeEXT;
	case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
	case vkGetPhysicalDeviceCooperativeVectorPropertiesNV;
	case vkConvertCooperativeVectorMatrixNV;
	case vkCmdConvertCooperativeVectorMatrixNV;
	case vkCmdDispatchTileQCOM;
	case vkCmdBeginPerTileExecutionQCOM;
	case vkCmdEndPerTileExecutionQCOM;
	case vkCreateExternalComputeQueueNV;
	case vkDestroyExternalComputeQueueNV;
	case vkGetExternalComputeQueueDataNV;
	case vkCreateTensorARM;
	case vkDestroyTensorARM;
	case vkCreateTensorViewARM;
	case vkDestroyTensorViewARM;
	case vkGetTensorMemoryRequirementsARM;
	case vkBindTensorMemoryARM;
	case vkGetDeviceTensorMemoryRequirementsARM;
	case vkCmdCopyTensorARM;
	case vkGetTensorOpaqueCaptureDescriptorDataARM;
	case vkGetTensorViewOpaqueCaptureDescriptorDataARM;
	case vkGetPhysicalDeviceExternalTensorPropertiesARM;
	case vkCreateDataGraphPipelinesARM;
	case vkCreateDataGraphPipelineSessionARM;
	case vkGetDataGraphPipelineSessionBindPointRequirementsARM;
	case vkGetDataGraphPipelineSessionMemoryRequirementsARM;
	case vkBindDataGraphPipelineSessionMemoryARM;
	case vkDestroyDataGraphPipelineSessionARM;
	case vkCmdDispatchDataGraphARM;
	case vkGetDataGraphPipelineAvailablePropertiesARM;
	case vkGetDataGraphPipelinePropertiesARM;
	case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM;
	case vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM;

	public Type PFNType
	{
		get
		{
			switch (this)
			{
			case vkCreateInstance: return typeof(PFN_vkCreateInstance);
			case vkDestroyInstance: return typeof(PFN_vkDestroyInstance);
			case vkEnumeratePhysicalDevices: return typeof(PFN_vkEnumeratePhysicalDevices);
			case vkGetDeviceProcAddr: return typeof(PFN_vkGetDeviceProcAddr);
			case vkGetInstanceProcAddr: return typeof(PFN_vkGetInstanceProcAddr);
			case vkGetPhysicalDeviceProperties: return typeof(PFN_vkGetPhysicalDeviceProperties);
			case vkGetPhysicalDeviceQueueFamilyProperties: return typeof(PFN_vkGetPhysicalDeviceQueueFamilyProperties);
			case vkGetPhysicalDeviceMemoryProperties: return typeof(PFN_vkGetPhysicalDeviceMemoryProperties);
			case vkGetPhysicalDeviceFeatures: return typeof(PFN_vkGetPhysicalDeviceFeatures);
			case vkGetPhysicalDeviceFormatProperties: return typeof(PFN_vkGetPhysicalDeviceFormatProperties);
			case vkGetPhysicalDeviceImageFormatProperties: return typeof(PFN_vkGetPhysicalDeviceImageFormatProperties);
			case vkCreateDevice: return typeof(PFN_vkCreateDevice);
			case vkDestroyDevice: return typeof(PFN_vkDestroyDevice);
			case vkEnumerateInstanceVersion: return typeof(PFN_vkEnumerateInstanceVersion);
			case vkEnumerateInstanceLayerProperties: return typeof(PFN_vkEnumerateInstanceLayerProperties);
			case vkEnumerateInstanceExtensionProperties: return typeof(PFN_vkEnumerateInstanceExtensionProperties);
			case vkEnumerateDeviceLayerProperties: return typeof(PFN_vkEnumerateDeviceLayerProperties);
			case vkEnumerateDeviceExtensionProperties: return typeof(PFN_vkEnumerateDeviceExtensionProperties);
			case vkGetDeviceQueue: return typeof(PFN_vkGetDeviceQueue);
			case vkQueueSubmit: return typeof(PFN_vkQueueSubmit);
			case vkQueueWaitIdle: return typeof(PFN_vkQueueWaitIdle);
			case vkDeviceWaitIdle: return typeof(PFN_vkDeviceWaitIdle);
			case vkAllocateMemory: return typeof(PFN_vkAllocateMemory);
			case vkFreeMemory: return typeof(PFN_vkFreeMemory);
			case vkMapMemory: return typeof(PFN_vkMapMemory);
			case vkUnmapMemory: return typeof(PFN_vkUnmapMemory);
			case vkFlushMappedMemoryRanges: return typeof(PFN_vkFlushMappedMemoryRanges);
			case vkInvalidateMappedMemoryRanges: return typeof(PFN_vkInvalidateMappedMemoryRanges);
			case vkGetDeviceMemoryCommitment: return typeof(PFN_vkGetDeviceMemoryCommitment);
			case vkGetBufferMemoryRequirements: return typeof(PFN_vkGetBufferMemoryRequirements);
			case vkBindBufferMemory: return typeof(PFN_vkBindBufferMemory);
			case vkGetImageMemoryRequirements: return typeof(PFN_vkGetImageMemoryRequirements);
			case vkBindImageMemory: return typeof(PFN_vkBindImageMemory);
			case vkGetImageSparseMemoryRequirements: return typeof(PFN_vkGetImageSparseMemoryRequirements);
			case vkGetPhysicalDeviceSparseImageFormatProperties: return typeof(PFN_vkGetPhysicalDeviceSparseImageFormatProperties);
			case vkQueueBindSparse: return typeof(PFN_vkQueueBindSparse);
			case vkCreateFence: return typeof(PFN_vkCreateFence);
			case vkDestroyFence: return typeof(PFN_vkDestroyFence);
			case vkResetFences: return typeof(PFN_vkResetFences);
			case vkGetFenceStatus: return typeof(PFN_vkGetFenceStatus);
			case vkWaitForFences: return typeof(PFN_vkWaitForFences);
			case vkCreateSemaphore: return typeof(PFN_vkCreateSemaphore);
			case vkDestroySemaphore: return typeof(PFN_vkDestroySemaphore);
			case vkCreateEvent: return typeof(PFN_vkCreateEvent);
			case vkDestroyEvent: return typeof(PFN_vkDestroyEvent);
			case vkGetEventStatus: return typeof(PFN_vkGetEventStatus);
			case vkSetEvent: return typeof(PFN_vkSetEvent);
			case vkResetEvent: return typeof(PFN_vkResetEvent);
			case vkCreateQueryPool: return typeof(PFN_vkCreateQueryPool);
			case vkDestroyQueryPool: return typeof(PFN_vkDestroyQueryPool);
			case vkGetQueryPoolResults: return typeof(PFN_vkGetQueryPoolResults);
			case vkResetQueryPool: return typeof(PFN_vkResetQueryPool);
			case vkCreateBuffer: return typeof(PFN_vkCreateBuffer);
			case vkDestroyBuffer: return typeof(PFN_vkDestroyBuffer);
			case vkCreateBufferView: return typeof(PFN_vkCreateBufferView);
			case vkDestroyBufferView: return typeof(PFN_vkDestroyBufferView);
			case vkCreateImage: return typeof(PFN_vkCreateImage);
			case vkDestroyImage: return typeof(PFN_vkDestroyImage);
			case vkGetImageSubresourceLayout: return typeof(PFN_vkGetImageSubresourceLayout);
			case vkCreateImageView: return typeof(PFN_vkCreateImageView);
			case vkDestroyImageView: return typeof(PFN_vkDestroyImageView);
			case vkCreateShaderModule: return typeof(PFN_vkCreateShaderModule);
			case vkDestroyShaderModule: return typeof(PFN_vkDestroyShaderModule);
			case vkCreatePipelineCache: return typeof(PFN_vkCreatePipelineCache);
			case vkDestroyPipelineCache: return typeof(PFN_vkDestroyPipelineCache);
			case vkGetPipelineCacheData: return typeof(PFN_vkGetPipelineCacheData);
			case vkMergePipelineCaches: return typeof(PFN_vkMergePipelineCaches);
			case vkCreatePipelineBinariesKHR: return typeof(PFN_vkCreatePipelineBinariesKHR);
			case vkDestroyPipelineBinaryKHR: return typeof(PFN_vkDestroyPipelineBinaryKHR);
			case vkGetPipelineKeyKHR: return typeof(PFN_vkGetPipelineKeyKHR);
			case vkGetPipelineBinaryDataKHR: return typeof(PFN_vkGetPipelineBinaryDataKHR);
			case vkReleaseCapturedPipelineDataKHR: return typeof(PFN_vkReleaseCapturedPipelineDataKHR);
			case vkCreateGraphicsPipelines: return typeof(PFN_vkCreateGraphicsPipelines);
			case vkCreateComputePipelines: return typeof(PFN_vkCreateComputePipelines);
			case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: return typeof(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI);
			case vkDestroyPipeline: return typeof(PFN_vkDestroyPipeline);
			case vkCreatePipelineLayout: return typeof(PFN_vkCreatePipelineLayout);
			case vkDestroyPipelineLayout: return typeof(PFN_vkDestroyPipelineLayout);
			case vkCreateSampler: return typeof(PFN_vkCreateSampler);
			case vkDestroySampler: return typeof(PFN_vkDestroySampler);
			case vkCreateDescriptorSetLayout: return typeof(PFN_vkCreateDescriptorSetLayout);
			case vkDestroyDescriptorSetLayout: return typeof(PFN_vkDestroyDescriptorSetLayout);
			case vkCreateDescriptorPool: return typeof(PFN_vkCreateDescriptorPool);
			case vkDestroyDescriptorPool: return typeof(PFN_vkDestroyDescriptorPool);
			case vkResetDescriptorPool: return typeof(PFN_vkResetDescriptorPool);
			case vkAllocateDescriptorSets: return typeof(PFN_vkAllocateDescriptorSets);
			case vkFreeDescriptorSets: return typeof(PFN_vkFreeDescriptorSets);
			case vkUpdateDescriptorSets: return typeof(PFN_vkUpdateDescriptorSets);
			case vkCreateFramebuffer: return typeof(PFN_vkCreateFramebuffer);
			case vkDestroyFramebuffer: return typeof(PFN_vkDestroyFramebuffer);
			case vkCreateRenderPass: return typeof(PFN_vkCreateRenderPass);
			case vkDestroyRenderPass: return typeof(PFN_vkDestroyRenderPass);
			case vkGetRenderAreaGranularity: return typeof(PFN_vkGetRenderAreaGranularity);
			case vkGetRenderingAreaGranularity: return typeof(PFN_vkGetRenderingAreaGranularity);
			case vkCreateCommandPool: return typeof(PFN_vkCreateCommandPool);
			case vkDestroyCommandPool: return typeof(PFN_vkDestroyCommandPool);
			case vkResetCommandPool: return typeof(PFN_vkResetCommandPool);
			case vkAllocateCommandBuffers: return typeof(PFN_vkAllocateCommandBuffers);
			case vkFreeCommandBuffers: return typeof(PFN_vkFreeCommandBuffers);
			case vkBeginCommandBuffer: return typeof(PFN_vkBeginCommandBuffer);
			case vkEndCommandBuffer: return typeof(PFN_vkEndCommandBuffer);
			case vkResetCommandBuffer: return typeof(PFN_vkResetCommandBuffer);
			case vkCmdBindPipeline: return typeof(PFN_vkCmdBindPipeline);
			case vkCmdSetAttachmentFeedbackLoopEnableEXT: return typeof(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT);
			case vkCmdSetViewport: return typeof(PFN_vkCmdSetViewport);
			case vkCmdSetScissor: return typeof(PFN_vkCmdSetScissor);
			case vkCmdSetLineWidth: return typeof(PFN_vkCmdSetLineWidth);
			case vkCmdSetDepthBias: return typeof(PFN_vkCmdSetDepthBias);
			case vkCmdSetBlendConstants: return typeof(PFN_vkCmdSetBlendConstants);
			case vkCmdSetDepthBounds: return typeof(PFN_vkCmdSetDepthBounds);
			case vkCmdSetStencilCompareMask: return typeof(PFN_vkCmdSetStencilCompareMask);
			case vkCmdSetStencilWriteMask: return typeof(PFN_vkCmdSetStencilWriteMask);
			case vkCmdSetStencilReference: return typeof(PFN_vkCmdSetStencilReference);
			case vkCmdBindDescriptorSets: return typeof(PFN_vkCmdBindDescriptorSets);
			case vkCmdBindIndexBuffer: return typeof(PFN_vkCmdBindIndexBuffer);
			case vkCmdBindVertexBuffers: return typeof(PFN_vkCmdBindVertexBuffers);
			case vkCmdDraw: return typeof(PFN_vkCmdDraw);
			case vkCmdDrawIndexed: return typeof(PFN_vkCmdDrawIndexed);
			case vkCmdDrawMultiEXT: return typeof(PFN_vkCmdDrawMultiEXT);
			case vkCmdDrawMultiIndexedEXT: return typeof(PFN_vkCmdDrawMultiIndexedEXT);
			case vkCmdDrawIndirect: return typeof(PFN_vkCmdDrawIndirect);
			case vkCmdDrawIndexedIndirect: return typeof(PFN_vkCmdDrawIndexedIndirect);
			case vkCmdDispatch: return typeof(PFN_vkCmdDispatch);
			case vkCmdDispatchIndirect: return typeof(PFN_vkCmdDispatchIndirect);
			case vkCmdSubpassShadingHUAWEI: return typeof(PFN_vkCmdSubpassShadingHUAWEI);
			case vkCmdDrawClusterHUAWEI: return typeof(PFN_vkCmdDrawClusterHUAWEI);
			case vkCmdDrawClusterIndirectHUAWEI: return typeof(PFN_vkCmdDrawClusterIndirectHUAWEI);
			case vkCmdUpdatePipelineIndirectBufferNV: return typeof(PFN_vkCmdUpdatePipelineIndirectBufferNV);
			case vkCmdCopyBuffer: return typeof(PFN_vkCmdCopyBuffer);
			case vkCmdCopyImage: return typeof(PFN_vkCmdCopyImage);
			case vkCmdBlitImage: return typeof(PFN_vkCmdBlitImage);
			case vkCmdCopyBufferToImage: return typeof(PFN_vkCmdCopyBufferToImage);
			case vkCmdCopyImageToBuffer: return typeof(PFN_vkCmdCopyImageToBuffer);
			case vkCmdCopyMemoryIndirectNV: return typeof(PFN_vkCmdCopyMemoryIndirectNV);
			case vkCmdCopyMemoryToImageIndirectNV: return typeof(PFN_vkCmdCopyMemoryToImageIndirectNV);
			case vkCmdUpdateBuffer: return typeof(PFN_vkCmdUpdateBuffer);
			case vkCmdFillBuffer: return typeof(PFN_vkCmdFillBuffer);
			case vkCmdClearColorImage: return typeof(PFN_vkCmdClearColorImage);
			case vkCmdClearDepthStencilImage: return typeof(PFN_vkCmdClearDepthStencilImage);
			case vkCmdClearAttachments: return typeof(PFN_vkCmdClearAttachments);
			case vkCmdResolveImage: return typeof(PFN_vkCmdResolveImage);
			case vkCmdSetEvent: return typeof(PFN_vkCmdSetEvent);
			case vkCmdResetEvent: return typeof(PFN_vkCmdResetEvent);
			case vkCmdWaitEvents: return typeof(PFN_vkCmdWaitEvents);
			case vkCmdPipelineBarrier: return typeof(PFN_vkCmdPipelineBarrier);
			case vkCmdBeginQuery: return typeof(PFN_vkCmdBeginQuery);
			case vkCmdEndQuery: return typeof(PFN_vkCmdEndQuery);
			case vkCmdBeginConditionalRenderingEXT: return typeof(PFN_vkCmdBeginConditionalRenderingEXT);
			case vkCmdEndConditionalRenderingEXT: return typeof(PFN_vkCmdEndConditionalRenderingEXT);
			case vkCmdResetQueryPool: return typeof(PFN_vkCmdResetQueryPool);
			case vkCmdWriteTimestamp: return typeof(PFN_vkCmdWriteTimestamp);
			case vkCmdCopyQueryPoolResults: return typeof(PFN_vkCmdCopyQueryPoolResults);
			case vkCmdPushConstants: return typeof(PFN_vkCmdPushConstants);
			case vkCmdBeginRenderPass: return typeof(PFN_vkCmdBeginRenderPass);
			case vkCmdNextSubpass: return typeof(PFN_vkCmdNextSubpass);
			case vkCmdEndRenderPass: return typeof(PFN_vkCmdEndRenderPass);
			case vkCmdExecuteCommands: return typeof(PFN_vkCmdExecuteCommands);
			case vkGetPhysicalDeviceDisplayPropertiesKHR: return typeof(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR);
			case vkGetPhysicalDeviceDisplayPlanePropertiesKHR: return typeof(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR);
			case vkGetDisplayPlaneSupportedDisplaysKHR: return typeof(PFN_vkGetDisplayPlaneSupportedDisplaysKHR);
			case vkGetDisplayModePropertiesKHR: return typeof(PFN_vkGetDisplayModePropertiesKHR);
			case vkCreateDisplayModeKHR: return typeof(PFN_vkCreateDisplayModeKHR);
			case vkGetDisplayPlaneCapabilitiesKHR: return typeof(PFN_vkGetDisplayPlaneCapabilitiesKHR);
			case vkCreateDisplayPlaneSurfaceKHR: return typeof(PFN_vkCreateDisplayPlaneSurfaceKHR);
			case vkCreateSharedSwapchainsKHR: return typeof(PFN_vkCreateSharedSwapchainsKHR);
			case vkDestroySurfaceKHR: return typeof(PFN_vkDestroySurfaceKHR);
			case vkGetPhysicalDeviceSurfaceSupportKHR: return typeof(PFN_vkGetPhysicalDeviceSurfaceSupportKHR);
			case vkGetPhysicalDeviceSurfaceCapabilitiesKHR: return typeof(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
			case vkGetPhysicalDeviceSurfaceFormatsKHR: return typeof(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR);
			case vkGetPhysicalDeviceSurfacePresentModesKHR: return typeof(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR);
			case vkCreateSwapchainKHR: return typeof(PFN_vkCreateSwapchainKHR);
			case vkDestroySwapchainKHR: return typeof(PFN_vkDestroySwapchainKHR);
			case vkGetSwapchainImagesKHR: return typeof(PFN_vkGetSwapchainImagesKHR);
			case vkAcquireNextImageKHR: return typeof(PFN_vkAcquireNextImageKHR);
			case vkQueuePresentKHR: return typeof(PFN_vkQueuePresentKHR);
			case vkCreateDebugReportCallbackEXT: return typeof(PFN_vkCreateDebugReportCallbackEXT);
			case vkDestroyDebugReportCallbackEXT: return typeof(PFN_vkDestroyDebugReportCallbackEXT);
			case vkDebugReportMessageEXT: return typeof(PFN_vkDebugReportMessageEXT);
			case vkDebugMarkerSetObjectNameEXT: return typeof(PFN_vkDebugMarkerSetObjectNameEXT);
			case vkDebugMarkerSetObjectTagEXT: return typeof(PFN_vkDebugMarkerSetObjectTagEXT);
			case vkCmdDebugMarkerBeginEXT: return typeof(PFN_vkCmdDebugMarkerBeginEXT);
			case vkCmdDebugMarkerEndEXT: return typeof(PFN_vkCmdDebugMarkerEndEXT);
			case vkCmdDebugMarkerInsertEXT: return typeof(PFN_vkCmdDebugMarkerInsertEXT);
			case vkGetPhysicalDeviceExternalImageFormatPropertiesNV: return typeof(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV);
			case vkCmdExecuteGeneratedCommandsNV: return typeof(PFN_vkCmdExecuteGeneratedCommandsNV);
			case vkCmdPreprocessGeneratedCommandsNV: return typeof(PFN_vkCmdPreprocessGeneratedCommandsNV);
			case vkCmdBindPipelineShaderGroupNV: return typeof(PFN_vkCmdBindPipelineShaderGroupNV);
			case vkGetGeneratedCommandsMemoryRequirementsNV: return typeof(PFN_vkGetGeneratedCommandsMemoryRequirementsNV);
			case vkCreateIndirectCommandsLayoutNV: return typeof(PFN_vkCreateIndirectCommandsLayoutNV);
			case vkDestroyIndirectCommandsLayoutNV: return typeof(PFN_vkDestroyIndirectCommandsLayoutNV);
			case vkCmdExecuteGeneratedCommandsEXT: return typeof(PFN_vkCmdExecuteGeneratedCommandsEXT);
			case vkCmdPreprocessGeneratedCommandsEXT: return typeof(PFN_vkCmdPreprocessGeneratedCommandsEXT);
			case vkGetGeneratedCommandsMemoryRequirementsEXT: return typeof(PFN_vkGetGeneratedCommandsMemoryRequirementsEXT);
			case vkCreateIndirectCommandsLayoutEXT: return typeof(PFN_vkCreateIndirectCommandsLayoutEXT);
			case vkDestroyIndirectCommandsLayoutEXT: return typeof(PFN_vkDestroyIndirectCommandsLayoutEXT);
			case vkCreateIndirectExecutionSetEXT: return typeof(PFN_vkCreateIndirectExecutionSetEXT);
			case vkDestroyIndirectExecutionSetEXT: return typeof(PFN_vkDestroyIndirectExecutionSetEXT);
			case vkUpdateIndirectExecutionSetPipelineEXT: return typeof(PFN_vkUpdateIndirectExecutionSetPipelineEXT);
			case vkUpdateIndirectExecutionSetShaderEXT: return typeof(PFN_vkUpdateIndirectExecutionSetShaderEXT);
			case vkGetPhysicalDeviceFeatures2: return typeof(PFN_vkGetPhysicalDeviceFeatures2);
			case vkGetPhysicalDeviceProperties2: return typeof(PFN_vkGetPhysicalDeviceProperties2);
			case vkGetPhysicalDeviceFormatProperties2: return typeof(PFN_vkGetPhysicalDeviceFormatProperties2);
			case vkGetPhysicalDeviceImageFormatProperties2: return typeof(PFN_vkGetPhysicalDeviceImageFormatProperties2);
			case vkGetPhysicalDeviceQueueFamilyProperties2: return typeof(PFN_vkGetPhysicalDeviceQueueFamilyProperties2);
			case vkGetPhysicalDeviceMemoryProperties2: return typeof(PFN_vkGetPhysicalDeviceMemoryProperties2);
			case vkGetPhysicalDeviceSparseImageFormatProperties2: return typeof(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2);
			case vkCmdPushDescriptorSet: return typeof(PFN_vkCmdPushDescriptorSet);
			case vkTrimCommandPool: return typeof(PFN_vkTrimCommandPool);
			case vkGetPhysicalDeviceExternalBufferProperties: return typeof(PFN_vkGetPhysicalDeviceExternalBufferProperties);
			case vkGetMemoryFdKHR: return typeof(PFN_vkGetMemoryFdKHR);
			case vkGetMemoryFdPropertiesKHR: return typeof(PFN_vkGetMemoryFdPropertiesKHR);
			case vkGetMemoryRemoteAddressNV: return typeof(PFN_vkGetMemoryRemoteAddressNV);
			case vkGetPhysicalDeviceExternalSemaphoreProperties: return typeof(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties);
			case vkGetSemaphoreFdKHR: return typeof(PFN_vkGetSemaphoreFdKHR);
			case vkImportSemaphoreFdKHR: return typeof(PFN_vkImportSemaphoreFdKHR);
			case vkGetPhysicalDeviceExternalFenceProperties: return typeof(PFN_vkGetPhysicalDeviceExternalFenceProperties);
			case vkGetFenceFdKHR: return typeof(PFN_vkGetFenceFdKHR);
			case vkImportFenceFdKHR: return typeof(PFN_vkImportFenceFdKHR);
			case vkReleaseDisplayEXT: return typeof(PFN_vkReleaseDisplayEXT);
			case vkDisplayPowerControlEXT: return typeof(PFN_vkDisplayPowerControlEXT);
			case vkRegisterDeviceEventEXT: return typeof(PFN_vkRegisterDeviceEventEXT);
			case vkRegisterDisplayEventEXT: return typeof(PFN_vkRegisterDisplayEventEXT);
			case vkGetSwapchainCounterEXT: return typeof(PFN_vkGetSwapchainCounterEXT);
			case vkGetPhysicalDeviceSurfaceCapabilities2EXT: return typeof(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT);
			case vkEnumeratePhysicalDeviceGroups: return typeof(PFN_vkEnumeratePhysicalDeviceGroups);
			case vkGetDeviceGroupPeerMemoryFeatures: return typeof(PFN_vkGetDeviceGroupPeerMemoryFeatures);
			case vkBindBufferMemory2: return typeof(PFN_vkBindBufferMemory2);
			case vkBindImageMemory2: return typeof(PFN_vkBindImageMemory2);
			case vkCmdSetDeviceMask: return typeof(PFN_vkCmdSetDeviceMask);
			case vkGetDeviceGroupPresentCapabilitiesKHR: return typeof(PFN_vkGetDeviceGroupPresentCapabilitiesKHR);
			case vkGetDeviceGroupSurfacePresentModesKHR: return typeof(PFN_vkGetDeviceGroupSurfacePresentModesKHR);
			case vkAcquireNextImage2KHR: return typeof(PFN_vkAcquireNextImage2KHR);
			case vkCmdDispatchBase: return typeof(PFN_vkCmdDispatchBase);
			case vkGetPhysicalDevicePresentRectanglesKHR: return typeof(PFN_vkGetPhysicalDevicePresentRectanglesKHR);
			case vkCreateDescriptorUpdateTemplate: return typeof(PFN_vkCreateDescriptorUpdateTemplate);
			case vkDestroyDescriptorUpdateTemplate: return typeof(PFN_vkDestroyDescriptorUpdateTemplate);
			case vkUpdateDescriptorSetWithTemplate: return typeof(PFN_vkUpdateDescriptorSetWithTemplate);
			case vkCmdPushDescriptorSetWithTemplate: return typeof(PFN_vkCmdPushDescriptorSetWithTemplate);
			case vkSetHdrMetadataEXT: return typeof(PFN_vkSetHdrMetadataEXT);
			case vkGetSwapchainStatusKHR: return typeof(PFN_vkGetSwapchainStatusKHR);
			case vkGetRefreshCycleDurationGOOGLE: return typeof(PFN_vkGetRefreshCycleDurationGOOGLE);
			case vkGetPastPresentationTimingGOOGLE: return typeof(PFN_vkGetPastPresentationTimingGOOGLE);
			case vkCmdSetViewportWScalingNV: return typeof(PFN_vkCmdSetViewportWScalingNV);
			case vkCmdSetDiscardRectangleEXT: return typeof(PFN_vkCmdSetDiscardRectangleEXT);
			case vkCmdSetDiscardRectangleEnableEXT: return typeof(PFN_vkCmdSetDiscardRectangleEnableEXT);
			case vkCmdSetDiscardRectangleModeEXT: return typeof(PFN_vkCmdSetDiscardRectangleModeEXT);
			case vkCmdSetSampleLocationsEXT: return typeof(PFN_vkCmdSetSampleLocationsEXT);
			case vkGetPhysicalDeviceMultisamplePropertiesEXT: return typeof(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT);
			case vkGetPhysicalDeviceSurfaceCapabilities2KHR: return typeof(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR);
			case vkGetPhysicalDeviceSurfaceFormats2KHR: return typeof(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR);
			case vkGetPhysicalDeviceDisplayProperties2KHR: return typeof(PFN_vkGetPhysicalDeviceDisplayProperties2KHR);
			case vkGetPhysicalDeviceDisplayPlaneProperties2KHR: return typeof(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR);
			case vkGetDisplayModeProperties2KHR: return typeof(PFN_vkGetDisplayModeProperties2KHR);
			case vkGetDisplayPlaneCapabilities2KHR: return typeof(PFN_vkGetDisplayPlaneCapabilities2KHR);
			case vkGetBufferMemoryRequirements2: return typeof(PFN_vkGetBufferMemoryRequirements2);
			case vkGetImageMemoryRequirements2: return typeof(PFN_vkGetImageMemoryRequirements2);
			case vkGetImageSparseMemoryRequirements2: return typeof(PFN_vkGetImageSparseMemoryRequirements2);
			case vkGetDeviceBufferMemoryRequirements: return typeof(PFN_vkGetDeviceBufferMemoryRequirements);
			case vkGetDeviceImageMemoryRequirements: return typeof(PFN_vkGetDeviceImageMemoryRequirements);
			case vkGetDeviceImageSparseMemoryRequirements: return typeof(PFN_vkGetDeviceImageSparseMemoryRequirements);
			case vkCreateSamplerYcbcrConversion: return typeof(PFN_vkCreateSamplerYcbcrConversion);
			case vkDestroySamplerYcbcrConversion: return typeof(PFN_vkDestroySamplerYcbcrConversion);
			case vkGetDeviceQueue2: return typeof(PFN_vkGetDeviceQueue2);
			case vkCreateValidationCacheEXT: return typeof(PFN_vkCreateValidationCacheEXT);
			case vkDestroyValidationCacheEXT: return typeof(PFN_vkDestroyValidationCacheEXT);
			case vkGetValidationCacheDataEXT: return typeof(PFN_vkGetValidationCacheDataEXT);
			case vkMergeValidationCachesEXT: return typeof(PFN_vkMergeValidationCachesEXT);
			case vkGetDescriptorSetLayoutSupport: return typeof(PFN_vkGetDescriptorSetLayoutSupport);
			case vkGetShaderInfoAMD: return typeof(PFN_vkGetShaderInfoAMD);
			case vkSetLocalDimmingAMD: return typeof(PFN_vkSetLocalDimmingAMD);
			case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR: return typeof(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR);
			case vkGetCalibratedTimestampsKHR: return typeof(PFN_vkGetCalibratedTimestampsKHR);
			case vkSetDebugUtilsObjectNameEXT: return typeof(PFN_vkSetDebugUtilsObjectNameEXT);
			case vkSetDebugUtilsObjectTagEXT: return typeof(PFN_vkSetDebugUtilsObjectTagEXT);
			case vkQueueBeginDebugUtilsLabelEXT: return typeof(PFN_vkQueueBeginDebugUtilsLabelEXT);
			case vkQueueEndDebugUtilsLabelEXT: return typeof(PFN_vkQueueEndDebugUtilsLabelEXT);
			case vkQueueInsertDebugUtilsLabelEXT: return typeof(PFN_vkQueueInsertDebugUtilsLabelEXT);
			case vkCmdBeginDebugUtilsLabelEXT: return typeof(PFN_vkCmdBeginDebugUtilsLabelEXT);
			case vkCmdEndDebugUtilsLabelEXT: return typeof(PFN_vkCmdEndDebugUtilsLabelEXT);
			case vkCmdInsertDebugUtilsLabelEXT: return typeof(PFN_vkCmdInsertDebugUtilsLabelEXT);
			case vkCreateDebugUtilsMessengerEXT: return typeof(PFN_vkCreateDebugUtilsMessengerEXT);
			case vkDestroyDebugUtilsMessengerEXT: return typeof(PFN_vkDestroyDebugUtilsMessengerEXT);
			case vkSubmitDebugUtilsMessageEXT: return typeof(PFN_vkSubmitDebugUtilsMessageEXT);
			case vkGetMemoryHostPointerPropertiesEXT: return typeof(PFN_vkGetMemoryHostPointerPropertiesEXT);
			case vkCmdWriteBufferMarkerAMD: return typeof(PFN_vkCmdWriteBufferMarkerAMD);
			case vkCreateRenderPass2: return typeof(PFN_vkCreateRenderPass2);
			case vkCmdBeginRenderPass2: return typeof(PFN_vkCmdBeginRenderPass2);
			case vkCmdNextSubpass2: return typeof(PFN_vkCmdNextSubpass2);
			case vkCmdEndRenderPass2: return typeof(PFN_vkCmdEndRenderPass2);
			case vkGetSemaphoreCounterValue: return typeof(PFN_vkGetSemaphoreCounterValue);
			case vkWaitSemaphores: return typeof(PFN_vkWaitSemaphores);
			case vkSignalSemaphore: return typeof(PFN_vkSignalSemaphore);
			case vkCmdDrawIndirectCount: return typeof(PFN_vkCmdDrawIndirectCount);
			case vkCmdDrawIndexedIndirectCount: return typeof(PFN_vkCmdDrawIndexedIndirectCount);
			case vkCmdSetCheckpointNV: return typeof(PFN_vkCmdSetCheckpointNV);
			case vkGetQueueCheckpointDataNV: return typeof(PFN_vkGetQueueCheckpointDataNV);
			case vkCmdBindTransformFeedbackBuffersEXT: return typeof(PFN_vkCmdBindTransformFeedbackBuffersEXT);
			case vkCmdBeginTransformFeedbackEXT: return typeof(PFN_vkCmdBeginTransformFeedbackEXT);
			case vkCmdEndTransformFeedbackEXT: return typeof(PFN_vkCmdEndTransformFeedbackEXT);
			case vkCmdBeginQueryIndexedEXT: return typeof(PFN_vkCmdBeginQueryIndexedEXT);
			case vkCmdEndQueryIndexedEXT: return typeof(PFN_vkCmdEndQueryIndexedEXT);
			case vkCmdDrawIndirectByteCountEXT: return typeof(PFN_vkCmdDrawIndirectByteCountEXT);
			case vkCmdSetExclusiveScissorNV: return typeof(PFN_vkCmdSetExclusiveScissorNV);
			case vkCmdSetExclusiveScissorEnableNV: return typeof(PFN_vkCmdSetExclusiveScissorEnableNV);
			case vkCmdBindShadingRateImageNV: return typeof(PFN_vkCmdBindShadingRateImageNV);
			case vkCmdSetViewportShadingRatePaletteNV: return typeof(PFN_vkCmdSetViewportShadingRatePaletteNV);
			case vkCmdSetCoarseSampleOrderNV: return typeof(PFN_vkCmdSetCoarseSampleOrderNV);
			case vkCmdDrawMeshTasksNV: return typeof(PFN_vkCmdDrawMeshTasksNV);
			case vkCmdDrawMeshTasksIndirectNV: return typeof(PFN_vkCmdDrawMeshTasksIndirectNV);
			case vkCmdDrawMeshTasksIndirectCountNV: return typeof(PFN_vkCmdDrawMeshTasksIndirectCountNV);
			case vkCmdDrawMeshTasksEXT: return typeof(PFN_vkCmdDrawMeshTasksEXT);
			case vkCmdDrawMeshTasksIndirectEXT: return typeof(PFN_vkCmdDrawMeshTasksIndirectEXT);
			case vkCmdDrawMeshTasksIndirectCountEXT: return typeof(PFN_vkCmdDrawMeshTasksIndirectCountEXT);
			case vkCompileDeferredNV: return typeof(PFN_vkCompileDeferredNV);
			case vkCreateAccelerationStructureNV: return typeof(PFN_vkCreateAccelerationStructureNV);
			case vkCmdBindInvocationMaskHUAWEI: return typeof(PFN_vkCmdBindInvocationMaskHUAWEI);
			case vkDestroyAccelerationStructureKHR: return typeof(PFN_vkDestroyAccelerationStructureKHR);
			case vkDestroyAccelerationStructureNV: return typeof(PFN_vkDestroyAccelerationStructureNV);
			case vkGetAccelerationStructureMemoryRequirementsNV: return typeof(PFN_vkGetAccelerationStructureMemoryRequirementsNV);
			case vkBindAccelerationStructureMemoryNV: return typeof(PFN_vkBindAccelerationStructureMemoryNV);
			case vkCmdCopyAccelerationStructureNV: return typeof(PFN_vkCmdCopyAccelerationStructureNV);
			case vkCmdCopyAccelerationStructureKHR: return typeof(PFN_vkCmdCopyAccelerationStructureKHR);
			case vkCopyAccelerationStructureKHR: return typeof(PFN_vkCopyAccelerationStructureKHR);
			case vkCmdCopyAccelerationStructureToMemoryKHR: return typeof(PFN_vkCmdCopyAccelerationStructureToMemoryKHR);
			case vkCopyAccelerationStructureToMemoryKHR: return typeof(PFN_vkCopyAccelerationStructureToMemoryKHR);
			case vkCmdCopyMemoryToAccelerationStructureKHR: return typeof(PFN_vkCmdCopyMemoryToAccelerationStructureKHR);
			case vkCopyMemoryToAccelerationStructureKHR: return typeof(PFN_vkCopyMemoryToAccelerationStructureKHR);
			case vkCmdWriteAccelerationStructuresPropertiesKHR: return typeof(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR);
			case vkCmdWriteAccelerationStructuresPropertiesNV: return typeof(PFN_vkCmdWriteAccelerationStructuresPropertiesNV);
			case vkCmdBuildAccelerationStructureNV: return typeof(PFN_vkCmdBuildAccelerationStructureNV);
			case vkWriteAccelerationStructuresPropertiesKHR: return typeof(PFN_vkWriteAccelerationStructuresPropertiesKHR);
			case vkCmdTraceRaysKHR: return typeof(PFN_vkCmdTraceRaysKHR);
			case vkCmdTraceRaysNV: return typeof(PFN_vkCmdTraceRaysNV);
			case vkGetRayTracingShaderGroupHandlesKHR: return typeof(PFN_vkGetRayTracingShaderGroupHandlesKHR);
			case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: return typeof(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR);
			case vkGetAccelerationStructureHandleNV: return typeof(PFN_vkGetAccelerationStructureHandleNV);
			case vkCreateRayTracingPipelinesNV: return typeof(PFN_vkCreateRayTracingPipelinesNV);
			case vkCreateRayTracingPipelinesKHR: return typeof(PFN_vkCreateRayTracingPipelinesKHR);
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: return typeof(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV);
			case vkCmdTraceRaysIndirectKHR: return typeof(PFN_vkCmdTraceRaysIndirectKHR);
			case vkCmdTraceRaysIndirect2KHR: return typeof(PFN_vkCmdTraceRaysIndirect2KHR);
			case vkGetClusterAccelerationStructureBuildSizesNV: return typeof(PFN_vkGetClusterAccelerationStructureBuildSizesNV);
			case vkCmdBuildClusterAccelerationStructureIndirectNV: return typeof(PFN_vkCmdBuildClusterAccelerationStructureIndirectNV);
			case vkGetDeviceAccelerationStructureCompatibilityKHR: return typeof(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR);
			case vkGetRayTracingShaderGroupStackSizeKHR: return typeof(PFN_vkGetRayTracingShaderGroupStackSizeKHR);
			case vkCmdSetRayTracingPipelineStackSizeKHR: return typeof(PFN_vkCmdSetRayTracingPipelineStackSizeKHR);
			case vkGetImageViewHandleNVX: return typeof(PFN_vkGetImageViewHandleNVX);
			case vkGetImageViewHandle64NVX: return typeof(PFN_vkGetImageViewHandle64NVX);
			case vkGetImageViewAddressNVX: return typeof(PFN_vkGetImageViewAddressNVX);
			case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: return typeof(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR);
			case vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: return typeof(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR);
			case vkAcquireProfilingLockKHR: return typeof(PFN_vkAcquireProfilingLockKHR);
			case vkReleaseProfilingLockKHR: return typeof(PFN_vkReleaseProfilingLockKHR);
			case vkGetImageDrmFormatModifierPropertiesEXT: return typeof(PFN_vkGetImageDrmFormatModifierPropertiesEXT);
			case vkGetBufferOpaqueCaptureAddress: return typeof(PFN_vkGetBufferOpaqueCaptureAddress);
			case vkGetBufferDeviceAddress: return typeof(PFN_vkGetBufferDeviceAddress);
			case vkCreateHeadlessSurfaceEXT: return typeof(PFN_vkCreateHeadlessSurfaceEXT);
			case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: return typeof(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV);
			case vkInitializePerformanceApiINTEL: return typeof(PFN_vkInitializePerformanceApiINTEL);
			case vkUninitializePerformanceApiINTEL: return typeof(PFN_vkUninitializePerformanceApiINTEL);
			case vkCmdSetPerformanceMarkerINTEL: return typeof(PFN_vkCmdSetPerformanceMarkerINTEL);
			case vkCmdSetPerformanceStreamMarkerINTEL: return typeof(PFN_vkCmdSetPerformanceStreamMarkerINTEL);
			case vkCmdSetPerformanceOverrideINTEL: return typeof(PFN_vkCmdSetPerformanceOverrideINTEL);
			case vkAcquirePerformanceConfigurationINTEL: return typeof(PFN_vkAcquirePerformanceConfigurationINTEL);
			case vkReleasePerformanceConfigurationINTEL: return typeof(PFN_vkReleasePerformanceConfigurationINTEL);
			case vkQueueSetPerformanceConfigurationINTEL: return typeof(PFN_vkQueueSetPerformanceConfigurationINTEL);
			case vkGetPerformanceParameterINTEL: return typeof(PFN_vkGetPerformanceParameterINTEL);
			case vkGetDeviceMemoryOpaqueCaptureAddress: return typeof(PFN_vkGetDeviceMemoryOpaqueCaptureAddress);
			case vkGetPipelineExecutablePropertiesKHR: return typeof(PFN_vkGetPipelineExecutablePropertiesKHR);
			case vkGetPipelineExecutableStatisticsKHR: return typeof(PFN_vkGetPipelineExecutableStatisticsKHR);
			case vkGetPipelineExecutableInternalRepresentationsKHR: return typeof(PFN_vkGetPipelineExecutableInternalRepresentationsKHR);
			case vkCmdSetLineStipple: return typeof(PFN_vkCmdSetLineStipple);
			case vkGetPhysicalDeviceToolProperties: return typeof(PFN_vkGetPhysicalDeviceToolProperties);
			case vkCreateAccelerationStructureKHR: return typeof(PFN_vkCreateAccelerationStructureKHR);
			case vkCmdBuildAccelerationStructuresKHR: return typeof(PFN_vkCmdBuildAccelerationStructuresKHR);
			case vkCmdBuildAccelerationStructuresIndirectKHR: return typeof(PFN_vkCmdBuildAccelerationStructuresIndirectKHR);
			case vkBuildAccelerationStructuresKHR: return typeof(PFN_vkBuildAccelerationStructuresKHR);
			case vkGetAccelerationStructureDeviceAddressKHR: return typeof(PFN_vkGetAccelerationStructureDeviceAddressKHR);
			case vkCreateDeferredOperationKHR: return typeof(PFN_vkCreateDeferredOperationKHR);
			case vkDestroyDeferredOperationKHR: return typeof(PFN_vkDestroyDeferredOperationKHR);
			case vkGetDeferredOperationMaxConcurrencyKHR: return typeof(PFN_vkGetDeferredOperationMaxConcurrencyKHR);
			case vkGetDeferredOperationResultKHR: return typeof(PFN_vkGetDeferredOperationResultKHR);
			case vkDeferredOperationJoinKHR: return typeof(PFN_vkDeferredOperationJoinKHR);
			case vkGetPipelineIndirectMemoryRequirementsNV: return typeof(PFN_vkGetPipelineIndirectMemoryRequirementsNV);
			case vkGetPipelineIndirectDeviceAddressNV: return typeof(PFN_vkGetPipelineIndirectDeviceAddressNV);
			case vkAntiLagUpdateAMD: return typeof(PFN_vkAntiLagUpdateAMD);
			case vkCmdSetCullMode: return typeof(PFN_vkCmdSetCullMode);
			case vkCmdSetFrontFace: return typeof(PFN_vkCmdSetFrontFace);
			case vkCmdSetPrimitiveTopology: return typeof(PFN_vkCmdSetPrimitiveTopology);
			case vkCmdSetViewportWithCount: return typeof(PFN_vkCmdSetViewportWithCount);
			case vkCmdSetScissorWithCount: return typeof(PFN_vkCmdSetScissorWithCount);
			case vkCmdBindIndexBuffer2: return typeof(PFN_vkCmdBindIndexBuffer2);
			case vkCmdBindVertexBuffers2: return typeof(PFN_vkCmdBindVertexBuffers2);
			case vkCmdSetDepthTestEnable: return typeof(PFN_vkCmdSetDepthTestEnable);
			case vkCmdSetDepthWriteEnable: return typeof(PFN_vkCmdSetDepthWriteEnable);
			case vkCmdSetDepthCompareOp: return typeof(PFN_vkCmdSetDepthCompareOp);
			case vkCmdSetDepthBoundsTestEnable: return typeof(PFN_vkCmdSetDepthBoundsTestEnable);
			case vkCmdSetStencilTestEnable: return typeof(PFN_vkCmdSetStencilTestEnable);
			case vkCmdSetStencilOp: return typeof(PFN_vkCmdSetStencilOp);
			case vkCmdSetPatchControlPointsEXT: return typeof(PFN_vkCmdSetPatchControlPointsEXT);
			case vkCmdSetRasterizerDiscardEnable: return typeof(PFN_vkCmdSetRasterizerDiscardEnable);
			case vkCmdSetDepthBiasEnable: return typeof(PFN_vkCmdSetDepthBiasEnable);
			case vkCmdSetLogicOpEXT: return typeof(PFN_vkCmdSetLogicOpEXT);
			case vkCmdSetPrimitiveRestartEnable: return typeof(PFN_vkCmdSetPrimitiveRestartEnable);
			case vkCmdSetTessellationDomainOriginEXT: return typeof(PFN_vkCmdSetTessellationDomainOriginEXT);
			case vkCmdSetDepthClampEnableEXT: return typeof(PFN_vkCmdSetDepthClampEnableEXT);
			case vkCmdSetPolygonModeEXT: return typeof(PFN_vkCmdSetPolygonModeEXT);
			case vkCmdSetRasterizationSamplesEXT: return typeof(PFN_vkCmdSetRasterizationSamplesEXT);
			case vkCmdSetSampleMaskEXT: return typeof(PFN_vkCmdSetSampleMaskEXT);
			case vkCmdSetAlphaToCoverageEnableEXT: return typeof(PFN_vkCmdSetAlphaToCoverageEnableEXT);
			case vkCmdSetAlphaToOneEnableEXT: return typeof(PFN_vkCmdSetAlphaToOneEnableEXT);
			case vkCmdSetLogicOpEnableEXT: return typeof(PFN_vkCmdSetLogicOpEnableEXT);
			case vkCmdSetColorBlendEnableEXT: return typeof(PFN_vkCmdSetColorBlendEnableEXT);
			case vkCmdSetColorBlendEquationEXT: return typeof(PFN_vkCmdSetColorBlendEquationEXT);
			case vkCmdSetColorWriteMaskEXT: return typeof(PFN_vkCmdSetColorWriteMaskEXT);
			case vkCmdSetRasterizationStreamEXT: return typeof(PFN_vkCmdSetRasterizationStreamEXT);
			case vkCmdSetConservativeRasterizationModeEXT: return typeof(PFN_vkCmdSetConservativeRasterizationModeEXT);
			case vkCmdSetExtraPrimitiveOverestimationSizeEXT: return typeof(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT);
			case vkCmdSetDepthClipEnableEXT: return typeof(PFN_vkCmdSetDepthClipEnableEXT);
			case vkCmdSetSampleLocationsEnableEXT: return typeof(PFN_vkCmdSetSampleLocationsEnableEXT);
			case vkCmdSetColorBlendAdvancedEXT: return typeof(PFN_vkCmdSetColorBlendAdvancedEXT);
			case vkCmdSetProvokingVertexModeEXT: return typeof(PFN_vkCmdSetProvokingVertexModeEXT);
			case vkCmdSetLineRasterizationModeEXT: return typeof(PFN_vkCmdSetLineRasterizationModeEXT);
			case vkCmdSetLineStippleEnableEXT: return typeof(PFN_vkCmdSetLineStippleEnableEXT);
			case vkCmdSetDepthClipNegativeOneToOneEXT: return typeof(PFN_vkCmdSetDepthClipNegativeOneToOneEXT);
			case vkCmdSetViewportWScalingEnableNV: return typeof(PFN_vkCmdSetViewportWScalingEnableNV);
			case vkCmdSetViewportSwizzleNV: return typeof(PFN_vkCmdSetViewportSwizzleNV);
			case vkCmdSetCoverageToColorEnableNV: return typeof(PFN_vkCmdSetCoverageToColorEnableNV);
			case vkCmdSetCoverageToColorLocationNV: return typeof(PFN_vkCmdSetCoverageToColorLocationNV);
			case vkCmdSetCoverageModulationModeNV: return typeof(PFN_vkCmdSetCoverageModulationModeNV);
			case vkCmdSetCoverageModulationTableEnableNV: return typeof(PFN_vkCmdSetCoverageModulationTableEnableNV);
			case vkCmdSetCoverageModulationTableNV: return typeof(PFN_vkCmdSetCoverageModulationTableNV);
			case vkCmdSetShadingRateImageEnableNV: return typeof(PFN_vkCmdSetShadingRateImageEnableNV);
			case vkCmdSetCoverageReductionModeNV: return typeof(PFN_vkCmdSetCoverageReductionModeNV);
			case vkCmdSetRepresentativeFragmentTestEnableNV: return typeof(PFN_vkCmdSetRepresentativeFragmentTestEnableNV);
			case vkCreatePrivateDataSlot: return typeof(PFN_vkCreatePrivateDataSlot);
			case vkDestroyPrivateDataSlot: return typeof(PFN_vkDestroyPrivateDataSlot);
			case vkSetPrivateData: return typeof(PFN_vkSetPrivateData);
			case vkGetPrivateData: return typeof(PFN_vkGetPrivateData);
			case vkCmdCopyBuffer2: return typeof(PFN_vkCmdCopyBuffer2);
			case vkCmdCopyImage2: return typeof(PFN_vkCmdCopyImage2);
			case vkCmdBlitImage2: return typeof(PFN_vkCmdBlitImage2);
			case vkCmdCopyBufferToImage2: return typeof(PFN_vkCmdCopyBufferToImage2);
			case vkCmdCopyImageToBuffer2: return typeof(PFN_vkCmdCopyImageToBuffer2);
			case vkCmdResolveImage2: return typeof(PFN_vkCmdResolveImage2);
			case vkCmdSetFragmentShadingRateKHR: return typeof(PFN_vkCmdSetFragmentShadingRateKHR);
			case vkGetPhysicalDeviceFragmentShadingRatesKHR: return typeof(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR);
			case vkCmdSetFragmentShadingRateEnumNV: return typeof(PFN_vkCmdSetFragmentShadingRateEnumNV);
			case vkGetAccelerationStructureBuildSizesKHR: return typeof(PFN_vkGetAccelerationStructureBuildSizesKHR);
			case vkCmdSetVertexInputEXT: return typeof(PFN_vkCmdSetVertexInputEXT);
			case vkCmdSetColorWriteEnableEXT: return typeof(PFN_vkCmdSetColorWriteEnableEXT);
			case vkCmdSetEvent2: return typeof(PFN_vkCmdSetEvent2);
			case vkCmdResetEvent2: return typeof(PFN_vkCmdResetEvent2);
			case vkCmdWaitEvents2: return typeof(PFN_vkCmdWaitEvents2);
			case vkCmdPipelineBarrier2: return typeof(PFN_vkCmdPipelineBarrier2);
			case vkQueueSubmit2: return typeof(PFN_vkQueueSubmit2);
			case vkCmdWriteTimestamp2: return typeof(PFN_vkCmdWriteTimestamp2);
			case vkCmdWriteBufferMarker2AMD: return typeof(PFN_vkCmdWriteBufferMarker2AMD);
			case vkGetQueueCheckpointData2NV: return typeof(PFN_vkGetQueueCheckpointData2NV);
			case vkCopyMemoryToImage: return typeof(PFN_vkCopyMemoryToImage);
			case vkCopyImageToMemory: return typeof(PFN_vkCopyImageToMemory);
			case vkCopyImageToImage: return typeof(PFN_vkCopyImageToImage);
			case vkTransitionImageLayout: return typeof(PFN_vkTransitionImageLayout);
			case vkGetPhysicalDeviceVideoCapabilitiesKHR: return typeof(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR);
			case vkGetPhysicalDeviceVideoFormatPropertiesKHR: return typeof(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR);
			case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR: return typeof(PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR);
			case vkCreateVideoSessionKHR: return typeof(PFN_vkCreateVideoSessionKHR);
			case vkDestroyVideoSessionKHR: return typeof(PFN_vkDestroyVideoSessionKHR);
			case vkCreateVideoSessionParametersKHR: return typeof(PFN_vkCreateVideoSessionParametersKHR);
			case vkUpdateVideoSessionParametersKHR: return typeof(PFN_vkUpdateVideoSessionParametersKHR);
			case vkGetEncodedVideoSessionParametersKHR: return typeof(PFN_vkGetEncodedVideoSessionParametersKHR);
			case vkDestroyVideoSessionParametersKHR: return typeof(PFN_vkDestroyVideoSessionParametersKHR);
			case vkGetVideoSessionMemoryRequirementsKHR: return typeof(PFN_vkGetVideoSessionMemoryRequirementsKHR);
			case vkBindVideoSessionMemoryKHR: return typeof(PFN_vkBindVideoSessionMemoryKHR);
			case vkCmdDecodeVideoKHR: return typeof(PFN_vkCmdDecodeVideoKHR);
			case vkCmdBeginVideoCodingKHR: return typeof(PFN_vkCmdBeginVideoCodingKHR);
			case vkCmdControlVideoCodingKHR: return typeof(PFN_vkCmdControlVideoCodingKHR);
			case vkCmdEndVideoCodingKHR: return typeof(PFN_vkCmdEndVideoCodingKHR);
			case vkCmdEncodeVideoKHR: return typeof(PFN_vkCmdEncodeVideoKHR);
			case vkCmdDecompressMemoryNV: return typeof(PFN_vkCmdDecompressMemoryNV);
			case vkCmdDecompressMemoryIndirectCountNV: return typeof(PFN_vkCmdDecompressMemoryIndirectCountNV);
			case vkGetPartitionedAccelerationStructuresBuildSizesNV: return typeof(PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV);
			case vkCmdBuildPartitionedAccelerationStructuresNV: return typeof(PFN_vkCmdBuildPartitionedAccelerationStructuresNV);
			case vkCreateCuModuleNVX: return typeof(PFN_vkCreateCuModuleNVX);
			case vkCreateCuFunctionNVX: return typeof(PFN_vkCreateCuFunctionNVX);
			case vkDestroyCuModuleNVX: return typeof(PFN_vkDestroyCuModuleNVX);
			case vkDestroyCuFunctionNVX: return typeof(PFN_vkDestroyCuFunctionNVX);
			case vkCmdCuLaunchKernelNVX: return typeof(PFN_vkCmdCuLaunchKernelNVX);
			case vkGetDescriptorSetLayoutSizeEXT: return typeof(PFN_vkGetDescriptorSetLayoutSizeEXT);
			case vkGetDescriptorSetLayoutBindingOffsetEXT: return typeof(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT);
			case vkGetDescriptorEXT: return typeof(PFN_vkGetDescriptorEXT);
			case vkCmdBindDescriptorBuffersEXT: return typeof(PFN_vkCmdBindDescriptorBuffersEXT);
			case vkCmdSetDescriptorBufferOffsetsEXT: return typeof(PFN_vkCmdSetDescriptorBufferOffsetsEXT);
			case vkCmdBindDescriptorBufferEmbeddedSamplersEXT: return typeof(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT);
			case vkGetBufferOpaqueCaptureDescriptorDataEXT: return typeof(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT);
			case vkGetImageOpaqueCaptureDescriptorDataEXT: return typeof(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT);
			case vkGetImageViewOpaqueCaptureDescriptorDataEXT: return typeof(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT);
			case vkGetSamplerOpaqueCaptureDescriptorDataEXT: return typeof(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT);
			case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT: return typeof(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT);
			case vkSetDeviceMemoryPriorityEXT: return typeof(PFN_vkSetDeviceMemoryPriorityEXT);
			case vkAcquireDrmDisplayEXT: return typeof(PFN_vkAcquireDrmDisplayEXT);
			case vkGetDrmDisplayEXT: return typeof(PFN_vkGetDrmDisplayEXT);
			case vkWaitForPresent2KHR: return typeof(PFN_vkWaitForPresent2KHR);
			case vkWaitForPresentKHR: return typeof(PFN_vkWaitForPresentKHR);
			case vkCmdBeginRendering: return typeof(PFN_vkCmdBeginRendering);
			case vkCmdEndRendering: return typeof(PFN_vkCmdEndRendering);
			case vkCmdEndRendering2EXT: return typeof(PFN_vkCmdEndRendering2EXT);
			case vkGetDescriptorSetLayoutHostMappingInfoVALVE: return typeof(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE);
			case vkGetDescriptorSetHostMappingVALVE: return typeof(PFN_vkGetDescriptorSetHostMappingVALVE);
			case vkCreateMicromapEXT: return typeof(PFN_vkCreateMicromapEXT);
			case vkCmdBuildMicromapsEXT: return typeof(PFN_vkCmdBuildMicromapsEXT);
			case vkBuildMicromapsEXT: return typeof(PFN_vkBuildMicromapsEXT);
			case vkDestroyMicromapEXT: return typeof(PFN_vkDestroyMicromapEXT);
			case vkCmdCopyMicromapEXT: return typeof(PFN_vkCmdCopyMicromapEXT);
			case vkCopyMicromapEXT: return typeof(PFN_vkCopyMicromapEXT);
			case vkCmdCopyMicromapToMemoryEXT: return typeof(PFN_vkCmdCopyMicromapToMemoryEXT);
			case vkCopyMicromapToMemoryEXT: return typeof(PFN_vkCopyMicromapToMemoryEXT);
			case vkCmdCopyMemoryToMicromapEXT: return typeof(PFN_vkCmdCopyMemoryToMicromapEXT);
			case vkCopyMemoryToMicromapEXT: return typeof(PFN_vkCopyMemoryToMicromapEXT);
			case vkCmdWriteMicromapsPropertiesEXT: return typeof(PFN_vkCmdWriteMicromapsPropertiesEXT);
			case vkWriteMicromapsPropertiesEXT: return typeof(PFN_vkWriteMicromapsPropertiesEXT);
			case vkGetDeviceMicromapCompatibilityEXT: return typeof(PFN_vkGetDeviceMicromapCompatibilityEXT);
			case vkGetMicromapBuildSizesEXT: return typeof(PFN_vkGetMicromapBuildSizesEXT);
			case vkGetShaderModuleIdentifierEXT: return typeof(PFN_vkGetShaderModuleIdentifierEXT);
			case vkGetShaderModuleCreateInfoIdentifierEXT: return typeof(PFN_vkGetShaderModuleCreateInfoIdentifierEXT);
			case vkGetImageSubresourceLayout2: return typeof(PFN_vkGetImageSubresourceLayout2);
			case vkGetPipelinePropertiesEXT: return typeof(PFN_vkGetPipelinePropertiesEXT);
			case vkCmdBindTileMemoryQCOM: return typeof(PFN_vkCmdBindTileMemoryQCOM);
			case vkGetFramebufferTilePropertiesQCOM: return typeof(PFN_vkGetFramebufferTilePropertiesQCOM);
			case vkGetDynamicRenderingTilePropertiesQCOM: return typeof(PFN_vkGetDynamicRenderingTilePropertiesQCOM);
			case vkGetPhysicalDeviceOpticalFlowImageFormatsNV: return typeof(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV);
			case vkCreateOpticalFlowSessionNV: return typeof(PFN_vkCreateOpticalFlowSessionNV);
			case vkDestroyOpticalFlowSessionNV: return typeof(PFN_vkDestroyOpticalFlowSessionNV);
			case vkBindOpticalFlowSessionImageNV: return typeof(PFN_vkBindOpticalFlowSessionImageNV);
			case vkCmdOpticalFlowExecuteNV: return typeof(PFN_vkCmdOpticalFlowExecuteNV);
			case vkGetDeviceFaultInfoEXT: return typeof(PFN_vkGetDeviceFaultInfoEXT);
			case vkCmdSetDepthBias2EXT: return typeof(PFN_vkCmdSetDepthBias2EXT);
			case vkReleaseSwapchainImagesKHR: return typeof(PFN_vkReleaseSwapchainImagesKHR);
			case vkGetDeviceImageSubresourceLayout: return typeof(PFN_vkGetDeviceImageSubresourceLayout);
			case vkMapMemory2: return typeof(PFN_vkMapMemory2);
			case vkUnmapMemory2: return typeof(PFN_vkUnmapMemory2);
			case vkCreateShadersEXT: return typeof(PFN_vkCreateShadersEXT);
			case vkDestroyShaderEXT: return typeof(PFN_vkDestroyShaderEXT);
			case vkGetShaderBinaryDataEXT: return typeof(PFN_vkGetShaderBinaryDataEXT);
			case vkCmdBindShadersEXT: return typeof(PFN_vkCmdBindShadersEXT);
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR: return typeof(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR);
			case vkCmdBindDescriptorSets2: return typeof(PFN_vkCmdBindDescriptorSets2);
			case vkCmdPushConstants2: return typeof(PFN_vkCmdPushConstants2);
			case vkCmdPushDescriptorSet2: return typeof(PFN_vkCmdPushDescriptorSet2);
			case vkCmdPushDescriptorSetWithTemplate2: return typeof(PFN_vkCmdPushDescriptorSetWithTemplate2);
			case vkCmdSetDescriptorBufferOffsets2EXT: return typeof(PFN_vkCmdSetDescriptorBufferOffsets2EXT);
			case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT: return typeof(PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT);
			case vkSetLatencySleepModeNV: return typeof(PFN_vkSetLatencySleepModeNV);
			case vkLatencySleepNV: return typeof(PFN_vkLatencySleepNV);
			case vkSetLatencyMarkerNV: return typeof(PFN_vkSetLatencyMarkerNV);
			case vkGetLatencyTimingsNV: return typeof(PFN_vkGetLatencyTimingsNV);
			case vkQueueNotifyOutOfBandNV: return typeof(PFN_vkQueueNotifyOutOfBandNV);
			case vkCmdSetRenderingAttachmentLocations: return typeof(PFN_vkCmdSetRenderingAttachmentLocations);
			case vkCmdSetRenderingInputAttachmentIndices: return typeof(PFN_vkCmdSetRenderingInputAttachmentIndices);
			case vkCmdSetDepthClampRangeEXT: return typeof(PFN_vkCmdSetDepthClampRangeEXT);
			case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV: return typeof(PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV);
			case vkGetPhysicalDeviceCooperativeVectorPropertiesNV: return typeof(PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV);
			case vkConvertCooperativeVectorMatrixNV: return typeof(PFN_vkConvertCooperativeVectorMatrixNV);
			case vkCmdConvertCooperativeVectorMatrixNV: return typeof(PFN_vkCmdConvertCooperativeVectorMatrixNV);
			case vkCmdDispatchTileQCOM: return typeof(PFN_vkCmdDispatchTileQCOM);
			case vkCmdBeginPerTileExecutionQCOM: return typeof(PFN_vkCmdBeginPerTileExecutionQCOM);
			case vkCmdEndPerTileExecutionQCOM: return typeof(PFN_vkCmdEndPerTileExecutionQCOM);
			case vkCreateExternalComputeQueueNV: return typeof(PFN_vkCreateExternalComputeQueueNV);
			case vkDestroyExternalComputeQueueNV: return typeof(PFN_vkDestroyExternalComputeQueueNV);
			case vkGetExternalComputeQueueDataNV: return typeof(PFN_vkGetExternalComputeQueueDataNV);
			case vkCreateTensorARM: return typeof(PFN_vkCreateTensorARM);
			case vkDestroyTensorARM: return typeof(PFN_vkDestroyTensorARM);
			case vkCreateTensorViewARM: return typeof(PFN_vkCreateTensorViewARM);
			case vkDestroyTensorViewARM: return typeof(PFN_vkDestroyTensorViewARM);
			case vkGetTensorMemoryRequirementsARM: return typeof(PFN_vkGetTensorMemoryRequirementsARM);
			case vkBindTensorMemoryARM: return typeof(PFN_vkBindTensorMemoryARM);
			case vkGetDeviceTensorMemoryRequirementsARM: return typeof(PFN_vkGetDeviceTensorMemoryRequirementsARM);
			case vkCmdCopyTensorARM: return typeof(PFN_vkCmdCopyTensorARM);
			case vkGetTensorOpaqueCaptureDescriptorDataARM: return typeof(PFN_vkGetTensorOpaqueCaptureDescriptorDataARM);
			case vkGetTensorViewOpaqueCaptureDescriptorDataARM: return typeof(PFN_vkGetTensorViewOpaqueCaptureDescriptorDataARM);
			case vkGetPhysicalDeviceExternalTensorPropertiesARM: return typeof(PFN_vkGetPhysicalDeviceExternalTensorPropertiesARM);
			case vkCreateDataGraphPipelinesARM: return typeof(PFN_vkCreateDataGraphPipelinesARM);
			case vkCreateDataGraphPipelineSessionARM: return typeof(PFN_vkCreateDataGraphPipelineSessionARM);
			case vkGetDataGraphPipelineSessionBindPointRequirementsARM: return typeof(PFN_vkGetDataGraphPipelineSessionBindPointRequirementsARM);
			case vkGetDataGraphPipelineSessionMemoryRequirementsARM: return typeof(PFN_vkGetDataGraphPipelineSessionMemoryRequirementsARM);
			case vkBindDataGraphPipelineSessionMemoryARM: return typeof(PFN_vkBindDataGraphPipelineSessionMemoryARM);
			case vkDestroyDataGraphPipelineSessionARM: return typeof(PFN_vkDestroyDataGraphPipelineSessionARM);
			case vkCmdDispatchDataGraphARM: return typeof(PFN_vkCmdDispatchDataGraphARM);
			case vkGetDataGraphPipelineAvailablePropertiesARM: return typeof(PFN_vkGetDataGraphPipelineAvailablePropertiesARM);
			case vkGetDataGraphPipelinePropertiesARM: return typeof(PFN_vkGetDataGraphPipelinePropertiesARM);
			case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM: return typeof(PFN_vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM);
			case vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM: return typeof(PFN_vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM);
			}
		}
	}

	public static Self FromName(StringView command)
	{
		switch (command)
		{
		case nameof(vkCreateInstance): return vkCreateInstance;
		case nameof(vkDestroyInstance): return vkDestroyInstance;
		case nameof(vkEnumeratePhysicalDevices): return vkEnumeratePhysicalDevices;
		case nameof(vkGetDeviceProcAddr): return vkGetDeviceProcAddr;
		case nameof(vkGetInstanceProcAddr): return vkGetInstanceProcAddr;
		case nameof(vkGetPhysicalDeviceProperties): return vkGetPhysicalDeviceProperties;
		case nameof(vkGetPhysicalDeviceQueueFamilyProperties): return vkGetPhysicalDeviceQueueFamilyProperties;
		case nameof(vkGetPhysicalDeviceMemoryProperties): return vkGetPhysicalDeviceMemoryProperties;
		case nameof(vkGetPhysicalDeviceFeatures): return vkGetPhysicalDeviceFeatures;
		case nameof(vkGetPhysicalDeviceFormatProperties): return vkGetPhysicalDeviceFormatProperties;
		case nameof(vkGetPhysicalDeviceImageFormatProperties): return vkGetPhysicalDeviceImageFormatProperties;
		case nameof(vkCreateDevice): return vkCreateDevice;
		case nameof(vkDestroyDevice): return vkDestroyDevice;
		case nameof(vkEnumerateInstanceVersion): return vkEnumerateInstanceVersion;
		case nameof(vkEnumerateInstanceLayerProperties): return vkEnumerateInstanceLayerProperties;
		case nameof(vkEnumerateInstanceExtensionProperties): return vkEnumerateInstanceExtensionProperties;
		case nameof(vkEnumerateDeviceLayerProperties): return vkEnumerateDeviceLayerProperties;
		case nameof(vkEnumerateDeviceExtensionProperties): return vkEnumerateDeviceExtensionProperties;
		case nameof(vkGetDeviceQueue): return vkGetDeviceQueue;
		case nameof(vkQueueSubmit): return vkQueueSubmit;
		case nameof(vkQueueWaitIdle): return vkQueueWaitIdle;
		case nameof(vkDeviceWaitIdle): return vkDeviceWaitIdle;
		case nameof(vkAllocateMemory): return vkAllocateMemory;
		case nameof(vkFreeMemory): return vkFreeMemory;
		case nameof(vkMapMemory): return vkMapMemory;
		case nameof(vkUnmapMemory): return vkUnmapMemory;
		case nameof(vkFlushMappedMemoryRanges): return vkFlushMappedMemoryRanges;
		case nameof(vkInvalidateMappedMemoryRanges): return vkInvalidateMappedMemoryRanges;
		case nameof(vkGetDeviceMemoryCommitment): return vkGetDeviceMemoryCommitment;
		case nameof(vkGetBufferMemoryRequirements): return vkGetBufferMemoryRequirements;
		case nameof(vkBindBufferMemory): return vkBindBufferMemory;
		case nameof(vkGetImageMemoryRequirements): return vkGetImageMemoryRequirements;
		case nameof(vkBindImageMemory): return vkBindImageMemory;
		case nameof(vkGetImageSparseMemoryRequirements): return vkGetImageSparseMemoryRequirements;
		case nameof(vkGetPhysicalDeviceSparseImageFormatProperties): return vkGetPhysicalDeviceSparseImageFormatProperties;
		case nameof(vkQueueBindSparse): return vkQueueBindSparse;
		case nameof(vkCreateFence): return vkCreateFence;
		case nameof(vkDestroyFence): return vkDestroyFence;
		case nameof(vkResetFences): return vkResetFences;
		case nameof(vkGetFenceStatus): return vkGetFenceStatus;
		case nameof(vkWaitForFences): return vkWaitForFences;
		case nameof(vkCreateSemaphore): return vkCreateSemaphore;
		case nameof(vkDestroySemaphore): return vkDestroySemaphore;
		case nameof(vkCreateEvent): return vkCreateEvent;
		case nameof(vkDestroyEvent): return vkDestroyEvent;
		case nameof(vkGetEventStatus): return vkGetEventStatus;
		case nameof(vkSetEvent): return vkSetEvent;
		case nameof(vkResetEvent): return vkResetEvent;
		case nameof(vkCreateQueryPool): return vkCreateQueryPool;
		case nameof(vkDestroyQueryPool): return vkDestroyQueryPool;
		case nameof(vkGetQueryPoolResults): return vkGetQueryPoolResults;
		case nameof(vkResetQueryPool): return vkResetQueryPool;
		case nameof(vkCreateBuffer): return vkCreateBuffer;
		case nameof(vkDestroyBuffer): return vkDestroyBuffer;
		case nameof(vkCreateBufferView): return vkCreateBufferView;
		case nameof(vkDestroyBufferView): return vkDestroyBufferView;
		case nameof(vkCreateImage): return vkCreateImage;
		case nameof(vkDestroyImage): return vkDestroyImage;
		case nameof(vkGetImageSubresourceLayout): return vkGetImageSubresourceLayout;
		case nameof(vkCreateImageView): return vkCreateImageView;
		case nameof(vkDestroyImageView): return vkDestroyImageView;
		case nameof(vkCreateShaderModule): return vkCreateShaderModule;
		case nameof(vkDestroyShaderModule): return vkDestroyShaderModule;
		case nameof(vkCreatePipelineCache): return vkCreatePipelineCache;
		case nameof(vkDestroyPipelineCache): return vkDestroyPipelineCache;
		case nameof(vkGetPipelineCacheData): return vkGetPipelineCacheData;
		case nameof(vkMergePipelineCaches): return vkMergePipelineCaches;
		case nameof(vkCreatePipelineBinariesKHR): return vkCreatePipelineBinariesKHR;
		case nameof(vkDestroyPipelineBinaryKHR): return vkDestroyPipelineBinaryKHR;
		case nameof(vkGetPipelineKeyKHR): return vkGetPipelineKeyKHR;
		case nameof(vkGetPipelineBinaryDataKHR): return vkGetPipelineBinaryDataKHR;
		case nameof(vkReleaseCapturedPipelineDataKHR): return vkReleaseCapturedPipelineDataKHR;
		case nameof(vkCreateGraphicsPipelines): return vkCreateGraphicsPipelines;
		case nameof(vkCreateComputePipelines): return vkCreateComputePipelines;
		case nameof(vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI): return vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
		case nameof(vkDestroyPipeline): return vkDestroyPipeline;
		case nameof(vkCreatePipelineLayout): return vkCreatePipelineLayout;
		case nameof(vkDestroyPipelineLayout): return vkDestroyPipelineLayout;
		case nameof(vkCreateSampler): return vkCreateSampler;
		case nameof(vkDestroySampler): return vkDestroySampler;
		case nameof(vkCreateDescriptorSetLayout): return vkCreateDescriptorSetLayout;
		case nameof(vkDestroyDescriptorSetLayout): return vkDestroyDescriptorSetLayout;
		case nameof(vkCreateDescriptorPool): return vkCreateDescriptorPool;
		case nameof(vkDestroyDescriptorPool): return vkDestroyDescriptorPool;
		case nameof(vkResetDescriptorPool): return vkResetDescriptorPool;
		case nameof(vkAllocateDescriptorSets): return vkAllocateDescriptorSets;
		case nameof(vkFreeDescriptorSets): return vkFreeDescriptorSets;
		case nameof(vkUpdateDescriptorSets): return vkUpdateDescriptorSets;
		case nameof(vkCreateFramebuffer): return vkCreateFramebuffer;
		case nameof(vkDestroyFramebuffer): return vkDestroyFramebuffer;
		case nameof(vkCreateRenderPass): return vkCreateRenderPass;
		case nameof(vkDestroyRenderPass): return vkDestroyRenderPass;
		case nameof(vkGetRenderAreaGranularity): return vkGetRenderAreaGranularity;
		case nameof(vkGetRenderingAreaGranularity): return vkGetRenderingAreaGranularity;
		case nameof(vkCreateCommandPool): return vkCreateCommandPool;
		case nameof(vkDestroyCommandPool): return vkDestroyCommandPool;
		case nameof(vkResetCommandPool): return vkResetCommandPool;
		case nameof(vkAllocateCommandBuffers): return vkAllocateCommandBuffers;
		case nameof(vkFreeCommandBuffers): return vkFreeCommandBuffers;
		case nameof(vkBeginCommandBuffer): return vkBeginCommandBuffer;
		case nameof(vkEndCommandBuffer): return vkEndCommandBuffer;
		case nameof(vkResetCommandBuffer): return vkResetCommandBuffer;
		case nameof(vkCmdBindPipeline): return vkCmdBindPipeline;
		case nameof(vkCmdSetAttachmentFeedbackLoopEnableEXT): return vkCmdSetAttachmentFeedbackLoopEnableEXT;
		case nameof(vkCmdSetViewport): return vkCmdSetViewport;
		case nameof(vkCmdSetScissor): return vkCmdSetScissor;
		case nameof(vkCmdSetLineWidth): return vkCmdSetLineWidth;
		case nameof(vkCmdSetDepthBias): return vkCmdSetDepthBias;
		case nameof(vkCmdSetBlendConstants): return vkCmdSetBlendConstants;
		case nameof(vkCmdSetDepthBounds): return vkCmdSetDepthBounds;
		case nameof(vkCmdSetStencilCompareMask): return vkCmdSetStencilCompareMask;
		case nameof(vkCmdSetStencilWriteMask): return vkCmdSetStencilWriteMask;
		case nameof(vkCmdSetStencilReference): return vkCmdSetStencilReference;
		case nameof(vkCmdBindDescriptorSets): return vkCmdBindDescriptorSets;
		case nameof(vkCmdBindIndexBuffer): return vkCmdBindIndexBuffer;
		case nameof(vkCmdBindVertexBuffers): return vkCmdBindVertexBuffers;
		case nameof(vkCmdDraw): return vkCmdDraw;
		case nameof(vkCmdDrawIndexed): return vkCmdDrawIndexed;
		case nameof(vkCmdDrawMultiEXT): return vkCmdDrawMultiEXT;
		case nameof(vkCmdDrawMultiIndexedEXT): return vkCmdDrawMultiIndexedEXT;
		case nameof(vkCmdDrawIndirect): return vkCmdDrawIndirect;
		case nameof(vkCmdDrawIndexedIndirect): return vkCmdDrawIndexedIndirect;
		case nameof(vkCmdDispatch): return vkCmdDispatch;
		case nameof(vkCmdDispatchIndirect): return vkCmdDispatchIndirect;
		case nameof(vkCmdSubpassShadingHUAWEI): return vkCmdSubpassShadingHUAWEI;
		case nameof(vkCmdDrawClusterHUAWEI): return vkCmdDrawClusterHUAWEI;
		case nameof(vkCmdDrawClusterIndirectHUAWEI): return vkCmdDrawClusterIndirectHUAWEI;
		case nameof(vkCmdUpdatePipelineIndirectBufferNV): return vkCmdUpdatePipelineIndirectBufferNV;
		case nameof(vkCmdCopyBuffer): return vkCmdCopyBuffer;
		case nameof(vkCmdCopyImage): return vkCmdCopyImage;
		case nameof(vkCmdBlitImage): return vkCmdBlitImage;
		case nameof(vkCmdCopyBufferToImage): return vkCmdCopyBufferToImage;
		case nameof(vkCmdCopyImageToBuffer): return vkCmdCopyImageToBuffer;
		case nameof(vkCmdCopyMemoryIndirectNV): return vkCmdCopyMemoryIndirectNV;
		case nameof(vkCmdCopyMemoryToImageIndirectNV): return vkCmdCopyMemoryToImageIndirectNV;
		case nameof(vkCmdUpdateBuffer): return vkCmdUpdateBuffer;
		case nameof(vkCmdFillBuffer): return vkCmdFillBuffer;
		case nameof(vkCmdClearColorImage): return vkCmdClearColorImage;
		case nameof(vkCmdClearDepthStencilImage): return vkCmdClearDepthStencilImage;
		case nameof(vkCmdClearAttachments): return vkCmdClearAttachments;
		case nameof(vkCmdResolveImage): return vkCmdResolveImage;
		case nameof(vkCmdSetEvent): return vkCmdSetEvent;
		case nameof(vkCmdResetEvent): return vkCmdResetEvent;
		case nameof(vkCmdWaitEvents): return vkCmdWaitEvents;
		case nameof(vkCmdPipelineBarrier): return vkCmdPipelineBarrier;
		case nameof(vkCmdBeginQuery): return vkCmdBeginQuery;
		case nameof(vkCmdEndQuery): return vkCmdEndQuery;
		case nameof(vkCmdBeginConditionalRenderingEXT): return vkCmdBeginConditionalRenderingEXT;
		case nameof(vkCmdEndConditionalRenderingEXT): return vkCmdEndConditionalRenderingEXT;
		case nameof(vkCmdResetQueryPool): return vkCmdResetQueryPool;
		case nameof(vkCmdWriteTimestamp): return vkCmdWriteTimestamp;
		case nameof(vkCmdCopyQueryPoolResults): return vkCmdCopyQueryPoolResults;
		case nameof(vkCmdPushConstants): return vkCmdPushConstants;
		case nameof(vkCmdBeginRenderPass): return vkCmdBeginRenderPass;
		case nameof(vkCmdNextSubpass): return vkCmdNextSubpass;
		case nameof(vkCmdEndRenderPass): return vkCmdEndRenderPass;
		case nameof(vkCmdExecuteCommands): return vkCmdExecuteCommands;
		case nameof(vkGetPhysicalDeviceDisplayPropertiesKHR): return vkGetPhysicalDeviceDisplayPropertiesKHR;
		case nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR): return vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
		case nameof(vkGetDisplayPlaneSupportedDisplaysKHR): return vkGetDisplayPlaneSupportedDisplaysKHR;
		case nameof(vkGetDisplayModePropertiesKHR): return vkGetDisplayModePropertiesKHR;
		case nameof(vkCreateDisplayModeKHR): return vkCreateDisplayModeKHR;
		case nameof(vkGetDisplayPlaneCapabilitiesKHR): return vkGetDisplayPlaneCapabilitiesKHR;
		case nameof(vkCreateDisplayPlaneSurfaceKHR): return vkCreateDisplayPlaneSurfaceKHR;
		case nameof(vkCreateSharedSwapchainsKHR): return vkCreateSharedSwapchainsKHR;
		case nameof(vkDestroySurfaceKHR): return vkDestroySurfaceKHR;
		case nameof(vkGetPhysicalDeviceSurfaceSupportKHR): return vkGetPhysicalDeviceSurfaceSupportKHR;
		case nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR): return vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
		case nameof(vkGetPhysicalDeviceSurfaceFormatsKHR): return vkGetPhysicalDeviceSurfaceFormatsKHR;
		case nameof(vkGetPhysicalDeviceSurfacePresentModesKHR): return vkGetPhysicalDeviceSurfacePresentModesKHR;
		case nameof(vkCreateSwapchainKHR): return vkCreateSwapchainKHR;
		case nameof(vkDestroySwapchainKHR): return vkDestroySwapchainKHR;
		case nameof(vkGetSwapchainImagesKHR): return vkGetSwapchainImagesKHR;
		case nameof(vkAcquireNextImageKHR): return vkAcquireNextImageKHR;
		case nameof(vkQueuePresentKHR): return vkQueuePresentKHR;
		case nameof(vkCreateDebugReportCallbackEXT): return vkCreateDebugReportCallbackEXT;
		case nameof(vkDestroyDebugReportCallbackEXT): return vkDestroyDebugReportCallbackEXT;
		case nameof(vkDebugReportMessageEXT): return vkDebugReportMessageEXT;
		case nameof(vkDebugMarkerSetObjectNameEXT): return vkDebugMarkerSetObjectNameEXT;
		case nameof(vkDebugMarkerSetObjectTagEXT): return vkDebugMarkerSetObjectTagEXT;
		case nameof(vkCmdDebugMarkerBeginEXT): return vkCmdDebugMarkerBeginEXT;
		case nameof(vkCmdDebugMarkerEndEXT): return vkCmdDebugMarkerEndEXT;
		case nameof(vkCmdDebugMarkerInsertEXT): return vkCmdDebugMarkerInsertEXT;
		case nameof(vkGetPhysicalDeviceExternalImageFormatPropertiesNV): return vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
		case nameof(vkCmdExecuteGeneratedCommandsNV): return vkCmdExecuteGeneratedCommandsNV;
		case nameof(vkCmdPreprocessGeneratedCommandsNV): return vkCmdPreprocessGeneratedCommandsNV;
		case nameof(vkCmdBindPipelineShaderGroupNV): return vkCmdBindPipelineShaderGroupNV;
		case nameof(vkGetGeneratedCommandsMemoryRequirementsNV): return vkGetGeneratedCommandsMemoryRequirementsNV;
		case nameof(vkCreateIndirectCommandsLayoutNV): return vkCreateIndirectCommandsLayoutNV;
		case nameof(vkDestroyIndirectCommandsLayoutNV): return vkDestroyIndirectCommandsLayoutNV;
		case nameof(vkCmdExecuteGeneratedCommandsEXT): return vkCmdExecuteGeneratedCommandsEXT;
		case nameof(vkCmdPreprocessGeneratedCommandsEXT): return vkCmdPreprocessGeneratedCommandsEXT;
		case nameof(vkGetGeneratedCommandsMemoryRequirementsEXT): return vkGetGeneratedCommandsMemoryRequirementsEXT;
		case nameof(vkCreateIndirectCommandsLayoutEXT): return vkCreateIndirectCommandsLayoutEXT;
		case nameof(vkDestroyIndirectCommandsLayoutEXT): return vkDestroyIndirectCommandsLayoutEXT;
		case nameof(vkCreateIndirectExecutionSetEXT): return vkCreateIndirectExecutionSetEXT;
		case nameof(vkDestroyIndirectExecutionSetEXT): return vkDestroyIndirectExecutionSetEXT;
		case nameof(vkUpdateIndirectExecutionSetPipelineEXT): return vkUpdateIndirectExecutionSetPipelineEXT;
		case nameof(vkUpdateIndirectExecutionSetShaderEXT): return vkUpdateIndirectExecutionSetShaderEXT;
		case nameof(vkGetPhysicalDeviceFeatures2): return vkGetPhysicalDeviceFeatures2;
		case nameof(vkGetPhysicalDeviceProperties2): return vkGetPhysicalDeviceProperties2;
		case nameof(vkGetPhysicalDeviceFormatProperties2): return vkGetPhysicalDeviceFormatProperties2;
		case nameof(vkGetPhysicalDeviceImageFormatProperties2): return vkGetPhysicalDeviceImageFormatProperties2;
		case nameof(vkGetPhysicalDeviceQueueFamilyProperties2): return vkGetPhysicalDeviceQueueFamilyProperties2;
		case nameof(vkGetPhysicalDeviceMemoryProperties2): return vkGetPhysicalDeviceMemoryProperties2;
		case nameof(vkGetPhysicalDeviceSparseImageFormatProperties2): return vkGetPhysicalDeviceSparseImageFormatProperties2;
		case nameof(vkCmdPushDescriptorSet): return vkCmdPushDescriptorSet;
		case nameof(vkTrimCommandPool): return vkTrimCommandPool;
		case nameof(vkGetPhysicalDeviceExternalBufferProperties): return vkGetPhysicalDeviceExternalBufferProperties;
		case nameof(vkGetMemoryFdKHR): return vkGetMemoryFdKHR;
		case nameof(vkGetMemoryFdPropertiesKHR): return vkGetMemoryFdPropertiesKHR;
		case nameof(vkGetMemoryRemoteAddressNV): return vkGetMemoryRemoteAddressNV;
		case nameof(vkGetPhysicalDeviceExternalSemaphoreProperties): return vkGetPhysicalDeviceExternalSemaphoreProperties;
		case nameof(vkGetSemaphoreFdKHR): return vkGetSemaphoreFdKHR;
		case nameof(vkImportSemaphoreFdKHR): return vkImportSemaphoreFdKHR;
		case nameof(vkGetPhysicalDeviceExternalFenceProperties): return vkGetPhysicalDeviceExternalFenceProperties;
		case nameof(vkGetFenceFdKHR): return vkGetFenceFdKHR;
		case nameof(vkImportFenceFdKHR): return vkImportFenceFdKHR;
		case nameof(vkReleaseDisplayEXT): return vkReleaseDisplayEXT;
		case nameof(vkDisplayPowerControlEXT): return vkDisplayPowerControlEXT;
		case nameof(vkRegisterDeviceEventEXT): return vkRegisterDeviceEventEXT;
		case nameof(vkRegisterDisplayEventEXT): return vkRegisterDisplayEventEXT;
		case nameof(vkGetSwapchainCounterEXT): return vkGetSwapchainCounterEXT;
		case nameof(vkGetPhysicalDeviceSurfaceCapabilities2EXT): return vkGetPhysicalDeviceSurfaceCapabilities2EXT;
		case nameof(vkEnumeratePhysicalDeviceGroups): return vkEnumeratePhysicalDeviceGroups;
		case nameof(vkGetDeviceGroupPeerMemoryFeatures): return vkGetDeviceGroupPeerMemoryFeatures;
		case nameof(vkBindBufferMemory2): return vkBindBufferMemory2;
		case nameof(vkBindImageMemory2): return vkBindImageMemory2;
		case nameof(vkCmdSetDeviceMask): return vkCmdSetDeviceMask;
		case nameof(vkGetDeviceGroupPresentCapabilitiesKHR): return vkGetDeviceGroupPresentCapabilitiesKHR;
		case nameof(vkGetDeviceGroupSurfacePresentModesKHR): return vkGetDeviceGroupSurfacePresentModesKHR;
		case nameof(vkAcquireNextImage2KHR): return vkAcquireNextImage2KHR;
		case nameof(vkCmdDispatchBase): return vkCmdDispatchBase;
		case nameof(vkGetPhysicalDevicePresentRectanglesKHR): return vkGetPhysicalDevicePresentRectanglesKHR;
		case nameof(vkCreateDescriptorUpdateTemplate): return vkCreateDescriptorUpdateTemplate;
		case nameof(vkDestroyDescriptorUpdateTemplate): return vkDestroyDescriptorUpdateTemplate;
		case nameof(vkUpdateDescriptorSetWithTemplate): return vkUpdateDescriptorSetWithTemplate;
		case nameof(vkCmdPushDescriptorSetWithTemplate): return vkCmdPushDescriptorSetWithTemplate;
		case nameof(vkSetHdrMetadataEXT): return vkSetHdrMetadataEXT;
		case nameof(vkGetSwapchainStatusKHR): return vkGetSwapchainStatusKHR;
		case nameof(vkGetRefreshCycleDurationGOOGLE): return vkGetRefreshCycleDurationGOOGLE;
		case nameof(vkGetPastPresentationTimingGOOGLE): return vkGetPastPresentationTimingGOOGLE;
		case nameof(vkCmdSetViewportWScalingNV): return vkCmdSetViewportWScalingNV;
		case nameof(vkCmdSetDiscardRectangleEXT): return vkCmdSetDiscardRectangleEXT;
		case nameof(vkCmdSetDiscardRectangleEnableEXT): return vkCmdSetDiscardRectangleEnableEXT;
		case nameof(vkCmdSetDiscardRectangleModeEXT): return vkCmdSetDiscardRectangleModeEXT;
		case nameof(vkCmdSetSampleLocationsEXT): return vkCmdSetSampleLocationsEXT;
		case nameof(vkGetPhysicalDeviceMultisamplePropertiesEXT): return vkGetPhysicalDeviceMultisamplePropertiesEXT;
		case nameof(vkGetPhysicalDeviceSurfaceCapabilities2KHR): return vkGetPhysicalDeviceSurfaceCapabilities2KHR;
		case nameof(vkGetPhysicalDeviceSurfaceFormats2KHR): return vkGetPhysicalDeviceSurfaceFormats2KHR;
		case nameof(vkGetPhysicalDeviceDisplayProperties2KHR): return vkGetPhysicalDeviceDisplayProperties2KHR;
		case nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR): return vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
		case nameof(vkGetDisplayModeProperties2KHR): return vkGetDisplayModeProperties2KHR;
		case nameof(vkGetDisplayPlaneCapabilities2KHR): return vkGetDisplayPlaneCapabilities2KHR;
		case nameof(vkGetBufferMemoryRequirements2): return vkGetBufferMemoryRequirements2;
		case nameof(vkGetImageMemoryRequirements2): return vkGetImageMemoryRequirements2;
		case nameof(vkGetImageSparseMemoryRequirements2): return vkGetImageSparseMemoryRequirements2;
		case nameof(vkGetDeviceBufferMemoryRequirements): return vkGetDeviceBufferMemoryRequirements;
		case nameof(vkGetDeviceImageMemoryRequirements): return vkGetDeviceImageMemoryRequirements;
		case nameof(vkGetDeviceImageSparseMemoryRequirements): return vkGetDeviceImageSparseMemoryRequirements;
		case nameof(vkCreateSamplerYcbcrConversion): return vkCreateSamplerYcbcrConversion;
		case nameof(vkDestroySamplerYcbcrConversion): return vkDestroySamplerYcbcrConversion;
		case nameof(vkGetDeviceQueue2): return vkGetDeviceQueue2;
		case nameof(vkCreateValidationCacheEXT): return vkCreateValidationCacheEXT;
		case nameof(vkDestroyValidationCacheEXT): return vkDestroyValidationCacheEXT;
		case nameof(vkGetValidationCacheDataEXT): return vkGetValidationCacheDataEXT;
		case nameof(vkMergeValidationCachesEXT): return vkMergeValidationCachesEXT;
		case nameof(vkGetDescriptorSetLayoutSupport): return vkGetDescriptorSetLayoutSupport;
		case nameof(vkGetShaderInfoAMD): return vkGetShaderInfoAMD;
		case nameof(vkSetLocalDimmingAMD): return vkSetLocalDimmingAMD;
		case nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsKHR): return vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
		case nameof(vkGetCalibratedTimestampsKHR): return vkGetCalibratedTimestampsKHR;
		case nameof(vkSetDebugUtilsObjectNameEXT): return vkSetDebugUtilsObjectNameEXT;
		case nameof(vkSetDebugUtilsObjectTagEXT): return vkSetDebugUtilsObjectTagEXT;
		case nameof(vkQueueBeginDebugUtilsLabelEXT): return vkQueueBeginDebugUtilsLabelEXT;
		case nameof(vkQueueEndDebugUtilsLabelEXT): return vkQueueEndDebugUtilsLabelEXT;
		case nameof(vkQueueInsertDebugUtilsLabelEXT): return vkQueueInsertDebugUtilsLabelEXT;
		case nameof(vkCmdBeginDebugUtilsLabelEXT): return vkCmdBeginDebugUtilsLabelEXT;
		case nameof(vkCmdEndDebugUtilsLabelEXT): return vkCmdEndDebugUtilsLabelEXT;
		case nameof(vkCmdInsertDebugUtilsLabelEXT): return vkCmdInsertDebugUtilsLabelEXT;
		case nameof(vkCreateDebugUtilsMessengerEXT): return vkCreateDebugUtilsMessengerEXT;
		case nameof(vkDestroyDebugUtilsMessengerEXT): return vkDestroyDebugUtilsMessengerEXT;
		case nameof(vkSubmitDebugUtilsMessageEXT): return vkSubmitDebugUtilsMessageEXT;
		case nameof(vkGetMemoryHostPointerPropertiesEXT): return vkGetMemoryHostPointerPropertiesEXT;
		case nameof(vkCmdWriteBufferMarkerAMD): return vkCmdWriteBufferMarkerAMD;
		case nameof(vkCreateRenderPass2): return vkCreateRenderPass2;
		case nameof(vkCmdBeginRenderPass2): return vkCmdBeginRenderPass2;
		case nameof(vkCmdNextSubpass2): return vkCmdNextSubpass2;
		case nameof(vkCmdEndRenderPass2): return vkCmdEndRenderPass2;
		case nameof(vkGetSemaphoreCounterValue): return vkGetSemaphoreCounterValue;
		case nameof(vkWaitSemaphores): return vkWaitSemaphores;
		case nameof(vkSignalSemaphore): return vkSignalSemaphore;
		case nameof(vkCmdDrawIndirectCount): return vkCmdDrawIndirectCount;
		case nameof(vkCmdDrawIndexedIndirectCount): return vkCmdDrawIndexedIndirectCount;
		case nameof(vkCmdSetCheckpointNV): return vkCmdSetCheckpointNV;
		case nameof(vkGetQueueCheckpointDataNV): return vkGetQueueCheckpointDataNV;
		case nameof(vkCmdBindTransformFeedbackBuffersEXT): return vkCmdBindTransformFeedbackBuffersEXT;
		case nameof(vkCmdBeginTransformFeedbackEXT): return vkCmdBeginTransformFeedbackEXT;
		case nameof(vkCmdEndTransformFeedbackEXT): return vkCmdEndTransformFeedbackEXT;
		case nameof(vkCmdBeginQueryIndexedEXT): return vkCmdBeginQueryIndexedEXT;
		case nameof(vkCmdEndQueryIndexedEXT): return vkCmdEndQueryIndexedEXT;
		case nameof(vkCmdDrawIndirectByteCountEXT): return vkCmdDrawIndirectByteCountEXT;
		case nameof(vkCmdSetExclusiveScissorNV): return vkCmdSetExclusiveScissorNV;
		case nameof(vkCmdSetExclusiveScissorEnableNV): return vkCmdSetExclusiveScissorEnableNV;
		case nameof(vkCmdBindShadingRateImageNV): return vkCmdBindShadingRateImageNV;
		case nameof(vkCmdSetViewportShadingRatePaletteNV): return vkCmdSetViewportShadingRatePaletteNV;
		case nameof(vkCmdSetCoarseSampleOrderNV): return vkCmdSetCoarseSampleOrderNV;
		case nameof(vkCmdDrawMeshTasksNV): return vkCmdDrawMeshTasksNV;
		case nameof(vkCmdDrawMeshTasksIndirectNV): return vkCmdDrawMeshTasksIndirectNV;
		case nameof(vkCmdDrawMeshTasksIndirectCountNV): return vkCmdDrawMeshTasksIndirectCountNV;
		case nameof(vkCmdDrawMeshTasksEXT): return vkCmdDrawMeshTasksEXT;
		case nameof(vkCmdDrawMeshTasksIndirectEXT): return vkCmdDrawMeshTasksIndirectEXT;
		case nameof(vkCmdDrawMeshTasksIndirectCountEXT): return vkCmdDrawMeshTasksIndirectCountEXT;
		case nameof(vkCompileDeferredNV): return vkCompileDeferredNV;
		case nameof(vkCreateAccelerationStructureNV): return vkCreateAccelerationStructureNV;
		case nameof(vkCmdBindInvocationMaskHUAWEI): return vkCmdBindInvocationMaskHUAWEI;
		case nameof(vkDestroyAccelerationStructureKHR): return vkDestroyAccelerationStructureKHR;
		case nameof(vkDestroyAccelerationStructureNV): return vkDestroyAccelerationStructureNV;
		case nameof(vkGetAccelerationStructureMemoryRequirementsNV): return vkGetAccelerationStructureMemoryRequirementsNV;
		case nameof(vkBindAccelerationStructureMemoryNV): return vkBindAccelerationStructureMemoryNV;
		case nameof(vkCmdCopyAccelerationStructureNV): return vkCmdCopyAccelerationStructureNV;
		case nameof(vkCmdCopyAccelerationStructureKHR): return vkCmdCopyAccelerationStructureKHR;
		case nameof(vkCopyAccelerationStructureKHR): return vkCopyAccelerationStructureKHR;
		case nameof(vkCmdCopyAccelerationStructureToMemoryKHR): return vkCmdCopyAccelerationStructureToMemoryKHR;
		case nameof(vkCopyAccelerationStructureToMemoryKHR): return vkCopyAccelerationStructureToMemoryKHR;
		case nameof(vkCmdCopyMemoryToAccelerationStructureKHR): return vkCmdCopyMemoryToAccelerationStructureKHR;
		case nameof(vkCopyMemoryToAccelerationStructureKHR): return vkCopyMemoryToAccelerationStructureKHR;
		case nameof(vkCmdWriteAccelerationStructuresPropertiesKHR): return vkCmdWriteAccelerationStructuresPropertiesKHR;
		case nameof(vkCmdWriteAccelerationStructuresPropertiesNV): return vkCmdWriteAccelerationStructuresPropertiesNV;
		case nameof(vkCmdBuildAccelerationStructureNV): return vkCmdBuildAccelerationStructureNV;
		case nameof(vkWriteAccelerationStructuresPropertiesKHR): return vkWriteAccelerationStructuresPropertiesKHR;
		case nameof(vkCmdTraceRaysKHR): return vkCmdTraceRaysKHR;
		case nameof(vkCmdTraceRaysNV): return vkCmdTraceRaysNV;
		case nameof(vkGetRayTracingShaderGroupHandlesKHR): return vkGetRayTracingShaderGroupHandlesKHR;
		case nameof(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR): return vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
		case nameof(vkGetAccelerationStructureHandleNV): return vkGetAccelerationStructureHandleNV;
		case nameof(vkCreateRayTracingPipelinesNV): return vkCreateRayTracingPipelinesNV;
		case nameof(vkCreateRayTracingPipelinesKHR): return vkCreateRayTracingPipelinesKHR;
		case nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV): return vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
		case nameof(vkCmdTraceRaysIndirectKHR): return vkCmdTraceRaysIndirectKHR;
		case nameof(vkCmdTraceRaysIndirect2KHR): return vkCmdTraceRaysIndirect2KHR;
		case nameof(vkGetClusterAccelerationStructureBuildSizesNV): return vkGetClusterAccelerationStructureBuildSizesNV;
		case nameof(vkCmdBuildClusterAccelerationStructureIndirectNV): return vkCmdBuildClusterAccelerationStructureIndirectNV;
		case nameof(vkGetDeviceAccelerationStructureCompatibilityKHR): return vkGetDeviceAccelerationStructureCompatibilityKHR;
		case nameof(vkGetRayTracingShaderGroupStackSizeKHR): return vkGetRayTracingShaderGroupStackSizeKHR;
		case nameof(vkCmdSetRayTracingPipelineStackSizeKHR): return vkCmdSetRayTracingPipelineStackSizeKHR;
		case nameof(vkGetImageViewHandleNVX): return vkGetImageViewHandleNVX;
		case nameof(vkGetImageViewHandle64NVX): return vkGetImageViewHandle64NVX;
		case nameof(vkGetImageViewAddressNVX): return vkGetImageViewAddressNVX;
		case nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR): return vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
		case nameof(vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR): return vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
		case nameof(vkAcquireProfilingLockKHR): return vkAcquireProfilingLockKHR;
		case nameof(vkReleaseProfilingLockKHR): return vkReleaseProfilingLockKHR;
		case nameof(vkGetImageDrmFormatModifierPropertiesEXT): return vkGetImageDrmFormatModifierPropertiesEXT;
		case nameof(vkGetBufferOpaqueCaptureAddress): return vkGetBufferOpaqueCaptureAddress;
		case nameof(vkGetBufferDeviceAddress): return vkGetBufferDeviceAddress;
		case nameof(vkCreateHeadlessSurfaceEXT): return vkCreateHeadlessSurfaceEXT;
		case nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV): return vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
		case nameof(vkInitializePerformanceApiINTEL): return vkInitializePerformanceApiINTEL;
		case nameof(vkUninitializePerformanceApiINTEL): return vkUninitializePerformanceApiINTEL;
		case nameof(vkCmdSetPerformanceMarkerINTEL): return vkCmdSetPerformanceMarkerINTEL;
		case nameof(vkCmdSetPerformanceStreamMarkerINTEL): return vkCmdSetPerformanceStreamMarkerINTEL;
		case nameof(vkCmdSetPerformanceOverrideINTEL): return vkCmdSetPerformanceOverrideINTEL;
		case nameof(vkAcquirePerformanceConfigurationINTEL): return vkAcquirePerformanceConfigurationINTEL;
		case nameof(vkReleasePerformanceConfigurationINTEL): return vkReleasePerformanceConfigurationINTEL;
		case nameof(vkQueueSetPerformanceConfigurationINTEL): return vkQueueSetPerformanceConfigurationINTEL;
		case nameof(vkGetPerformanceParameterINTEL): return vkGetPerformanceParameterINTEL;
		case nameof(vkGetDeviceMemoryOpaqueCaptureAddress): return vkGetDeviceMemoryOpaqueCaptureAddress;
		case nameof(vkGetPipelineExecutablePropertiesKHR): return vkGetPipelineExecutablePropertiesKHR;
		case nameof(vkGetPipelineExecutableStatisticsKHR): return vkGetPipelineExecutableStatisticsKHR;
		case nameof(vkGetPipelineExecutableInternalRepresentationsKHR): return vkGetPipelineExecutableInternalRepresentationsKHR;
		case nameof(vkCmdSetLineStipple): return vkCmdSetLineStipple;
		case nameof(vkGetPhysicalDeviceToolProperties): return vkGetPhysicalDeviceToolProperties;
		case nameof(vkCreateAccelerationStructureKHR): return vkCreateAccelerationStructureKHR;
		case nameof(vkCmdBuildAccelerationStructuresKHR): return vkCmdBuildAccelerationStructuresKHR;
		case nameof(vkCmdBuildAccelerationStructuresIndirectKHR): return vkCmdBuildAccelerationStructuresIndirectKHR;
		case nameof(vkBuildAccelerationStructuresKHR): return vkBuildAccelerationStructuresKHR;
		case nameof(vkGetAccelerationStructureDeviceAddressKHR): return vkGetAccelerationStructureDeviceAddressKHR;
		case nameof(vkCreateDeferredOperationKHR): return vkCreateDeferredOperationKHR;
		case nameof(vkDestroyDeferredOperationKHR): return vkDestroyDeferredOperationKHR;
		case nameof(vkGetDeferredOperationMaxConcurrencyKHR): return vkGetDeferredOperationMaxConcurrencyKHR;
		case nameof(vkGetDeferredOperationResultKHR): return vkGetDeferredOperationResultKHR;
		case nameof(vkDeferredOperationJoinKHR): return vkDeferredOperationJoinKHR;
		case nameof(vkGetPipelineIndirectMemoryRequirementsNV): return vkGetPipelineIndirectMemoryRequirementsNV;
		case nameof(vkGetPipelineIndirectDeviceAddressNV): return vkGetPipelineIndirectDeviceAddressNV;
		case nameof(vkAntiLagUpdateAMD): return vkAntiLagUpdateAMD;
		case nameof(vkCmdSetCullMode): return vkCmdSetCullMode;
		case nameof(vkCmdSetFrontFace): return vkCmdSetFrontFace;
		case nameof(vkCmdSetPrimitiveTopology): return vkCmdSetPrimitiveTopology;
		case nameof(vkCmdSetViewportWithCount): return vkCmdSetViewportWithCount;
		case nameof(vkCmdSetScissorWithCount): return vkCmdSetScissorWithCount;
		case nameof(vkCmdBindIndexBuffer2): return vkCmdBindIndexBuffer2;
		case nameof(vkCmdBindVertexBuffers2): return vkCmdBindVertexBuffers2;
		case nameof(vkCmdSetDepthTestEnable): return vkCmdSetDepthTestEnable;
		case nameof(vkCmdSetDepthWriteEnable): return vkCmdSetDepthWriteEnable;
		case nameof(vkCmdSetDepthCompareOp): return vkCmdSetDepthCompareOp;
		case nameof(vkCmdSetDepthBoundsTestEnable): return vkCmdSetDepthBoundsTestEnable;
		case nameof(vkCmdSetStencilTestEnable): return vkCmdSetStencilTestEnable;
		case nameof(vkCmdSetStencilOp): return vkCmdSetStencilOp;
		case nameof(vkCmdSetPatchControlPointsEXT): return vkCmdSetPatchControlPointsEXT;
		case nameof(vkCmdSetRasterizerDiscardEnable): return vkCmdSetRasterizerDiscardEnable;
		case nameof(vkCmdSetDepthBiasEnable): return vkCmdSetDepthBiasEnable;
		case nameof(vkCmdSetLogicOpEXT): return vkCmdSetLogicOpEXT;
		case nameof(vkCmdSetPrimitiveRestartEnable): return vkCmdSetPrimitiveRestartEnable;
		case nameof(vkCmdSetTessellationDomainOriginEXT): return vkCmdSetTessellationDomainOriginEXT;
		case nameof(vkCmdSetDepthClampEnableEXT): return vkCmdSetDepthClampEnableEXT;
		case nameof(vkCmdSetPolygonModeEXT): return vkCmdSetPolygonModeEXT;
		case nameof(vkCmdSetRasterizationSamplesEXT): return vkCmdSetRasterizationSamplesEXT;
		case nameof(vkCmdSetSampleMaskEXT): return vkCmdSetSampleMaskEXT;
		case nameof(vkCmdSetAlphaToCoverageEnableEXT): return vkCmdSetAlphaToCoverageEnableEXT;
		case nameof(vkCmdSetAlphaToOneEnableEXT): return vkCmdSetAlphaToOneEnableEXT;
		case nameof(vkCmdSetLogicOpEnableEXT): return vkCmdSetLogicOpEnableEXT;
		case nameof(vkCmdSetColorBlendEnableEXT): return vkCmdSetColorBlendEnableEXT;
		case nameof(vkCmdSetColorBlendEquationEXT): return vkCmdSetColorBlendEquationEXT;
		case nameof(vkCmdSetColorWriteMaskEXT): return vkCmdSetColorWriteMaskEXT;
		case nameof(vkCmdSetRasterizationStreamEXT): return vkCmdSetRasterizationStreamEXT;
		case nameof(vkCmdSetConservativeRasterizationModeEXT): return vkCmdSetConservativeRasterizationModeEXT;
		case nameof(vkCmdSetExtraPrimitiveOverestimationSizeEXT): return vkCmdSetExtraPrimitiveOverestimationSizeEXT;
		case nameof(vkCmdSetDepthClipEnableEXT): return vkCmdSetDepthClipEnableEXT;
		case nameof(vkCmdSetSampleLocationsEnableEXT): return vkCmdSetSampleLocationsEnableEXT;
		case nameof(vkCmdSetColorBlendAdvancedEXT): return vkCmdSetColorBlendAdvancedEXT;
		case nameof(vkCmdSetProvokingVertexModeEXT): return vkCmdSetProvokingVertexModeEXT;
		case nameof(vkCmdSetLineRasterizationModeEXT): return vkCmdSetLineRasterizationModeEXT;
		case nameof(vkCmdSetLineStippleEnableEXT): return vkCmdSetLineStippleEnableEXT;
		case nameof(vkCmdSetDepthClipNegativeOneToOneEXT): return vkCmdSetDepthClipNegativeOneToOneEXT;
		case nameof(vkCmdSetViewportWScalingEnableNV): return vkCmdSetViewportWScalingEnableNV;
		case nameof(vkCmdSetViewportSwizzleNV): return vkCmdSetViewportSwizzleNV;
		case nameof(vkCmdSetCoverageToColorEnableNV): return vkCmdSetCoverageToColorEnableNV;
		case nameof(vkCmdSetCoverageToColorLocationNV): return vkCmdSetCoverageToColorLocationNV;
		case nameof(vkCmdSetCoverageModulationModeNV): return vkCmdSetCoverageModulationModeNV;
		case nameof(vkCmdSetCoverageModulationTableEnableNV): return vkCmdSetCoverageModulationTableEnableNV;
		case nameof(vkCmdSetCoverageModulationTableNV): return vkCmdSetCoverageModulationTableNV;
		case nameof(vkCmdSetShadingRateImageEnableNV): return vkCmdSetShadingRateImageEnableNV;
		case nameof(vkCmdSetCoverageReductionModeNV): return vkCmdSetCoverageReductionModeNV;
		case nameof(vkCmdSetRepresentativeFragmentTestEnableNV): return vkCmdSetRepresentativeFragmentTestEnableNV;
		case nameof(vkCreatePrivateDataSlot): return vkCreatePrivateDataSlot;
		case nameof(vkDestroyPrivateDataSlot): return vkDestroyPrivateDataSlot;
		case nameof(vkSetPrivateData): return vkSetPrivateData;
		case nameof(vkGetPrivateData): return vkGetPrivateData;
		case nameof(vkCmdCopyBuffer2): return vkCmdCopyBuffer2;
		case nameof(vkCmdCopyImage2): return vkCmdCopyImage2;
		case nameof(vkCmdBlitImage2): return vkCmdBlitImage2;
		case nameof(vkCmdCopyBufferToImage2): return vkCmdCopyBufferToImage2;
		case nameof(vkCmdCopyImageToBuffer2): return vkCmdCopyImageToBuffer2;
		case nameof(vkCmdResolveImage2): return vkCmdResolveImage2;
		case nameof(vkCmdSetFragmentShadingRateKHR): return vkCmdSetFragmentShadingRateKHR;
		case nameof(vkGetPhysicalDeviceFragmentShadingRatesKHR): return vkGetPhysicalDeviceFragmentShadingRatesKHR;
		case nameof(vkCmdSetFragmentShadingRateEnumNV): return vkCmdSetFragmentShadingRateEnumNV;
		case nameof(vkGetAccelerationStructureBuildSizesKHR): return vkGetAccelerationStructureBuildSizesKHR;
		case nameof(vkCmdSetVertexInputEXT): return vkCmdSetVertexInputEXT;
		case nameof(vkCmdSetColorWriteEnableEXT): return vkCmdSetColorWriteEnableEXT;
		case nameof(vkCmdSetEvent2): return vkCmdSetEvent2;
		case nameof(vkCmdResetEvent2): return vkCmdResetEvent2;
		case nameof(vkCmdWaitEvents2): return vkCmdWaitEvents2;
		case nameof(vkCmdPipelineBarrier2): return vkCmdPipelineBarrier2;
		case nameof(vkQueueSubmit2): return vkQueueSubmit2;
		case nameof(vkCmdWriteTimestamp2): return vkCmdWriteTimestamp2;
		case nameof(vkCmdWriteBufferMarker2AMD): return vkCmdWriteBufferMarker2AMD;
		case nameof(vkGetQueueCheckpointData2NV): return vkGetQueueCheckpointData2NV;
		case nameof(vkCopyMemoryToImage): return vkCopyMemoryToImage;
		case nameof(vkCopyImageToMemory): return vkCopyImageToMemory;
		case nameof(vkCopyImageToImage): return vkCopyImageToImage;
		case nameof(vkTransitionImageLayout): return vkTransitionImageLayout;
		case nameof(vkGetPhysicalDeviceVideoCapabilitiesKHR): return vkGetPhysicalDeviceVideoCapabilitiesKHR;
		case nameof(vkGetPhysicalDeviceVideoFormatPropertiesKHR): return vkGetPhysicalDeviceVideoFormatPropertiesKHR;
		case nameof(vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR): return vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
		case nameof(vkCreateVideoSessionKHR): return vkCreateVideoSessionKHR;
		case nameof(vkDestroyVideoSessionKHR): return vkDestroyVideoSessionKHR;
		case nameof(vkCreateVideoSessionParametersKHR): return vkCreateVideoSessionParametersKHR;
		case nameof(vkUpdateVideoSessionParametersKHR): return vkUpdateVideoSessionParametersKHR;
		case nameof(vkGetEncodedVideoSessionParametersKHR): return vkGetEncodedVideoSessionParametersKHR;
		case nameof(vkDestroyVideoSessionParametersKHR): return vkDestroyVideoSessionParametersKHR;
		case nameof(vkGetVideoSessionMemoryRequirementsKHR): return vkGetVideoSessionMemoryRequirementsKHR;
		case nameof(vkBindVideoSessionMemoryKHR): return vkBindVideoSessionMemoryKHR;
		case nameof(vkCmdDecodeVideoKHR): return vkCmdDecodeVideoKHR;
		case nameof(vkCmdBeginVideoCodingKHR): return vkCmdBeginVideoCodingKHR;
		case nameof(vkCmdControlVideoCodingKHR): return vkCmdControlVideoCodingKHR;
		case nameof(vkCmdEndVideoCodingKHR): return vkCmdEndVideoCodingKHR;
		case nameof(vkCmdEncodeVideoKHR): return vkCmdEncodeVideoKHR;
		case nameof(vkCmdDecompressMemoryNV): return vkCmdDecompressMemoryNV;
		case nameof(vkCmdDecompressMemoryIndirectCountNV): return vkCmdDecompressMemoryIndirectCountNV;
		case nameof(vkGetPartitionedAccelerationStructuresBuildSizesNV): return vkGetPartitionedAccelerationStructuresBuildSizesNV;
		case nameof(vkCmdBuildPartitionedAccelerationStructuresNV): return vkCmdBuildPartitionedAccelerationStructuresNV;
		case nameof(vkCreateCuModuleNVX): return vkCreateCuModuleNVX;
		case nameof(vkCreateCuFunctionNVX): return vkCreateCuFunctionNVX;
		case nameof(vkDestroyCuModuleNVX): return vkDestroyCuModuleNVX;
		case nameof(vkDestroyCuFunctionNVX): return vkDestroyCuFunctionNVX;
		case nameof(vkCmdCuLaunchKernelNVX): return vkCmdCuLaunchKernelNVX;
		case nameof(vkGetDescriptorSetLayoutSizeEXT): return vkGetDescriptorSetLayoutSizeEXT;
		case nameof(vkGetDescriptorSetLayoutBindingOffsetEXT): return vkGetDescriptorSetLayoutBindingOffsetEXT;
		case nameof(vkGetDescriptorEXT): return vkGetDescriptorEXT;
		case nameof(vkCmdBindDescriptorBuffersEXT): return vkCmdBindDescriptorBuffersEXT;
		case nameof(vkCmdSetDescriptorBufferOffsetsEXT): return vkCmdSetDescriptorBufferOffsetsEXT;
		case nameof(vkCmdBindDescriptorBufferEmbeddedSamplersEXT): return vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
		case nameof(vkGetBufferOpaqueCaptureDescriptorDataEXT): return vkGetBufferOpaqueCaptureDescriptorDataEXT;
		case nameof(vkGetImageOpaqueCaptureDescriptorDataEXT): return vkGetImageOpaqueCaptureDescriptorDataEXT;
		case nameof(vkGetImageViewOpaqueCaptureDescriptorDataEXT): return vkGetImageViewOpaqueCaptureDescriptorDataEXT;
		case nameof(vkGetSamplerOpaqueCaptureDescriptorDataEXT): return vkGetSamplerOpaqueCaptureDescriptorDataEXT;
		case nameof(vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT): return vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
		case nameof(vkSetDeviceMemoryPriorityEXT): return vkSetDeviceMemoryPriorityEXT;
		case nameof(vkAcquireDrmDisplayEXT): return vkAcquireDrmDisplayEXT;
		case nameof(vkGetDrmDisplayEXT): return vkGetDrmDisplayEXT;
		case nameof(vkWaitForPresent2KHR): return vkWaitForPresent2KHR;
		case nameof(vkWaitForPresentKHR): return vkWaitForPresentKHR;
		case nameof(vkCmdBeginRendering): return vkCmdBeginRendering;
		case nameof(vkCmdEndRendering): return vkCmdEndRendering;
		case nameof(vkCmdEndRendering2EXT): return vkCmdEndRendering2EXT;
		case nameof(vkGetDescriptorSetLayoutHostMappingInfoVALVE): return vkGetDescriptorSetLayoutHostMappingInfoVALVE;
		case nameof(vkGetDescriptorSetHostMappingVALVE): return vkGetDescriptorSetHostMappingVALVE;
		case nameof(vkCreateMicromapEXT): return vkCreateMicromapEXT;
		case nameof(vkCmdBuildMicromapsEXT): return vkCmdBuildMicromapsEXT;
		case nameof(vkBuildMicromapsEXT): return vkBuildMicromapsEXT;
		case nameof(vkDestroyMicromapEXT): return vkDestroyMicromapEXT;
		case nameof(vkCmdCopyMicromapEXT): return vkCmdCopyMicromapEXT;
		case nameof(vkCopyMicromapEXT): return vkCopyMicromapEXT;
		case nameof(vkCmdCopyMicromapToMemoryEXT): return vkCmdCopyMicromapToMemoryEXT;
		case nameof(vkCopyMicromapToMemoryEXT): return vkCopyMicromapToMemoryEXT;
		case nameof(vkCmdCopyMemoryToMicromapEXT): return vkCmdCopyMemoryToMicromapEXT;
		case nameof(vkCopyMemoryToMicromapEXT): return vkCopyMemoryToMicromapEXT;
		case nameof(vkCmdWriteMicromapsPropertiesEXT): return vkCmdWriteMicromapsPropertiesEXT;
		case nameof(vkWriteMicromapsPropertiesEXT): return vkWriteMicromapsPropertiesEXT;
		case nameof(vkGetDeviceMicromapCompatibilityEXT): return vkGetDeviceMicromapCompatibilityEXT;
		case nameof(vkGetMicromapBuildSizesEXT): return vkGetMicromapBuildSizesEXT;
		case nameof(vkGetShaderModuleIdentifierEXT): return vkGetShaderModuleIdentifierEXT;
		case nameof(vkGetShaderModuleCreateInfoIdentifierEXT): return vkGetShaderModuleCreateInfoIdentifierEXT;
		case nameof(vkGetImageSubresourceLayout2): return vkGetImageSubresourceLayout2;
		case nameof(vkGetPipelinePropertiesEXT): return vkGetPipelinePropertiesEXT;
		case nameof(vkCmdBindTileMemoryQCOM): return vkCmdBindTileMemoryQCOM;
		case nameof(vkGetFramebufferTilePropertiesQCOM): return vkGetFramebufferTilePropertiesQCOM;
		case nameof(vkGetDynamicRenderingTilePropertiesQCOM): return vkGetDynamicRenderingTilePropertiesQCOM;
		case nameof(vkGetPhysicalDeviceOpticalFlowImageFormatsNV): return vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
		case nameof(vkCreateOpticalFlowSessionNV): return vkCreateOpticalFlowSessionNV;
		case nameof(vkDestroyOpticalFlowSessionNV): return vkDestroyOpticalFlowSessionNV;
		case nameof(vkBindOpticalFlowSessionImageNV): return vkBindOpticalFlowSessionImageNV;
		case nameof(vkCmdOpticalFlowExecuteNV): return vkCmdOpticalFlowExecuteNV;
		case nameof(vkGetDeviceFaultInfoEXT): return vkGetDeviceFaultInfoEXT;
		case nameof(vkCmdSetDepthBias2EXT): return vkCmdSetDepthBias2EXT;
		case nameof(vkReleaseSwapchainImagesKHR): return vkReleaseSwapchainImagesKHR;
		case nameof(vkGetDeviceImageSubresourceLayout): return vkGetDeviceImageSubresourceLayout;
		case nameof(vkMapMemory2): return vkMapMemory2;
		case nameof(vkUnmapMemory2): return vkUnmapMemory2;
		case nameof(vkCreateShadersEXT): return vkCreateShadersEXT;
		case nameof(vkDestroyShaderEXT): return vkDestroyShaderEXT;
		case nameof(vkGetShaderBinaryDataEXT): return vkGetShaderBinaryDataEXT;
		case nameof(vkCmdBindShadersEXT): return vkCmdBindShadersEXT;
		case nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR): return vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
		case nameof(vkCmdBindDescriptorSets2): return vkCmdBindDescriptorSets2;
		case nameof(vkCmdPushConstants2): return vkCmdPushConstants2;
		case nameof(vkCmdPushDescriptorSet2): return vkCmdPushDescriptorSet2;
		case nameof(vkCmdPushDescriptorSetWithTemplate2): return vkCmdPushDescriptorSetWithTemplate2;
		case nameof(vkCmdSetDescriptorBufferOffsets2EXT): return vkCmdSetDescriptorBufferOffsets2EXT;
		case nameof(vkCmdBindDescriptorBufferEmbeddedSamplers2EXT): return vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
		case nameof(vkSetLatencySleepModeNV): return vkSetLatencySleepModeNV;
		case nameof(vkLatencySleepNV): return vkLatencySleepNV;
		case nameof(vkSetLatencyMarkerNV): return vkSetLatencyMarkerNV;
		case nameof(vkGetLatencyTimingsNV): return vkGetLatencyTimingsNV;
		case nameof(vkQueueNotifyOutOfBandNV): return vkQueueNotifyOutOfBandNV;
		case nameof(vkCmdSetRenderingAttachmentLocations): return vkCmdSetRenderingAttachmentLocations;
		case nameof(vkCmdSetRenderingInputAttachmentIndices): return vkCmdSetRenderingInputAttachmentIndices;
		case nameof(vkCmdSetDepthClampRangeEXT): return vkCmdSetDepthClampRangeEXT;
		case nameof(vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV): return vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
		case nameof(vkGetPhysicalDeviceCooperativeVectorPropertiesNV): return vkGetPhysicalDeviceCooperativeVectorPropertiesNV;
		case nameof(vkConvertCooperativeVectorMatrixNV): return vkConvertCooperativeVectorMatrixNV;
		case nameof(vkCmdConvertCooperativeVectorMatrixNV): return vkCmdConvertCooperativeVectorMatrixNV;
		case nameof(vkCmdDispatchTileQCOM): return vkCmdDispatchTileQCOM;
		case nameof(vkCmdBeginPerTileExecutionQCOM): return vkCmdBeginPerTileExecutionQCOM;
		case nameof(vkCmdEndPerTileExecutionQCOM): return vkCmdEndPerTileExecutionQCOM;
		case nameof(vkCreateExternalComputeQueueNV): return vkCreateExternalComputeQueueNV;
		case nameof(vkDestroyExternalComputeQueueNV): return vkDestroyExternalComputeQueueNV;
		case nameof(vkGetExternalComputeQueueDataNV): return vkGetExternalComputeQueueDataNV;
		case nameof(vkCreateTensorARM): return vkCreateTensorARM;
		case nameof(vkDestroyTensorARM): return vkDestroyTensorARM;
		case nameof(vkCreateTensorViewARM): return vkCreateTensorViewARM;
		case nameof(vkDestroyTensorViewARM): return vkDestroyTensorViewARM;
		case nameof(vkGetTensorMemoryRequirementsARM): return vkGetTensorMemoryRequirementsARM;
		case nameof(vkBindTensorMemoryARM): return vkBindTensorMemoryARM;
		case nameof(vkGetDeviceTensorMemoryRequirementsARM): return vkGetDeviceTensorMemoryRequirementsARM;
		case nameof(vkCmdCopyTensorARM): return vkCmdCopyTensorARM;
		case nameof(vkGetTensorOpaqueCaptureDescriptorDataARM): return vkGetTensorOpaqueCaptureDescriptorDataARM;
		case nameof(vkGetTensorViewOpaqueCaptureDescriptorDataARM): return vkGetTensorViewOpaqueCaptureDescriptorDataARM;
		case nameof(vkGetPhysicalDeviceExternalTensorPropertiesARM): return vkGetPhysicalDeviceExternalTensorPropertiesARM;
		case nameof(vkCreateDataGraphPipelinesARM): return vkCreateDataGraphPipelinesARM;
		case nameof(vkCreateDataGraphPipelineSessionARM): return vkCreateDataGraphPipelineSessionARM;
		case nameof(vkGetDataGraphPipelineSessionBindPointRequirementsARM): return vkGetDataGraphPipelineSessionBindPointRequirementsARM;
		case nameof(vkGetDataGraphPipelineSessionMemoryRequirementsARM): return vkGetDataGraphPipelineSessionMemoryRequirementsARM;
		case nameof(vkBindDataGraphPipelineSessionMemoryARM): return vkBindDataGraphPipelineSessionMemoryARM;
		case nameof(vkDestroyDataGraphPipelineSessionARM): return vkDestroyDataGraphPipelineSessionARM;
		case nameof(vkCmdDispatchDataGraphARM): return vkCmdDispatchDataGraphARM;
		case nameof(vkGetDataGraphPipelineAvailablePropertiesARM): return vkGetDataGraphPipelineAvailablePropertiesARM;
		case nameof(vkGetDataGraphPipelinePropertiesARM): return vkGetDataGraphPipelinePropertiesARM;
		case nameof(vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM): return vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM;
		case nameof(vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM): return vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM;
		default: Runtime.FatalError("Command not found");
		}
	}

	public int SuccessCodesCount
	{
		get
		{
			switch (this)
			{
			case vkCreateInstance: return 1;
			case vkEnumeratePhysicalDevices: return 2;
			case vkGetPhysicalDeviceImageFormatProperties: return 1;
			case vkCreateDevice: return 1;
			case vkEnumerateInstanceVersion: return 1;
			case vkEnumerateInstanceLayerProperties: return 2;
			case vkEnumerateInstanceExtensionProperties: return 2;
			case vkEnumerateDeviceLayerProperties: return 2;
			case vkEnumerateDeviceExtensionProperties: return 2;
			case vkQueueSubmit: return 1;
			case vkQueueWaitIdle: return 1;
			case vkDeviceWaitIdle: return 1;
			case vkAllocateMemory: return 1;
			case vkMapMemory: return 1;
			case vkFlushMappedMemoryRanges: return 1;
			case vkInvalidateMappedMemoryRanges: return 1;
			case vkBindBufferMemory: return 1;
			case vkBindImageMemory: return 1;
			case vkQueueBindSparse: return 1;
			case vkCreateFence: return 1;
			case vkResetFences: return 1;
			case vkGetFenceStatus: return 2;
			case vkWaitForFences: return 2;
			case vkCreateSemaphore: return 1;
			case vkCreateEvent: return 1;
			case vkGetEventStatus: return 2;
			case vkSetEvent: return 1;
			case vkResetEvent: return 1;
			case vkCreateQueryPool: return 1;
			case vkGetQueryPoolResults: return 2;
			case vkCreateBuffer: return 1;
			case vkCreateBufferView: return 1;
			case vkCreateImage: return 1;
			case vkCreateImageView: return 1;
			case vkCreateShaderModule: return 1;
			case vkCreatePipelineCache: return 1;
			case vkGetPipelineCacheData: return 2;
			case vkMergePipelineCaches: return 1;
			case vkCreatePipelineBinariesKHR: return 3;
			case vkGetPipelineKeyKHR: return 1;
			case vkGetPipelineBinaryDataKHR: return 1;
			case vkReleaseCapturedPipelineDataKHR: return 1;
			case vkCreateGraphicsPipelines: return 2;
			case vkCreateComputePipelines: return 2;
			case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: return 1;
			case vkCreatePipelineLayout: return 1;
			case vkCreateSampler: return 1;
			case vkCreateDescriptorSetLayout: return 1;
			case vkCreateDescriptorPool: return 1;
			case vkResetDescriptorPool: return 1;
			case vkAllocateDescriptorSets: return 1;
			case vkFreeDescriptorSets: return 1;
			case vkCreateFramebuffer: return 1;
			case vkCreateRenderPass: return 1;
			case vkCreateCommandPool: return 1;
			case vkResetCommandPool: return 1;
			case vkAllocateCommandBuffers: return 1;
			case vkBeginCommandBuffer: return 1;
			case vkEndCommandBuffer: return 1;
			case vkResetCommandBuffer: return 1;
			case vkGetPhysicalDeviceDisplayPropertiesKHR: return 2;
			case vkGetPhysicalDeviceDisplayPlanePropertiesKHR: return 2;
			case vkGetDisplayPlaneSupportedDisplaysKHR: return 2;
			case vkGetDisplayModePropertiesKHR: return 2;
			case vkCreateDisplayModeKHR: return 1;
			case vkGetDisplayPlaneCapabilitiesKHR: return 1;
			case vkCreateDisplayPlaneSurfaceKHR: return 1;
			case vkCreateSharedSwapchainsKHR: return 1;
			case vkGetPhysicalDeviceSurfaceSupportKHR: return 1;
			case vkGetPhysicalDeviceSurfaceCapabilitiesKHR: return 1;
			case vkGetPhysicalDeviceSurfaceFormatsKHR: return 2;
			case vkGetPhysicalDeviceSurfacePresentModesKHR: return 2;
			case vkCreateSwapchainKHR: return 1;
			case vkGetSwapchainImagesKHR: return 2;
			case vkAcquireNextImageKHR: return 4;
			case vkQueuePresentKHR: return 2;
			case vkCreateDebugReportCallbackEXT: return 1;
			case vkDebugMarkerSetObjectNameEXT: return 1;
			case vkDebugMarkerSetObjectTagEXT: return 1;
			case vkGetPhysicalDeviceExternalImageFormatPropertiesNV: return 1;
			case vkCreateIndirectCommandsLayoutNV: return 1;
			case vkCreateIndirectCommandsLayoutEXT: return 1;
			case vkCreateIndirectExecutionSetEXT: return 1;
			case vkGetPhysicalDeviceImageFormatProperties2: return 1;
			case vkGetMemoryFdKHR: return 1;
			case vkGetMemoryFdPropertiesKHR: return 1;
			case vkGetMemoryRemoteAddressNV: return 1;
			case vkGetSemaphoreFdKHR: return 1;
			case vkImportSemaphoreFdKHR: return 1;
			case vkGetFenceFdKHR: return 1;
			case vkImportFenceFdKHR: return 1;
			case vkReleaseDisplayEXT: return 1;
			case vkDisplayPowerControlEXT: return 1;
			case vkRegisterDeviceEventEXT: return 1;
			case vkRegisterDisplayEventEXT: return 1;
			case vkGetSwapchainCounterEXT: return 1;
			case vkGetPhysicalDeviceSurfaceCapabilities2EXT: return 1;
			case vkEnumeratePhysicalDeviceGroups: return 2;
			case vkBindBufferMemory2: return 1;
			case vkBindImageMemory2: return 1;
			case vkGetDeviceGroupPresentCapabilitiesKHR: return 1;
			case vkGetDeviceGroupSurfacePresentModesKHR: return 1;
			case vkAcquireNextImage2KHR: return 4;
			case vkGetPhysicalDevicePresentRectanglesKHR: return 2;
			case vkCreateDescriptorUpdateTemplate: return 1;
			case vkGetSwapchainStatusKHR: return 2;
			case vkGetRefreshCycleDurationGOOGLE: return 1;
			case vkGetPastPresentationTimingGOOGLE: return 2;
			case vkGetPhysicalDeviceSurfaceCapabilities2KHR: return 1;
			case vkGetPhysicalDeviceSurfaceFormats2KHR: return 2;
			case vkGetPhysicalDeviceDisplayProperties2KHR: return 2;
			case vkGetPhysicalDeviceDisplayPlaneProperties2KHR: return 2;
			case vkGetDisplayModeProperties2KHR: return 2;
			case vkGetDisplayPlaneCapabilities2KHR: return 1;
			case vkCreateSamplerYcbcrConversion: return 1;
			case vkCreateValidationCacheEXT: return 1;
			case vkGetValidationCacheDataEXT: return 2;
			case vkMergeValidationCachesEXT: return 1;
			case vkGetShaderInfoAMD: return 2;
			case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR: return 2;
			case vkGetCalibratedTimestampsKHR: return 1;
			case vkSetDebugUtilsObjectNameEXT: return 1;
			case vkSetDebugUtilsObjectTagEXT: return 1;
			case vkCreateDebugUtilsMessengerEXT: return 1;
			case vkGetMemoryHostPointerPropertiesEXT: return 1;
			case vkCreateRenderPass2: return 1;
			case vkGetSemaphoreCounterValue: return 1;
			case vkWaitSemaphores: return 2;
			case vkSignalSemaphore: return 1;
			case vkCompileDeferredNV: return 1;
			case vkCreateAccelerationStructureNV: return 1;
			case vkBindAccelerationStructureMemoryNV: return 1;
			case vkCopyAccelerationStructureKHR: return 3;
			case vkCopyAccelerationStructureToMemoryKHR: return 3;
			case vkCopyMemoryToAccelerationStructureKHR: return 3;
			case vkWriteAccelerationStructuresPropertiesKHR: return 1;
			case vkGetRayTracingShaderGroupHandlesKHR: return 1;
			case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: return 1;
			case vkGetAccelerationStructureHandleNV: return 1;
			case vkCreateRayTracingPipelinesNV: return 2;
			case vkCreateRayTracingPipelinesKHR: return 4;
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: return 2;
			case vkGetImageViewAddressNVX: return 1;
			case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: return 2;
			case vkAcquireProfilingLockKHR: return 1;
			case vkGetImageDrmFormatModifierPropertiesEXT: return 1;
			case vkCreateHeadlessSurfaceEXT: return 1;
			case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: return 2;
			case vkInitializePerformanceApiINTEL: return 1;
			case vkCmdSetPerformanceMarkerINTEL: return 1;
			case vkCmdSetPerformanceStreamMarkerINTEL: return 1;
			case vkCmdSetPerformanceOverrideINTEL: return 1;
			case vkAcquirePerformanceConfigurationINTEL: return 1;
			case vkReleasePerformanceConfigurationINTEL: return 1;
			case vkQueueSetPerformanceConfigurationINTEL: return 1;
			case vkGetPerformanceParameterINTEL: return 1;
			case vkGetPipelineExecutablePropertiesKHR: return 2;
			case vkGetPipelineExecutableStatisticsKHR: return 2;
			case vkGetPipelineExecutableInternalRepresentationsKHR: return 2;
			case vkGetPhysicalDeviceToolProperties: return 2;
			case vkCreateAccelerationStructureKHR: return 1;
			case vkBuildAccelerationStructuresKHR: return 3;
			case vkCreateDeferredOperationKHR: return 1;
			case vkGetDeferredOperationResultKHR: return 2;
			case vkDeferredOperationJoinKHR: return 3;
			case vkCreatePrivateDataSlot: return 1;
			case vkSetPrivateData: return 1;
			case vkGetPhysicalDeviceFragmentShadingRatesKHR: return 2;
			case vkQueueSubmit2: return 1;
			case vkCopyMemoryToImage: return 1;
			case vkCopyImageToMemory: return 1;
			case vkCopyImageToImage: return 1;
			case vkTransitionImageLayout: return 1;
			case vkGetPhysicalDeviceVideoCapabilitiesKHR: return 1;
			case vkGetPhysicalDeviceVideoFormatPropertiesKHR: return 2;
			case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR: return 1;
			case vkCreateVideoSessionKHR: return 1;
			case vkCreateVideoSessionParametersKHR: return 1;
			case vkUpdateVideoSessionParametersKHR: return 1;
			case vkGetEncodedVideoSessionParametersKHR: return 2;
			case vkGetVideoSessionMemoryRequirementsKHR: return 2;
			case vkBindVideoSessionMemoryKHR: return 1;
			case vkCreateCuModuleNVX: return 1;
			case vkCreateCuFunctionNVX: return 1;
			case vkGetBufferOpaqueCaptureDescriptorDataEXT: return 1;
			case vkGetImageOpaqueCaptureDescriptorDataEXT: return 1;
			case vkGetImageViewOpaqueCaptureDescriptorDataEXT: return 1;
			case vkGetSamplerOpaqueCaptureDescriptorDataEXT: return 1;
			case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT: return 1;
			case vkAcquireDrmDisplayEXT: return 1;
			case vkGetDrmDisplayEXT: return 1;
			case vkWaitForPresent2KHR: return 3;
			case vkWaitForPresentKHR: return 3;
			case vkCreateMicromapEXT: return 1;
			case vkBuildMicromapsEXT: return 3;
			case vkCopyMicromapEXT: return 3;
			case vkCopyMicromapToMemoryEXT: return 3;
			case vkCopyMemoryToMicromapEXT: return 3;
			case vkWriteMicromapsPropertiesEXT: return 1;
			case vkGetPipelinePropertiesEXT: return 1;
			case vkGetFramebufferTilePropertiesQCOM: return 2;
			case vkGetDynamicRenderingTilePropertiesQCOM: return 1;
			case vkGetPhysicalDeviceOpticalFlowImageFormatsNV: return 2;
			case vkCreateOpticalFlowSessionNV: return 1;
			case vkBindOpticalFlowSessionImageNV: return 1;
			case vkGetDeviceFaultInfoEXT: return 2;
			case vkReleaseSwapchainImagesKHR: return 1;
			case vkMapMemory2: return 1;
			case vkUnmapMemory2: return 1;
			case vkCreateShadersEXT: return 2;
			case vkGetShaderBinaryDataEXT: return 2;
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR: return 2;
			case vkSetLatencySleepModeNV: return 1;
			case vkLatencySleepNV: return 1;
			case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV: return 2;
			case vkGetPhysicalDeviceCooperativeVectorPropertiesNV: return 2;
			case vkConvertCooperativeVectorMatrixNV: return 2;
			case vkCreateExternalComputeQueueNV: return 1;
			case vkCreateTensorARM: return 1;
			case vkCreateTensorViewARM: return 1;
			case vkBindTensorMemoryARM: return 1;
			case vkGetTensorOpaqueCaptureDescriptorDataARM: return 1;
			case vkGetTensorViewOpaqueCaptureDescriptorDataARM: return 1;
			case vkCreateDataGraphPipelinesARM: return 2;
			case vkCreateDataGraphPipelineSessionARM: return 1;
			case vkGetDataGraphPipelineSessionBindPointRequirementsARM: return 2;
			case vkBindDataGraphPipelineSessionMemoryARM: return 1;
			case vkGetDataGraphPipelineAvailablePropertiesARM: return 2;
			case vkGetDataGraphPipelinePropertiesARM: return 2;
			case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM: return 2;
			default: return 0;
			}
		}
	}

	public VkResult GetSuccessCodes(int idx)
	{
		switch (this)
		{
		case vkCreateInstance:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDevices:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceImageFormatProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDevice:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceVersion:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceLayerProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceExtensionProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateDeviceLayerProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateDeviceExtensionProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSubmit:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueWaitIdle:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDeviceWaitIdle:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateMemory:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMapMemory:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkFlushMappedMemoryRanges:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkInvalidateMappedMemoryRanges:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindBufferMemory:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindImageMemory:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueBindSparse:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateFence:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetFences:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetFenceStatus:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkNotReady;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForFences:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSemaphore:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateEvent:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetEventStatus:
			switch (idx)
			{
			case 0: return .VkEventSet;
			case 1: return .VkEventReset;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetEvent:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetEvent:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateQueryPool:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetQueryPoolResults:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkNotReady;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateBuffer:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateBufferView:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateImage:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateImageView:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateShaderModule:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineCache:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineCacheData:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMergePipelineCaches:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineBinariesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			case 2: return .VkPipelineBinaryMissingKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineKeyKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineBinaryDataKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleaseCapturedPipelineDataKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateGraphicsPipelines:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkPipelineCompileRequiredEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateComputePipelines:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkPipelineCompileRequiredEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineLayout:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSampler:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorSetLayout:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorPool:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetDescriptorPool:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateDescriptorSets:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkFreeDescriptorSets:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateFramebuffer:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRenderPass:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCommandPool:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetCommandPool:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateCommandBuffers:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBeginCommandBuffer:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEndCommandBuffer:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetCommandBuffer:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPlanePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneSupportedDisplaysKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayModePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDisplayModeKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDisplayPlaneSurfaceKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSharedSwapchainsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceSupportKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceFormatsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfacePresentModesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSwapchainKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainImagesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireNextImageKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			case 2: return .VkNotReady;
			case 3: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueuePresentKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDebugReportCallbackEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDebugMarkerSetObjectNameEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDebugMarkerSetObjectTagEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceExternalImageFormatPropertiesNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectCommandsLayoutNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectCommandsLayoutEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectExecutionSetEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceImageFormatProperties2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryFdKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryFdPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryRemoteAddressNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSemaphoreFdKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkImportSemaphoreFdKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetFenceFdKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkImportFenceFdKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleaseDisplayEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDisplayPowerControlEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkRegisterDeviceEventEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkRegisterDisplayEventEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainCounterEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilities2EXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDeviceGroups:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindBufferMemory2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindImageMemory2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceGroupPresentCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceGroupSurfacePresentModesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireNextImage2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			case 2: return .VkNotReady;
			case 3: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDevicePresentRectanglesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorUpdateTemplate:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainStatusKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRefreshCycleDurationGOOGLE:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPastPresentationTimingGOOGLE:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilities2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceFormats2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayProperties2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPlaneProperties2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayModeProperties2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneCapabilities2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSamplerYcbcrConversion:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateValidationCacheEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetValidationCacheDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMergeValidationCachesEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetShaderInfoAMD:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetCalibratedTimestampsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetDebugUtilsObjectNameEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetDebugUtilsObjectTagEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDebugUtilsMessengerEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryHostPointerPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRenderPass2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSemaphoreCounterValue:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitSemaphores:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSignalSemaphore:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCompileDeferredNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateAccelerationStructureNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindAccelerationStructureMemoryNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyAccelerationStructureToMemoryKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWriteAccelerationStructuresPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRayTracingShaderGroupHandlesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetAccelerationStructureHandleNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRayTracingPipelinesNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkPipelineCompileRequiredEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRayTracingPipelinesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			case 3: return .VkPipelineCompileRequiredEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageViewAddressNVX:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireProfilingLockKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageDrmFormatModifierPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateHeadlessSurfaceEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkInitializePerformanceApiINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceMarkerINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceStreamMarkerINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceOverrideINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquirePerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleasePerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSetPerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPerformanceParameterINTEL:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutablePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutableStatisticsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutableInternalRepresentationsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceToolProperties:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBuildAccelerationStructuresKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDeferredOperationKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeferredOperationResultKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkNotReady;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDeferredOperationJoinKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkThreadDoneKHR;
			case 2: return .VkThreadIdleKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePrivateDataSlot:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetPrivateData:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceFragmentShadingRatesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSubmit2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToImage:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyImageToMemory:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyImageToImage:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkTransitionImageLayout:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoFormatPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateVideoSessionKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkUpdateVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetEncodedVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetVideoSessionMemoryRequirementsKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindVideoSessionMemoryKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCuModuleNVX:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCuFunctionNVX:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetBufferOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageViewOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSamplerOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireDrmDisplayEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDrmDisplayEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForPresent2KHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			case 2: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForPresentKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkTimeout;
			case 2: return .VkSuboptimalKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateMicromapEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBuildMicromapsEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMicromapEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMicromapToMemoryEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToMicromapEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkOperationDeferredKHR;
			case 2: return .VkOperationNotDeferredKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWriteMicromapsPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelinePropertiesEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetFramebufferTilePropertiesQCOM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDynamicRenderingTilePropertiesQCOM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceOpticalFlowImageFormatsNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateOpticalFlowSessionNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindOpticalFlowSessionImageNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceFaultInfoEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleaseSwapchainImagesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMapMemory2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkUnmapMemory2:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateShadersEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncompatibleShaderBinaryEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetShaderBinaryDataEXT:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetLatencySleepModeNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkLatencySleepNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeVectorPropertiesNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkConvertCooperativeVectorMatrixNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateExternalComputeQueueNV:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateTensorARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateTensorViewARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindTensorMemoryARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetTensorOpaqueCaptureDescriptorDataARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetTensorViewOpaqueCaptureDescriptorDataARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDataGraphPipelinesARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkPipelineCompileRequiredEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDataGraphPipelineSessionARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelineSessionBindPointRequirementsARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindDataGraphPipelineSessionMemoryARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelineAvailablePropertiesARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelinePropertiesARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM:
			switch (idx)
			{
			case 0: return .VkSuccess;
			case 1: return .VkIncomplete;
			default: Runtime.FatalError("Index out of range");
			}
		default: Runtime.FatalError("Index out of range");
		}
	}

	public int ErrorCodesCount
	{
		get
		{
			switch (this)
			{
			case vkCreateInstance: return 6;
			case vkEnumeratePhysicalDevices: return 3;
			case vkGetPhysicalDeviceImageFormatProperties: return 3;
			case vkCreateDevice: return 7;
			case vkEnumerateInstanceVersion: return 1;
			case vkEnumerateInstanceLayerProperties: return 2;
			case vkEnumerateInstanceExtensionProperties: return 3;
			case vkEnumerateDeviceLayerProperties: return 2;
			case vkEnumerateDeviceExtensionProperties: return 3;
			case vkQueueSubmit: return 3;
			case vkQueueWaitIdle: return 3;
			case vkDeviceWaitIdle: return 3;
			case vkAllocateMemory: return 4;
			case vkMapMemory: return 3;
			case vkFlushMappedMemoryRanges: return 2;
			case vkInvalidateMappedMemoryRanges: return 2;
			case vkBindBufferMemory: return 3;
			case vkBindImageMemory: return 2;
			case vkQueueBindSparse: return 3;
			case vkCreateFence: return 2;
			case vkResetFences: return 1;
			case vkGetFenceStatus: return 3;
			case vkWaitForFences: return 3;
			case vkCreateSemaphore: return 2;
			case vkCreateEvent: return 2;
			case vkGetEventStatus: return 3;
			case vkSetEvent: return 2;
			case vkResetEvent: return 1;
			case vkCreateQueryPool: return 2;
			case vkGetQueryPoolResults: return 3;
			case vkCreateBuffer: return 3;
			case vkCreateBufferView: return 2;
			case vkCreateImage: return 4;
			case vkCreateImageView: return 3;
			case vkCreateShaderModule: return 3;
			case vkCreatePipelineCache: return 2;
			case vkGetPipelineCacheData: return 2;
			case vkMergePipelineCaches: return 2;
			case vkCreatePipelineBinariesKHR: return 3;
			case vkGetPipelineKeyKHR: return 2;
			case vkGetPipelineBinaryDataKHR: return 3;
			case vkCreateGraphicsPipelines: return 3;
			case vkCreateComputePipelines: return 3;
			case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: return 3;
			case vkCreatePipelineLayout: return 2;
			case vkCreateSampler: return 3;
			case vkCreateDescriptorSetLayout: return 2;
			case vkCreateDescriptorPool: return 3;
			case vkAllocateDescriptorSets: return 4;
			case vkCreateFramebuffer: return 2;
			case vkCreateRenderPass: return 2;
			case vkCreateCommandPool: return 2;
			case vkResetCommandPool: return 1;
			case vkAllocateCommandBuffers: return 2;
			case vkBeginCommandBuffer: return 2;
			case vkEndCommandBuffer: return 3;
			case vkResetCommandBuffer: return 1;
			case vkGetPhysicalDeviceDisplayPropertiesKHR: return 2;
			case vkGetPhysicalDeviceDisplayPlanePropertiesKHR: return 2;
			case vkGetDisplayPlaneSupportedDisplaysKHR: return 2;
			case vkGetDisplayModePropertiesKHR: return 2;
			case vkCreateDisplayModeKHR: return 3;
			case vkGetDisplayPlaneCapabilitiesKHR: return 2;
			case vkCreateDisplayPlaneSurfaceKHR: return 2;
			case vkCreateSharedSwapchainsKHR: return 5;
			case vkGetPhysicalDeviceSurfaceSupportKHR: return 3;
			case vkGetPhysicalDeviceSurfaceCapabilitiesKHR: return 3;
			case vkGetPhysicalDeviceSurfaceFormatsKHR: return 3;
			case vkGetPhysicalDeviceSurfacePresentModesKHR: return 3;
			case vkCreateSwapchainKHR: return 7;
			case vkGetSwapchainImagesKHR: return 2;
			case vkAcquireNextImageKHR: return 6;
			case vkQueuePresentKHR: return 6;
			case vkCreateDebugReportCallbackEXT: return 1;
			case vkDebugMarkerSetObjectNameEXT: return 2;
			case vkDebugMarkerSetObjectTagEXT: return 2;
			case vkGetPhysicalDeviceExternalImageFormatPropertiesNV: return 3;
			case vkCreateIndirectCommandsLayoutNV: return 2;
			case vkCreateIndirectCommandsLayoutEXT: return 2;
			case vkCreateIndirectExecutionSetEXT: return 2;
			case vkGetPhysicalDeviceImageFormatProperties2: return 8;
			case vkGetMemoryFdKHR: return 2;
			case vkGetMemoryFdPropertiesKHR: return 2;
			case vkGetMemoryRemoteAddressNV: return 1;
			case vkGetSemaphoreFdKHR: return 2;
			case vkImportSemaphoreFdKHR: return 2;
			case vkGetFenceFdKHR: return 2;
			case vkImportFenceFdKHR: return 2;
			case vkDisplayPowerControlEXT: return 1;
			case vkRegisterDeviceEventEXT: return 1;
			case vkRegisterDisplayEventEXT: return 1;
			case vkGetSwapchainCounterEXT: return 3;
			case vkGetPhysicalDeviceSurfaceCapabilities2EXT: return 3;
			case vkEnumeratePhysicalDeviceGroups: return 3;
			case vkBindBufferMemory2: return 3;
			case vkBindImageMemory2: return 2;
			case vkGetDeviceGroupPresentCapabilitiesKHR: return 2;
			case vkGetDeviceGroupSurfacePresentModesKHR: return 3;
			case vkAcquireNextImage2KHR: return 6;
			case vkGetPhysicalDevicePresentRectanglesKHR: return 2;
			case vkCreateDescriptorUpdateTemplate: return 2;
			case vkGetSwapchainStatusKHR: return 6;
			case vkGetRefreshCycleDurationGOOGLE: return 3;
			case vkGetPastPresentationTimingGOOGLE: return 4;
			case vkGetPhysicalDeviceSurfaceCapabilities2KHR: return 3;
			case vkGetPhysicalDeviceSurfaceFormats2KHR: return 3;
			case vkGetPhysicalDeviceDisplayProperties2KHR: return 2;
			case vkGetPhysicalDeviceDisplayPlaneProperties2KHR: return 2;
			case vkGetDisplayModeProperties2KHR: return 2;
			case vkGetDisplayPlaneCapabilities2KHR: return 2;
			case vkCreateSamplerYcbcrConversion: return 2;
			case vkCreateValidationCacheEXT: return 1;
			case vkGetValidationCacheDataEXT: return 2;
			case vkMergeValidationCachesEXT: return 2;
			case vkGetShaderInfoAMD: return 2;
			case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR: return 2;
			case vkGetCalibratedTimestampsKHR: return 2;
			case vkSetDebugUtilsObjectNameEXT: return 2;
			case vkSetDebugUtilsObjectTagEXT: return 2;
			case vkCreateDebugUtilsMessengerEXT: return 1;
			case vkGetMemoryHostPointerPropertiesEXT: return 2;
			case vkCreateRenderPass2: return 2;
			case vkGetSemaphoreCounterValue: return 3;
			case vkWaitSemaphores: return 3;
			case vkSignalSemaphore: return 2;
			case vkCompileDeferredNV: return 2;
			case vkCreateAccelerationStructureNV: return 1;
			case vkBindAccelerationStructureMemoryNV: return 2;
			case vkCopyAccelerationStructureKHR: return 2;
			case vkCopyAccelerationStructureToMemoryKHR: return 2;
			case vkCopyMemoryToAccelerationStructureKHR: return 2;
			case vkWriteAccelerationStructuresPropertiesKHR: return 2;
			case vkGetRayTracingShaderGroupHandlesKHR: return 2;
			case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: return 2;
			case vkGetAccelerationStructureHandleNV: return 2;
			case vkCreateRayTracingPipelinesNV: return 3;
			case vkCreateRayTracingPipelinesKHR: return 3;
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: return 2;
			case vkGetImageViewAddressNVX: return 1;
			case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: return 3;
			case vkAcquireProfilingLockKHR: return 2;
			case vkGetImageDrmFormatModifierPropertiesEXT: return 1;
			case vkCreateHeadlessSurfaceEXT: return 2;
			case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: return 2;
			case vkInitializePerformanceApiINTEL: return 2;
			case vkCmdSetPerformanceMarkerINTEL: return 2;
			case vkCmdSetPerformanceStreamMarkerINTEL: return 2;
			case vkCmdSetPerformanceOverrideINTEL: return 2;
			case vkAcquirePerformanceConfigurationINTEL: return 2;
			case vkReleasePerformanceConfigurationINTEL: return 2;
			case vkQueueSetPerformanceConfigurationINTEL: return 2;
			case vkGetPerformanceParameterINTEL: return 2;
			case vkGetPipelineExecutablePropertiesKHR: return 2;
			case vkGetPipelineExecutableStatisticsKHR: return 2;
			case vkGetPipelineExecutableInternalRepresentationsKHR: return 2;
			case vkGetPhysicalDeviceToolProperties: return 1;
			case vkCreateAccelerationStructureKHR: return 2;
			case vkBuildAccelerationStructuresKHR: return 2;
			case vkCreateDeferredOperationKHR: return 1;
			case vkDeferredOperationJoinKHR: return 2;
			case vkCreatePrivateDataSlot: return 1;
			case vkSetPrivateData: return 1;
			case vkGetPhysicalDeviceFragmentShadingRatesKHR: return 1;
			case vkQueueSubmit2: return 3;
			case vkCopyMemoryToImage: return 4;
			case vkCopyImageToMemory: return 4;
			case vkCopyImageToImage: return 4;
			case vkTransitionImageLayout: return 4;
			case vkGetPhysicalDeviceVideoCapabilitiesKHR: return 6;
			case vkGetPhysicalDeviceVideoFormatPropertiesKHR: return 7;
			case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR: return 6;
			case vkCreateVideoSessionKHR: return 5;
			case vkCreateVideoSessionParametersKHR: return 4;
			case vkUpdateVideoSessionParametersKHR: return 3;
			case vkGetEncodedVideoSessionParametersKHR: return 2;
			case vkBindVideoSessionMemoryKHR: return 2;
			case vkCreateCuModuleNVX: return 2;
			case vkCreateCuFunctionNVX: return 2;
			case vkGetBufferOpaqueCaptureDescriptorDataEXT: return 2;
			case vkGetImageOpaqueCaptureDescriptorDataEXT: return 2;
			case vkGetImageViewOpaqueCaptureDescriptorDataEXT: return 2;
			case vkGetSamplerOpaqueCaptureDescriptorDataEXT: return 2;
			case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT: return 2;
			case vkAcquireDrmDisplayEXT: return 1;
			case vkGetDrmDisplayEXT: return 2;
			case vkWaitForPresent2KHR: return 6;
			case vkWaitForPresentKHR: return 6;
			case vkCreateMicromapEXT: return 2;
			case vkBuildMicromapsEXT: return 2;
			case vkCopyMicromapEXT: return 2;
			case vkCopyMicromapToMemoryEXT: return 2;
			case vkCopyMemoryToMicromapEXT: return 2;
			case vkWriteMicromapsPropertiesEXT: return 2;
			case vkGetPipelinePropertiesEXT: return 1;
			case vkGetPhysicalDeviceOpticalFlowImageFormatsNV: return 3;
			case vkCreateOpticalFlowSessionNV: return 2;
			case vkBindOpticalFlowSessionImageNV: return 2;
			case vkGetDeviceFaultInfoEXT: return 1;
			case vkReleaseSwapchainImagesKHR: return 1;
			case vkMapMemory2: return 3;
			case vkUnmapMemory2: return 1;
			case vkCreateShadersEXT: return 3;
			case vkGetShaderBinaryDataEXT: return 2;
			case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR: return 2;
			case vkSetLatencySleepModeNV: return 1;
			case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV: return 2;
			case vkGetPhysicalDeviceCooperativeVectorPropertiesNV: return 2;
			case vkConvertCooperativeVectorMatrixNV: return 1;
			case vkCreateExternalComputeQueueNV: return 2;
			case vkCreateTensorARM: return 2;
			case vkCreateTensorViewARM: return 2;
			case vkBindTensorMemoryARM: return 2;
			case vkGetTensorOpaqueCaptureDescriptorDataARM: return 2;
			case vkGetTensorViewOpaqueCaptureDescriptorDataARM: return 2;
			case vkCreateDataGraphPipelinesARM: return 2;
			case vkCreateDataGraphPipelineSessionARM: return 2;
			case vkGetDataGraphPipelineSessionBindPointRequirementsARM: return 2;
			case vkBindDataGraphPipelineSessionMemoryARM: return 2;
			case vkGetDataGraphPipelineAvailablePropertiesARM: return 2;
			case vkGetDataGraphPipelinePropertiesARM: return 2;
			case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM: return 2;
			default: return 0;
			}
		}
	}

	public VkResult GetErrorCodes(int idx)
	{
		switch (this)
		{
		case vkCreateInstance:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			case 3: return .VkErrorLayerNotPresent;
			case 4: return .VkErrorExtensionNotPresent;
			case 5: return .VkErrorIncompatibleDriver;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDevices:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceImageFormatProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorFormatNotSupported;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDevice:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			case 3: return .VkErrorExtensionNotPresent;
			case 4: return .VkErrorFeatureNotPresent;
			case 5: return .VkErrorTooManyObjects;
			case 6: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceVersion:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceLayerProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateInstanceExtensionProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorLayerNotPresent;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateDeviceLayerProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumerateDeviceExtensionProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorLayerNotPresent;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSubmit:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueWaitIdle:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDeviceWaitIdle:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateMemory:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidExternalHandle;
			case 3: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMapMemory:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkFlushMappedMemoryRanges:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkInvalidateMappedMemoryRanges:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindBufferMemory:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindImageMemory:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueBindSparse:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateFence:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetFences:
			switch (idx)
			{
			case 0: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetFenceStatus:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForFences:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSemaphore:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateEvent:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetEventStatus:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetEvent:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetEvent:
			switch (idx)
			{
			case 0: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateQueryPool:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetQueryPoolResults:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateBuffer:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateBufferView:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateImage:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorCompressionExhaustedEXT;
			case 3: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateImageView:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateShaderModule:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidShaderNV;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineCache:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineCacheData:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMergePipelineCaches:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineBinariesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineKeyKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineBinaryDataKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorNotEnoughSpaceKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateGraphicsPipelines:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidShaderNV;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateComputePipelines:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidShaderNV;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePipelineLayout:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSampler:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorSetLayout:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorPool:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorFragmentationEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateDescriptorSets:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorFragmentedPool;
			case 3: return .VkErrorOutOfPoolMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateFramebuffer:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRenderPass:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCommandPool:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetCommandPool:
			switch (idx)
			{
			case 0: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAllocateCommandBuffers:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBeginCommandBuffer:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEndCommandBuffer:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidVideoStdParametersKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkResetCommandBuffer:
			switch (idx)
			{
			case 0: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPlanePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneSupportedDisplaysKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayModePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDisplayModeKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDisplayPlaneSurfaceKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSharedSwapchainsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorIncompatibleDisplayKHR;
			case 3: return .VkErrorDeviceLost;
			case 4: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceSupportKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceFormatsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfacePresentModesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSwapchainKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorSurfaceLostKHR;
			case 4: return .VkErrorNativeWindowInUseKHR;
			case 5: return .VkErrorInitializationFailed;
			case 6: return .VkErrorCompressionExhaustedEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainImagesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireNextImageKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueuePresentKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDebugReportCallbackEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDebugMarkerSetObjectNameEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDebugMarkerSetObjectTagEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceExternalImageFormatPropertiesNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorFormatNotSupported;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectCommandsLayoutNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectCommandsLayoutEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateIndirectExecutionSetEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceImageFormatProperties2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorFormatNotSupported;
			case 3: return .VkErrorImageUsageNotSupportedKHR;
			case 4: return .VkErrorVideoProfileOperationNotSupportedKHR;
			case 5: return .VkErrorVideoProfileFormatNotSupportedKHR;
			case 6: return .VkErrorVideoPictureLayoutNotSupportedKHR;
			case 7: return .VkErrorVideoProfileCodecNotSupportedKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryFdKHR:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryFdPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidExternalHandle;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryRemoteAddressNV:
			switch (idx)
			{
			case 0: return .VkErrorInvalidExternalHandle;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSemaphoreFdKHR:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkImportSemaphoreFdKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidExternalHandle;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetFenceFdKHR:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkImportFenceFdKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidExternalHandle;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDisplayPowerControlEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkRegisterDeviceEventEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkRegisterDisplayEventEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainCounterEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorDeviceLost;
			case 2: return .VkErrorOutOfDateKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilities2EXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDeviceGroups:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindBufferMemory2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindImageMemory2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceGroupPresentCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceGroupSurfacePresentModesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireNextImage2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDevicePresentRectanglesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDescriptorUpdateTemplate:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSwapchainStatusKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRefreshCycleDurationGOOGLE:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorDeviceLost;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPastPresentationTimingGOOGLE:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorDeviceLost;
			case 2: return .VkErrorOutOfDateKHR;
			case 3: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceCapabilities2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSurfaceFormats2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayProperties2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceDisplayPlaneProperties2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayModeProperties2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDisplayPlaneCapabilities2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateSamplerYcbcrConversion:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateValidationCacheEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetValidationCacheDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMergeValidationCachesEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetShaderInfoAMD:
			switch (idx)
			{
			case 0: return .VkErrorFeatureNotPresent;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCalibrateableTimeDomainsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetCalibratedTimestampsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetDebugUtilsObjectNameEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetDebugUtilsObjectTagEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDebugUtilsMessengerEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetMemoryHostPointerPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidExternalHandle;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRenderPass2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSemaphoreCounterValue:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitSemaphores:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSignalSemaphore:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCompileDeferredNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateAccelerationStructureNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindAccelerationStructureMemoryNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyAccelerationStructureToMemoryKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWriteAccelerationStructuresPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRayTracingShaderGroupHandlesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetRayTracingCaptureReplayShaderGroupHandlesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetAccelerationStructureHandleNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRayTracingPipelinesNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidShaderNV;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateRayTracingPipelinesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidOpaqueCaptureAddress;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixPropertiesNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageViewAddressNVX:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireProfilingLockKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkTimeout;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageDrmFormatModifierPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateHeadlessSurfaceEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkInitializePerformanceApiINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceMarkerINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceStreamMarkerINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCmdSetPerformanceOverrideINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquirePerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleasePerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSetPerformanceConfigurationINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPerformanceParameterINTEL:
			switch (idx)
			{
			case 0: return .VkErrorTooManyObjects;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutablePropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutableStatisticsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelineExecutableInternalRepresentationsKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceToolProperties:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateAccelerationStructureKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBuildAccelerationStructuresKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDeferredOperationKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkDeferredOperationJoinKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreatePrivateDataSlot:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetPrivateData:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceFragmentShadingRatesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkQueueSubmit2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToImage:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			case 1: return .VkErrorOutOfHostMemory;
			case 2: return .VkErrorOutOfDeviceMemory;
			case 3: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyImageToMemory:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			case 1: return .VkErrorOutOfHostMemory;
			case 2: return .VkErrorOutOfDeviceMemory;
			case 3: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyImageToImage:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			case 1: return .VkErrorOutOfHostMemory;
			case 2: return .VkErrorOutOfDeviceMemory;
			case 3: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkTransitionImageLayout:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			case 1: return .VkErrorOutOfHostMemory;
			case 2: return .VkErrorOutOfDeviceMemory;
			case 3: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoCapabilitiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorVideoProfileOperationNotSupportedKHR;
			case 3: return .VkErrorVideoProfileFormatNotSupportedKHR;
			case 4: return .VkErrorVideoPictureLayoutNotSupportedKHR;
			case 5: return .VkErrorVideoProfileCodecNotSupportedKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoFormatPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorImageUsageNotSupportedKHR;
			case 3: return .VkErrorVideoProfileOperationNotSupportedKHR;
			case 4: return .VkErrorVideoProfileFormatNotSupportedKHR;
			case 5: return .VkErrorVideoPictureLayoutNotSupportedKHR;
			case 6: return .VkErrorVideoProfileCodecNotSupportedKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorVideoProfileOperationNotSupportedKHR;
			case 3: return .VkErrorVideoProfileFormatNotSupportedKHR;
			case 4: return .VkErrorVideoPictureLayoutNotSupportedKHR;
			case 5: return .VkErrorVideoProfileCodecNotSupportedKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateVideoSessionKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			case 3: return .VkErrorVideoStdVersionNotSupportedKHR;
			case 4: return .VkErrorInvalidVideoStdParametersKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			case 3: return .VkErrorInvalidVideoStdParametersKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkUpdateVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInvalidVideoStdParametersKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetEncodedVideoSessionParametersKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindVideoSessionMemoryKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCuModuleNVX:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateCuFunctionNVX:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetBufferOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetImageViewOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetSamplerOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkAcquireDrmDisplayEXT:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDrmDisplayEXT:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			case 1: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForPresent2KHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWaitForPresentKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorDeviceLost;
			case 3: return .VkErrorOutOfDateKHR;
			case 4: return .VkErrorSurfaceLostKHR;
			case 5: return .VkErrorFullScreenExclusiveModeLostEXT;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateMicromapEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInvalidOpaqueCaptureAddressKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBuildMicromapsEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMicromapEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMicromapToMemoryEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCopyMemoryToMicromapEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkWriteMicromapsPropertiesEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPipelinePropertiesEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceOpticalFlowImageFormatsNV:
			switch (idx)
			{
			case 0: return .VkErrorExtensionNotPresent;
			case 1: return .VkErrorInitializationFailed;
			case 2: return .VkErrorFormatNotSupported;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateOpticalFlowSessionNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindOpticalFlowSessionImageNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDeviceFaultInfoEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkReleaseSwapchainImagesKHR:
			switch (idx)
			{
			case 0: return .VkErrorSurfaceLostKHR;
			default: Runtime.FatalError("Index out of range");
			}
		case vkMapMemory2:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkUnmapMemory2:
			switch (idx)
			{
			case 0: return .VkErrorMemoryMapFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateShadersEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			case 2: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetShaderBinaryDataEXT:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkSetLatencySleepModeNV:
			switch (idx)
			{
			case 0: return .VkErrorInitializationFailed;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceCooperativeVectorPropertiesNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkConvertCooperativeVectorMatrixNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateExternalComputeQueueNV:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorTooManyObjects;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateTensorARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateTensorViewARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindTensorMemoryARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetTensorOpaqueCaptureDescriptorDataARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetTensorViewOpaqueCaptureDescriptorDataARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDataGraphPipelinesARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkCreateDataGraphPipelineSessionARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelineSessionBindPointRequirementsARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkBindDataGraphPipelineSessionMemoryARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelineAvailablePropertiesARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetDataGraphPipelinePropertiesARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		case vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM:
			switch (idx)
			{
			case 0: return .VkErrorOutOfHostMemory;
			case 1: return .VkErrorOutOfDeviceMemory;
			default: Runtime.FatalError("Index out of range");
			}
		default: Runtime.FatalError("Index out of range");
		}
	}

	public VkQueueFlags Queues
	{
		get
		{
			switch (this)
			{
			case vkQueueBindSparse: return .SparseBinding;
			case vkCmdBindPipeline: return .Graphics | .Compute | .DataGraphARM;
			case vkCmdSetAttachmentFeedbackLoopEnableEXT: return .Graphics;
			case vkCmdSetViewport: return .Graphics;
			case vkCmdSetScissor: return .Graphics;
			case vkCmdSetLineWidth: return .Graphics;
			case vkCmdSetDepthBias: return .Graphics;
			case vkCmdSetBlendConstants: return .Graphics;
			case vkCmdSetDepthBounds: return .Graphics;
			case vkCmdSetStencilCompareMask: return .Graphics;
			case vkCmdSetStencilWriteMask: return .Graphics;
			case vkCmdSetStencilReference: return .Graphics;
			case vkCmdBindDescriptorSets: return .Graphics | .Compute | .DataGraphARM;
			case vkCmdBindIndexBuffer: return .Graphics;
			case vkCmdBindVertexBuffers: return .Graphics;
			case vkCmdDraw: return .Graphics;
			case vkCmdDrawIndexed: return .Graphics;
			case vkCmdDrawMultiEXT: return .Graphics;
			case vkCmdDrawMultiIndexedEXT: return .Graphics;
			case vkCmdDrawIndirect: return .Graphics;
			case vkCmdDrawIndexedIndirect: return .Graphics;
			case vkCmdDispatch: return .Compute;
			case vkCmdDispatchIndirect: return .Compute;
			case vkCmdSubpassShadingHUAWEI: return .Graphics;
			case vkCmdDrawClusterHUAWEI: return .Graphics;
			case vkCmdDrawClusterIndirectHUAWEI: return .Graphics;
			case vkCmdUpdatePipelineIndirectBufferNV: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyBuffer: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyImage: return .Transfer | .Graphics | .Compute;
			case vkCmdBlitImage: return .Graphics;
			case vkCmdCopyBufferToImage: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyImageToBuffer: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyMemoryIndirectNV: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyMemoryToImageIndirectNV: return .Transfer | .Graphics | .Compute;
			case vkCmdUpdateBuffer: return .Transfer | .Graphics | .Compute;
			case vkCmdFillBuffer: return .Transfer | .Graphics | .Compute;
			case vkCmdClearColorImage: return .Graphics | .Compute;
			case vkCmdClearDepthStencilImage: return .Graphics;
			case vkCmdClearAttachments: return .Graphics;
			case vkCmdResolveImage: return .Graphics;
			case vkCmdSetEvent: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdResetEvent: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdWaitEvents: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdPipelineBarrier: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdBeginQuery: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdEndQuery: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdBeginConditionalRenderingEXT: return .Graphics | .Compute;
			case vkCmdEndConditionalRenderingEXT: return .Graphics | .Compute;
			case vkCmdResetQueryPool: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdWriteTimestamp: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdCopyQueryPoolResults: return .Graphics | .Compute;
			case vkCmdPushConstants: return .Graphics | .Compute;
			case vkCmdBeginRenderPass: return .Graphics;
			case vkCmdNextSubpass: return .Graphics;
			case vkCmdEndRenderPass: return .Graphics;
			case vkCmdExecuteCommands: return .Transfer | .Graphics | .Compute;
			case vkCmdDebugMarkerBeginEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdDebugMarkerEndEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdDebugMarkerInsertEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdExecuteGeneratedCommandsNV: return .Graphics | .Compute;
			case vkCmdPreprocessGeneratedCommandsNV: return .Graphics | .Compute;
			case vkCmdBindPipelineShaderGroupNV: return .Graphics | .Compute;
			case vkCmdExecuteGeneratedCommandsEXT: return .Graphics | .Compute;
			case vkCmdPreprocessGeneratedCommandsEXT: return .Graphics | .Compute;
			case vkCmdPushDescriptorSet: return .Graphics | .Compute;
			case vkCmdSetDeviceMask: return .Graphics | .Compute | .Transfer;
			case vkCmdDispatchBase: return .Compute;
			case vkCmdPushDescriptorSetWithTemplate: return .Graphics | .Compute;
			case vkCmdSetViewportWScalingNV: return .Graphics;
			case vkCmdSetDiscardRectangleEXT: return .Graphics;
			case vkCmdSetDiscardRectangleEnableEXT: return .Graphics;
			case vkCmdSetDiscardRectangleModeEXT: return .Graphics;
			case vkCmdSetSampleLocationsEXT: return .Graphics;
			case vkCmdBeginDebugUtilsLabelEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdEndDebugUtilsLabelEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdInsertDebugUtilsLabelEXT: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR | .OpticalFlowNV;
			case vkCmdWriteBufferMarkerAMD: return .Transfer | .Graphics | .Compute;
			case vkCmdBeginRenderPass2: return .Graphics;
			case vkCmdNextSubpass2: return .Graphics;
			case vkCmdEndRenderPass2: return .Graphics;
			case vkCmdDrawIndirectCount: return .Graphics;
			case vkCmdDrawIndexedIndirectCount: return .Graphics;
			case vkCmdSetCheckpointNV: return .Graphics | .Compute | .Transfer;
			case vkCmdBindTransformFeedbackBuffersEXT: return .Graphics;
			case vkCmdBeginTransformFeedbackEXT: return .Graphics;
			case vkCmdEndTransformFeedbackEXT: return .Graphics;
			case vkCmdBeginQueryIndexedEXT: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdEndQueryIndexedEXT: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdDrawIndirectByteCountEXT: return .Graphics;
			case vkCmdSetExclusiveScissorNV: return .Graphics;
			case vkCmdSetExclusiveScissorEnableNV: return .Graphics;
			case vkCmdBindShadingRateImageNV: return .Graphics;
			case vkCmdSetViewportShadingRatePaletteNV: return .Graphics;
			case vkCmdSetCoarseSampleOrderNV: return .Graphics;
			case vkCmdDrawMeshTasksNV: return .Graphics;
			case vkCmdDrawMeshTasksIndirectNV: return .Graphics;
			case vkCmdDrawMeshTasksIndirectCountNV: return .Graphics;
			case vkCmdDrawMeshTasksEXT: return .Graphics;
			case vkCmdDrawMeshTasksIndirectEXT: return .Graphics;
			case vkCmdDrawMeshTasksIndirectCountEXT: return .Graphics;
			case vkCmdBindInvocationMaskHUAWEI: return .Compute;
			case vkCmdCopyAccelerationStructureNV: return .Compute;
			case vkCmdCopyAccelerationStructureKHR: return .Compute;
			case vkCmdCopyAccelerationStructureToMemoryKHR: return .Compute;
			case vkCmdCopyMemoryToAccelerationStructureKHR: return .Compute;
			case vkCmdWriteAccelerationStructuresPropertiesKHR: return .Compute;
			case vkCmdWriteAccelerationStructuresPropertiesNV: return .Compute;
			case vkCmdBuildAccelerationStructureNV: return .Compute;
			case vkCmdTraceRaysKHR: return .Compute;
			case vkCmdTraceRaysNV: return .Compute;
			case vkCmdTraceRaysIndirectKHR: return .Compute;
			case vkCmdTraceRaysIndirect2KHR: return .Compute;
			case vkCmdBuildClusterAccelerationStructureIndirectNV: return .Compute;
			case vkCmdSetRayTracingPipelineStackSizeKHR: return .Compute;
			case vkCmdSetPerformanceMarkerINTEL: return .Graphics | .Compute | .Transfer;
			case vkCmdSetPerformanceStreamMarkerINTEL: return .Graphics | .Compute | .Transfer;
			case vkCmdSetPerformanceOverrideINTEL: return .Graphics | .Compute | .Transfer;
			case vkCmdSetLineStipple: return .Graphics;
			case vkCmdBuildAccelerationStructuresKHR: return .Compute;
			case vkCmdBuildAccelerationStructuresIndirectKHR: return .Compute;
			case vkCmdSetCullMode: return .Graphics;
			case vkCmdSetFrontFace: return .Graphics;
			case vkCmdSetPrimitiveTopology: return .Graphics;
			case vkCmdSetViewportWithCount: return .Graphics;
			case vkCmdSetScissorWithCount: return .Graphics;
			case vkCmdBindIndexBuffer2: return .Graphics;
			case vkCmdBindVertexBuffers2: return .Graphics;
			case vkCmdSetDepthTestEnable: return .Graphics;
			case vkCmdSetDepthWriteEnable: return .Graphics;
			case vkCmdSetDepthCompareOp: return .Graphics;
			case vkCmdSetDepthBoundsTestEnable: return .Graphics;
			case vkCmdSetStencilTestEnable: return .Graphics;
			case vkCmdSetStencilOp: return .Graphics;
			case vkCmdSetPatchControlPointsEXT: return .Graphics;
			case vkCmdSetRasterizerDiscardEnable: return .Graphics;
			case vkCmdSetDepthBiasEnable: return .Graphics;
			case vkCmdSetLogicOpEXT: return .Graphics;
			case vkCmdSetPrimitiveRestartEnable: return .Graphics;
			case vkCmdSetTessellationDomainOriginEXT: return .Graphics;
			case vkCmdSetDepthClampEnableEXT: return .Graphics;
			case vkCmdSetPolygonModeEXT: return .Graphics;
			case vkCmdSetRasterizationSamplesEXT: return .Graphics;
			case vkCmdSetSampleMaskEXT: return .Graphics;
			case vkCmdSetAlphaToCoverageEnableEXT: return .Graphics;
			case vkCmdSetAlphaToOneEnableEXT: return .Graphics;
			case vkCmdSetLogicOpEnableEXT: return .Graphics;
			case vkCmdSetColorBlendEnableEXT: return .Graphics;
			case vkCmdSetColorBlendEquationEXT: return .Graphics;
			case vkCmdSetColorWriteMaskEXT: return .Graphics;
			case vkCmdSetRasterizationStreamEXT: return .Graphics;
			case vkCmdSetConservativeRasterizationModeEXT: return .Graphics;
			case vkCmdSetExtraPrimitiveOverestimationSizeEXT: return .Graphics;
			case vkCmdSetDepthClipEnableEXT: return .Graphics;
			case vkCmdSetSampleLocationsEnableEXT: return .Graphics;
			case vkCmdSetColorBlendAdvancedEXT: return .Graphics;
			case vkCmdSetProvokingVertexModeEXT: return .Graphics;
			case vkCmdSetLineRasterizationModeEXT: return .Graphics;
			case vkCmdSetLineStippleEnableEXT: return .Graphics;
			case vkCmdSetDepthClipNegativeOneToOneEXT: return .Graphics;
			case vkCmdSetViewportWScalingEnableNV: return .Graphics;
			case vkCmdSetViewportSwizzleNV: return .Graphics;
			case vkCmdSetCoverageToColorEnableNV: return .Graphics;
			case vkCmdSetCoverageToColorLocationNV: return .Graphics;
			case vkCmdSetCoverageModulationModeNV: return .Graphics;
			case vkCmdSetCoverageModulationTableEnableNV: return .Graphics;
			case vkCmdSetCoverageModulationTableNV: return .Graphics;
			case vkCmdSetShadingRateImageEnableNV: return .Graphics;
			case vkCmdSetCoverageReductionModeNV: return .Graphics;
			case vkCmdSetRepresentativeFragmentTestEnableNV: return .Graphics;
			case vkCmdCopyBuffer2: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyImage2: return .Transfer | .Graphics | .Compute;
			case vkCmdBlitImage2: return .Graphics;
			case vkCmdCopyBufferToImage2: return .Transfer | .Graphics | .Compute;
			case vkCmdCopyImageToBuffer2: return .Transfer | .Graphics | .Compute;
			case vkCmdResolveImage2: return .Graphics;
			case vkCmdSetFragmentShadingRateKHR: return .Graphics;
			case vkCmdSetFragmentShadingRateEnumNV: return .Graphics;
			case vkCmdSetVertexInputEXT: return .Graphics;
			case vkCmdSetColorWriteEnableEXT: return .Graphics;
			case vkCmdSetEvent2: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdResetEvent2: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdWaitEvents2: return .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdPipelineBarrier2: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdWriteTimestamp2: return .Transfer | .Graphics | .Compute | .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdWriteBufferMarker2AMD: return .Transfer | .Graphics | .Compute;
			case vkCmdDecodeVideoKHR: return .VideoDecodeKHR;
			case vkCmdBeginVideoCodingKHR: return .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdControlVideoCodingKHR: return .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdEndVideoCodingKHR: return .VideoDecodeKHR | .VideoEncodeKHR;
			case vkCmdEncodeVideoKHR: return .VideoEncodeKHR;
			case vkCmdDecompressMemoryNV: return .Graphics | .Compute;
			case vkCmdDecompressMemoryIndirectCountNV: return .Graphics | .Compute;
			case vkCmdBuildPartitionedAccelerationStructuresNV: return .Compute;
			case vkCmdCuLaunchKernelNVX: return .Graphics | .Compute;
			case vkCmdBindDescriptorBuffersEXT: return .Graphics | .Compute | .DataGraphARM;
			case vkCmdSetDescriptorBufferOffsetsEXT: return .Graphics | .Compute | .DataGraphARM;
			case vkCmdBindDescriptorBufferEmbeddedSamplersEXT: return .Graphics | .Compute;
			case vkCmdBeginRendering: return .Graphics;
			case vkCmdEndRendering: return .Graphics;
			case vkCmdEndRendering2EXT: return .Graphics;
			case vkCmdBuildMicromapsEXT: return .Compute;
			case vkCmdCopyMicromapEXT: return .Compute;
			case vkCmdCopyMicromapToMemoryEXT: return .Compute;
			case vkCmdCopyMemoryToMicromapEXT: return .Compute;
			case vkCmdWriteMicromapsPropertiesEXT: return .Compute;
			case vkCmdBindTileMemoryQCOM: return .Graphics | .Compute;
			case vkCmdOpticalFlowExecuteNV: return .OpticalFlowNV;
			case vkCmdSetDepthBias2EXT: return .Graphics;
			case vkCmdBindShadersEXT: return .Graphics | .Compute;
			case vkCmdBindDescriptorSets2: return .Graphics | .Compute;
			case vkCmdPushConstants2: return .Graphics | .Compute;
			case vkCmdPushDescriptorSet2: return .Graphics | .Compute;
			case vkCmdPushDescriptorSetWithTemplate2: return .Graphics | .Compute;
			case vkCmdSetDescriptorBufferOffsets2EXT: return .Graphics | .Compute | .DataGraphARM;
			case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT: return .Graphics | .Compute;
			case vkCmdSetRenderingAttachmentLocations: return .Graphics;
			case vkCmdSetRenderingInputAttachmentIndices: return .Graphics;
			case vkCmdSetDepthClampRangeEXT: return .Graphics;
			case vkCmdConvertCooperativeVectorMatrixNV: return .Graphics | .Compute;
			case vkCmdDispatchTileQCOM: return .Compute;
			case vkCmdBeginPerTileExecutionQCOM: return .Graphics | .Compute;
			case vkCmdEndPerTileExecutionQCOM: return .Graphics | .Compute;
			case vkCmdCopyTensorARM: return .Transfer | .Graphics | .Compute;
			case vkCmdDispatchDataGraphARM: return .DataGraphARM;
			default: return 0;
			}
		}
	}

	public RenderPassLocation RenderPassLocation
	{
		get
		{
			switch (this)
			{
			case vkCmdBindPipeline: return .Both;
			case vkCmdSetAttachmentFeedbackLoopEnableEXT: return .Both;
			case vkCmdSetViewport: return .Both;
			case vkCmdSetScissor: return .Both;
			case vkCmdSetLineWidth: return .Both;
			case vkCmdSetDepthBias: return .Both;
			case vkCmdSetBlendConstants: return .Both;
			case vkCmdSetDepthBounds: return .Both;
			case vkCmdSetStencilCompareMask: return .Both;
			case vkCmdSetStencilWriteMask: return .Both;
			case vkCmdSetStencilReference: return .Both;
			case vkCmdBindDescriptorSets: return .Both;
			case vkCmdBindIndexBuffer: return .Both;
			case vkCmdBindVertexBuffers: return .Both;
			case vkCmdDraw: return .Inside;
			case vkCmdDrawIndexed: return .Inside;
			case vkCmdDrawMultiEXT: return .Inside;
			case vkCmdDrawMultiIndexedEXT: return .Inside;
			case vkCmdDrawIndirect: return .Inside;
			case vkCmdDrawIndexedIndirect: return .Inside;
			case vkCmdDispatch: return .Both;
			case vkCmdDispatchIndirect: return .Both;
			case vkCmdSubpassShadingHUAWEI: return .Inside;
			case vkCmdDrawClusterHUAWEI: return .Inside;
			case vkCmdDrawClusterIndirectHUAWEI: return .Inside;
			case vkCmdUpdatePipelineIndirectBufferNV: return .Outside;
			case vkCmdCopyBuffer: return .Outside;
			case vkCmdCopyImage: return .Outside;
			case vkCmdBlitImage: return .Outside;
			case vkCmdCopyBufferToImage: return .Outside;
			case vkCmdCopyImageToBuffer: return .Outside;
			case vkCmdCopyMemoryIndirectNV: return .Outside;
			case vkCmdCopyMemoryToImageIndirectNV: return .Outside;
			case vkCmdUpdateBuffer: return .Outside;
			case vkCmdFillBuffer: return .Outside;
			case vkCmdClearColorImage: return .Outside;
			case vkCmdClearDepthStencilImage: return .Outside;
			case vkCmdClearAttachments: return .Inside;
			case vkCmdResolveImage: return .Outside;
			case vkCmdSetEvent: return .Outside;
			case vkCmdResetEvent: return .Outside;
			case vkCmdWaitEvents: return .Both;
			case vkCmdPipelineBarrier: return .Both;
			case vkCmdBeginQuery: return .Both;
			case vkCmdEndQuery: return .Both;
			case vkCmdBeginConditionalRenderingEXT: return .Both;
			case vkCmdEndConditionalRenderingEXT: return .Both;
			case vkCmdResetQueryPool: return .Outside;
			case vkCmdWriteTimestamp: return .Both;
			case vkCmdCopyQueryPoolResults: return .Outside;
			case vkCmdPushConstants: return .Both;
			case vkCmdBeginRenderPass: return .Outside;
			case vkCmdNextSubpass: return .Inside;
			case vkCmdEndRenderPass: return .Inside;
			case vkCmdExecuteCommands: return .Both;
			case vkCmdDebugMarkerBeginEXT: return .Both;
			case vkCmdDebugMarkerEndEXT: return .Both;
			case vkCmdDebugMarkerInsertEXT: return .Both;
			case vkCmdExecuteGeneratedCommandsNV: return .Inside;
			case vkCmdPreprocessGeneratedCommandsNV: return .Outside;
			case vkCmdBindPipelineShaderGroupNV: return .Both;
			case vkCmdExecuteGeneratedCommandsEXT: return .Both;
			case vkCmdPreprocessGeneratedCommandsEXT: return .Outside;
			case vkCmdPushDescriptorSet: return .Both;
			case vkCmdSetDeviceMask: return .Both;
			case vkCmdDispatchBase: return .Both;
			case vkCmdPushDescriptorSetWithTemplate: return .Both;
			case vkCmdSetViewportWScalingNV: return .Both;
			case vkCmdSetDiscardRectangleEXT: return .Both;
			case vkCmdSetDiscardRectangleEnableEXT: return .Both;
			case vkCmdSetDiscardRectangleModeEXT: return .Both;
			case vkCmdSetSampleLocationsEXT: return .Both;
			case vkCmdBeginDebugUtilsLabelEXT: return .Both;
			case vkCmdEndDebugUtilsLabelEXT: return .Both;
			case vkCmdInsertDebugUtilsLabelEXT: return .Both;
			case vkCmdWriteBufferMarkerAMD: return .Both;
			case vkCmdBeginRenderPass2: return .Outside;
			case vkCmdNextSubpass2: return .Inside;
			case vkCmdEndRenderPass2: return .Inside;
			case vkCmdDrawIndirectCount: return .Inside;
			case vkCmdDrawIndexedIndirectCount: return .Inside;
			case vkCmdSetCheckpointNV: return .Both;
			case vkCmdBindTransformFeedbackBuffersEXT: return .Both;
			case vkCmdBeginTransformFeedbackEXT: return .Inside;
			case vkCmdEndTransformFeedbackEXT: return .Inside;
			case vkCmdBeginQueryIndexedEXT: return .Both;
			case vkCmdEndQueryIndexedEXT: return .Both;
			case vkCmdDrawIndirectByteCountEXT: return .Inside;
			case vkCmdSetExclusiveScissorNV: return .Both;
			case vkCmdSetExclusiveScissorEnableNV: return .Both;
			case vkCmdBindShadingRateImageNV: return .Both;
			case vkCmdSetViewportShadingRatePaletteNV: return .Both;
			case vkCmdSetCoarseSampleOrderNV: return .Both;
			case vkCmdDrawMeshTasksNV: return .Inside;
			case vkCmdDrawMeshTasksIndirectNV: return .Inside;
			case vkCmdDrawMeshTasksIndirectCountNV: return .Inside;
			case vkCmdDrawMeshTasksEXT: return .Inside;
			case vkCmdDrawMeshTasksIndirectEXT: return .Inside;
			case vkCmdDrawMeshTasksIndirectCountEXT: return .Inside;
			case vkCmdBindInvocationMaskHUAWEI: return .Outside;
			case vkCmdCopyAccelerationStructureNV: return .Outside;
			case vkCmdCopyAccelerationStructureKHR: return .Outside;
			case vkCmdCopyAccelerationStructureToMemoryKHR: return .Outside;
			case vkCmdCopyMemoryToAccelerationStructureKHR: return .Outside;
			case vkCmdWriteAccelerationStructuresPropertiesKHR: return .Outside;
			case vkCmdWriteAccelerationStructuresPropertiesNV: return .Outside;
			case vkCmdBuildAccelerationStructureNV: return .Outside;
			case vkCmdTraceRaysKHR: return .Outside;
			case vkCmdTraceRaysNV: return .Outside;
			case vkCmdTraceRaysIndirectKHR: return .Outside;
			case vkCmdTraceRaysIndirect2KHR: return .Outside;
			case vkCmdBuildClusterAccelerationStructureIndirectNV: return .Outside;
			case vkCmdSetRayTracingPipelineStackSizeKHR: return .Outside;
			case vkCmdSetPerformanceMarkerINTEL: return .Both;
			case vkCmdSetPerformanceStreamMarkerINTEL: return .Both;
			case vkCmdSetPerformanceOverrideINTEL: return .Both;
			case vkCmdSetLineStipple: return .Both;
			case vkCmdBuildAccelerationStructuresKHR: return .Outside;
			case vkCmdBuildAccelerationStructuresIndirectKHR: return .Outside;
			case vkCmdSetCullMode: return .Both;
			case vkCmdSetFrontFace: return .Both;
			case vkCmdSetPrimitiveTopology: return .Both;
			case vkCmdSetViewportWithCount: return .Both;
			case vkCmdSetScissorWithCount: return .Both;
			case vkCmdBindIndexBuffer2: return .Both;
			case vkCmdBindVertexBuffers2: return .Both;
			case vkCmdSetDepthTestEnable: return .Both;
			case vkCmdSetDepthWriteEnable: return .Both;
			case vkCmdSetDepthCompareOp: return .Both;
			case vkCmdSetDepthBoundsTestEnable: return .Both;
			case vkCmdSetStencilTestEnable: return .Both;
			case vkCmdSetStencilOp: return .Both;
			case vkCmdSetPatchControlPointsEXT: return .Both;
			case vkCmdSetRasterizerDiscardEnable: return .Both;
			case vkCmdSetDepthBiasEnable: return .Both;
			case vkCmdSetLogicOpEXT: return .Both;
			case vkCmdSetPrimitiveRestartEnable: return .Both;
			case vkCmdSetTessellationDomainOriginEXT: return .Both;
			case vkCmdSetDepthClampEnableEXT: return .Both;
			case vkCmdSetPolygonModeEXT: return .Both;
			case vkCmdSetRasterizationSamplesEXT: return .Both;
			case vkCmdSetSampleMaskEXT: return .Both;
			case vkCmdSetAlphaToCoverageEnableEXT: return .Both;
			case vkCmdSetAlphaToOneEnableEXT: return .Both;
			case vkCmdSetLogicOpEnableEXT: return .Both;
			case vkCmdSetColorBlendEnableEXT: return .Both;
			case vkCmdSetColorBlendEquationEXT: return .Both;
			case vkCmdSetColorWriteMaskEXT: return .Both;
			case vkCmdSetRasterizationStreamEXT: return .Both;
			case vkCmdSetConservativeRasterizationModeEXT: return .Both;
			case vkCmdSetExtraPrimitiveOverestimationSizeEXT: return .Both;
			case vkCmdSetDepthClipEnableEXT: return .Both;
			case vkCmdSetSampleLocationsEnableEXT: return .Both;
			case vkCmdSetColorBlendAdvancedEXT: return .Both;
			case vkCmdSetProvokingVertexModeEXT: return .Both;
			case vkCmdSetLineRasterizationModeEXT: return .Both;
			case vkCmdSetLineStippleEnableEXT: return .Both;
			case vkCmdSetDepthClipNegativeOneToOneEXT: return .Both;
			case vkCmdSetViewportWScalingEnableNV: return .Both;
			case vkCmdSetViewportSwizzleNV: return .Both;
			case vkCmdSetCoverageToColorEnableNV: return .Both;
			case vkCmdSetCoverageToColorLocationNV: return .Both;
			case vkCmdSetCoverageModulationModeNV: return .Both;
			case vkCmdSetCoverageModulationTableEnableNV: return .Both;
			case vkCmdSetCoverageModulationTableNV: return .Both;
			case vkCmdSetShadingRateImageEnableNV: return .Both;
			case vkCmdSetCoverageReductionModeNV: return .Both;
			case vkCmdSetRepresentativeFragmentTestEnableNV: return .Both;
			case vkCmdCopyBuffer2: return .Outside;
			case vkCmdCopyImage2: return .Outside;
			case vkCmdBlitImage2: return .Outside;
			case vkCmdCopyBufferToImage2: return .Outside;
			case vkCmdCopyImageToBuffer2: return .Outside;
			case vkCmdResolveImage2: return .Outside;
			case vkCmdSetFragmentShadingRateKHR: return .Both;
			case vkCmdSetFragmentShadingRateEnumNV: return .Both;
			case vkCmdSetVertexInputEXT: return .Both;
			case vkCmdSetColorWriteEnableEXT: return .Both;
			case vkCmdSetEvent2: return .Outside;
			case vkCmdResetEvent2: return .Outside;
			case vkCmdWaitEvents2: return .Both;
			case vkCmdPipelineBarrier2: return .Both;
			case vkCmdWriteTimestamp2: return .Both;
			case vkCmdWriteBufferMarker2AMD: return .Both;
			case vkCmdDecodeVideoKHR: return .Outside;
			case vkCmdBeginVideoCodingKHR: return .Outside;
			case vkCmdControlVideoCodingKHR: return .Outside;
			case vkCmdEndVideoCodingKHR: return .Outside;
			case vkCmdEncodeVideoKHR: return .Outside;
			case vkCmdDecompressMemoryNV: return .Outside;
			case vkCmdDecompressMemoryIndirectCountNV: return .Outside;
			case vkCmdBuildPartitionedAccelerationStructuresNV: return .Outside;
			case vkCmdCuLaunchKernelNVX: return .Both;
			case vkCmdBindDescriptorBuffersEXT: return .Both;
			case vkCmdSetDescriptorBufferOffsetsEXT: return .Both;
			case vkCmdBindDescriptorBufferEmbeddedSamplersEXT: return .Both;
			case vkCmdBeginRendering: return .Outside;
			case vkCmdEndRendering: return .Inside;
			case vkCmdEndRendering2EXT: return .Inside;
			case vkCmdBuildMicromapsEXT: return .Outside;
			case vkCmdCopyMicromapEXT: return .Outside;
			case vkCmdCopyMicromapToMemoryEXT: return .Outside;
			case vkCmdCopyMemoryToMicromapEXT: return .Outside;
			case vkCmdWriteMicromapsPropertiesEXT: return .Outside;
			case vkCmdBindTileMemoryQCOM: return .Outside;
			case vkCmdOpticalFlowExecuteNV: return .Outside;
			case vkCmdSetDepthBias2EXT: return .Both;
			case vkCmdBindShadersEXT: return .Both;
			case vkCmdBindDescriptorSets2: return .Both;
			case vkCmdPushConstants2: return .Both;
			case vkCmdPushDescriptorSet2: return .Both;
			case vkCmdPushDescriptorSetWithTemplate2: return .Both;
			case vkCmdSetDescriptorBufferOffsets2EXT: return .Both;
			case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT: return .Both;
			case vkCmdSetRenderingAttachmentLocations: return .Inside;
			case vkCmdSetRenderingInputAttachmentIndices: return .Inside;
			case vkCmdSetDepthClampRangeEXT: return .Both;
			case vkCmdConvertCooperativeVectorMatrixNV: return .Outside;
			case vkCmdDispatchTileQCOM: return .Inside;
			case vkCmdBeginPerTileExecutionQCOM: return .Inside;
			case vkCmdEndPerTileExecutionQCOM: return .Inside;
			case vkCmdCopyTensorARM: return .Outside;
			case vkCmdDispatchDataGraphARM: return .Outside;
			default: return 0;
			}
		}
	}

	public CmdBufferLevel CmdBufferLevels
	{
		get
		{
			switch (this)
			{
			case vkCmdBindPipeline: return .Primary | .Secondary;
			case vkCmdSetAttachmentFeedbackLoopEnableEXT: return .Primary | .Secondary;
			case vkCmdSetViewport: return .Primary | .Secondary;
			case vkCmdSetScissor: return .Primary | .Secondary;
			case vkCmdSetLineWidth: return .Primary | .Secondary;
			case vkCmdSetDepthBias: return .Primary | .Secondary;
			case vkCmdSetBlendConstants: return .Primary | .Secondary;
			case vkCmdSetDepthBounds: return .Primary | .Secondary;
			case vkCmdSetStencilCompareMask: return .Primary | .Secondary;
			case vkCmdSetStencilWriteMask: return .Primary | .Secondary;
			case vkCmdSetStencilReference: return .Primary | .Secondary;
			case vkCmdBindDescriptorSets: return .Primary | .Secondary;
			case vkCmdBindIndexBuffer: return .Primary | .Secondary;
			case vkCmdBindVertexBuffers: return .Primary | .Secondary;
			case vkCmdDraw: return .Primary | .Secondary;
			case vkCmdDrawIndexed: return .Primary | .Secondary;
			case vkCmdDrawMultiEXT: return .Primary | .Secondary;
			case vkCmdDrawMultiIndexedEXT: return .Primary | .Secondary;
			case vkCmdDrawIndirect: return .Primary | .Secondary;
			case vkCmdDrawIndexedIndirect: return .Primary | .Secondary;
			case vkCmdDispatch: return .Primary | .Secondary;
			case vkCmdDispatchIndirect: return .Primary | .Secondary;
			case vkCmdSubpassShadingHUAWEI: return .Primary | .Secondary;
			case vkCmdDrawClusterHUAWEI: return .Primary | .Secondary;
			case vkCmdDrawClusterIndirectHUAWEI: return .Primary | .Secondary;
			case vkCmdUpdatePipelineIndirectBufferNV: return .Primary | .Secondary;
			case vkCmdCopyBuffer: return .Primary | .Secondary;
			case vkCmdCopyImage: return .Primary | .Secondary;
			case vkCmdBlitImage: return .Primary | .Secondary;
			case vkCmdCopyBufferToImage: return .Primary | .Secondary;
			case vkCmdCopyImageToBuffer: return .Primary | .Secondary;
			case vkCmdCopyMemoryIndirectNV: return .Primary | .Secondary;
			case vkCmdCopyMemoryToImageIndirectNV: return .Primary | .Secondary;
			case vkCmdUpdateBuffer: return .Primary | .Secondary;
			case vkCmdFillBuffer: return .Primary | .Secondary;
			case vkCmdClearColorImage: return .Primary | .Secondary;
			case vkCmdClearDepthStencilImage: return .Primary | .Secondary;
			case vkCmdClearAttachments: return .Primary | .Secondary;
			case vkCmdResolveImage: return .Primary | .Secondary;
			case vkCmdSetEvent: return .Primary | .Secondary;
			case vkCmdResetEvent: return .Primary | .Secondary;
			case vkCmdWaitEvents: return .Primary | .Secondary;
			case vkCmdPipelineBarrier: return .Primary | .Secondary;
			case vkCmdBeginQuery: return .Primary | .Secondary;
			case vkCmdEndQuery: return .Primary | .Secondary;
			case vkCmdBeginConditionalRenderingEXT: return .Primary | .Secondary;
			case vkCmdEndConditionalRenderingEXT: return .Primary | .Secondary;
			case vkCmdResetQueryPool: return .Primary | .Secondary;
			case vkCmdWriteTimestamp: return .Primary | .Secondary;
			case vkCmdCopyQueryPoolResults: return .Primary | .Secondary;
			case vkCmdPushConstants: return .Primary | .Secondary;
			case vkCmdBeginRenderPass: return .Primary;
			case vkCmdNextSubpass: return .Primary;
			case vkCmdEndRenderPass: return .Primary;
			case vkCmdExecuteCommands: return .Primary | .Secondary;
			case vkCmdDebugMarkerBeginEXT: return .Primary | .Secondary;
			case vkCmdDebugMarkerEndEXT: return .Primary | .Secondary;
			case vkCmdDebugMarkerInsertEXT: return .Primary | .Secondary;
			case vkCmdExecuteGeneratedCommandsNV: return .Primary | .Secondary;
			case vkCmdPreprocessGeneratedCommandsNV: return .Primary | .Secondary;
			case vkCmdBindPipelineShaderGroupNV: return .Primary | .Secondary;
			case vkCmdExecuteGeneratedCommandsEXT: return .Primary;
			case vkCmdPreprocessGeneratedCommandsEXT: return .Primary;
			case vkCmdPushDescriptorSet: return .Primary | .Secondary;
			case vkCmdSetDeviceMask: return .Primary | .Secondary;
			case vkCmdDispatchBase: return .Primary | .Secondary;
			case vkCmdPushDescriptorSetWithTemplate: return .Primary | .Secondary;
			case vkCmdSetViewportWScalingNV: return .Primary | .Secondary;
			case vkCmdSetDiscardRectangleEXT: return .Primary | .Secondary;
			case vkCmdSetDiscardRectangleEnableEXT: return .Primary | .Secondary;
			case vkCmdSetDiscardRectangleModeEXT: return .Primary | .Secondary;
			case vkCmdSetSampleLocationsEXT: return .Primary | .Secondary;
			case vkCmdBeginDebugUtilsLabelEXT: return .Primary | .Secondary;
			case vkCmdEndDebugUtilsLabelEXT: return .Primary | .Secondary;
			case vkCmdInsertDebugUtilsLabelEXT: return .Primary | .Secondary;
			case vkCmdWriteBufferMarkerAMD: return .Primary | .Secondary;
			case vkCmdBeginRenderPass2: return .Primary;
			case vkCmdNextSubpass2: return .Primary;
			case vkCmdEndRenderPass2: return .Primary;
			case vkCmdDrawIndirectCount: return .Primary | .Secondary;
			case vkCmdDrawIndexedIndirectCount: return .Primary | .Secondary;
			case vkCmdSetCheckpointNV: return .Primary | .Secondary;
			case vkCmdBindTransformFeedbackBuffersEXT: return .Primary | .Secondary;
			case vkCmdBeginTransformFeedbackEXT: return .Primary | .Secondary;
			case vkCmdEndTransformFeedbackEXT: return .Primary | .Secondary;
			case vkCmdBeginQueryIndexedEXT: return .Primary | .Secondary;
			case vkCmdEndQueryIndexedEXT: return .Primary | .Secondary;
			case vkCmdDrawIndirectByteCountEXT: return .Primary | .Secondary;
			case vkCmdSetExclusiveScissorNV: return .Primary | .Secondary;
			case vkCmdSetExclusiveScissorEnableNV: return .Primary | .Secondary;
			case vkCmdBindShadingRateImageNV: return .Primary | .Secondary;
			case vkCmdSetViewportShadingRatePaletteNV: return .Primary | .Secondary;
			case vkCmdSetCoarseSampleOrderNV: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksNV: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksIndirectNV: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksIndirectCountNV: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksEXT: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksIndirectEXT: return .Primary | .Secondary;
			case vkCmdDrawMeshTasksIndirectCountEXT: return .Primary | .Secondary;
			case vkCmdBindInvocationMaskHUAWEI: return .Primary | .Secondary;
			case vkCmdCopyAccelerationStructureNV: return .Primary | .Secondary;
			case vkCmdCopyAccelerationStructureKHR: return .Primary | .Secondary;
			case vkCmdCopyAccelerationStructureToMemoryKHR: return .Primary | .Secondary;
			case vkCmdCopyMemoryToAccelerationStructureKHR: return .Primary | .Secondary;
			case vkCmdWriteAccelerationStructuresPropertiesKHR: return .Primary | .Secondary;
			case vkCmdWriteAccelerationStructuresPropertiesNV: return .Primary | .Secondary;
			case vkCmdBuildAccelerationStructureNV: return .Primary | .Secondary;
			case vkCmdTraceRaysKHR: return .Primary | .Secondary;
			case vkCmdTraceRaysNV: return .Primary | .Secondary;
			case vkCmdTraceRaysIndirectKHR: return .Primary | .Secondary;
			case vkCmdTraceRaysIndirect2KHR: return .Primary | .Secondary;
			case vkCmdBuildClusterAccelerationStructureIndirectNV: return .Primary | .Secondary;
			case vkCmdSetRayTracingPipelineStackSizeKHR: return .Primary | .Secondary;
			case vkCmdSetPerformanceMarkerINTEL: return .Primary | .Secondary;
			case vkCmdSetPerformanceStreamMarkerINTEL: return .Primary | .Secondary;
			case vkCmdSetPerformanceOverrideINTEL: return .Primary | .Secondary;
			case vkCmdSetLineStipple: return .Primary | .Secondary;
			case vkCmdBuildAccelerationStructuresKHR: return .Primary | .Secondary;
			case vkCmdBuildAccelerationStructuresIndirectKHR: return .Primary | .Secondary;
			case vkCmdSetCullMode: return .Primary | .Secondary;
			case vkCmdSetFrontFace: return .Primary | .Secondary;
			case vkCmdSetPrimitiveTopology: return .Primary | .Secondary;
			case vkCmdSetViewportWithCount: return .Primary | .Secondary;
			case vkCmdSetScissorWithCount: return .Primary | .Secondary;
			case vkCmdBindIndexBuffer2: return .Primary | .Secondary;
			case vkCmdBindVertexBuffers2: return .Primary | .Secondary;
			case vkCmdSetDepthTestEnable: return .Primary | .Secondary;
			case vkCmdSetDepthWriteEnable: return .Primary | .Secondary;
			case vkCmdSetDepthCompareOp: return .Primary | .Secondary;
			case vkCmdSetDepthBoundsTestEnable: return .Primary | .Secondary;
			case vkCmdSetStencilTestEnable: return .Primary | .Secondary;
			case vkCmdSetStencilOp: return .Primary | .Secondary;
			case vkCmdSetPatchControlPointsEXT: return .Primary | .Secondary;
			case vkCmdSetRasterizerDiscardEnable: return .Primary | .Secondary;
			case vkCmdSetDepthBiasEnable: return .Primary | .Secondary;
			case vkCmdSetLogicOpEXT: return .Primary | .Secondary;
			case vkCmdSetPrimitiveRestartEnable: return .Primary | .Secondary;
			case vkCmdSetTessellationDomainOriginEXT: return .Primary | .Secondary;
			case vkCmdSetDepthClampEnableEXT: return .Primary | .Secondary;
			case vkCmdSetPolygonModeEXT: return .Primary | .Secondary;
			case vkCmdSetRasterizationSamplesEXT: return .Primary | .Secondary;
			case vkCmdSetSampleMaskEXT: return .Primary | .Secondary;
			case vkCmdSetAlphaToCoverageEnableEXT: return .Primary | .Secondary;
			case vkCmdSetAlphaToOneEnableEXT: return .Primary | .Secondary;
			case vkCmdSetLogicOpEnableEXT: return .Primary | .Secondary;
			case vkCmdSetColorBlendEnableEXT: return .Primary | .Secondary;
			case vkCmdSetColorBlendEquationEXT: return .Primary | .Secondary;
			case vkCmdSetColorWriteMaskEXT: return .Primary | .Secondary;
			case vkCmdSetRasterizationStreamEXT: return .Primary | .Secondary;
			case vkCmdSetConservativeRasterizationModeEXT: return .Primary | .Secondary;
			case vkCmdSetExtraPrimitiveOverestimationSizeEXT: return .Primary | .Secondary;
			case vkCmdSetDepthClipEnableEXT: return .Primary | .Secondary;
			case vkCmdSetSampleLocationsEnableEXT: return .Primary | .Secondary;
			case vkCmdSetColorBlendAdvancedEXT: return .Primary | .Secondary;
			case vkCmdSetProvokingVertexModeEXT: return .Primary | .Secondary;
			case vkCmdSetLineRasterizationModeEXT: return .Primary | .Secondary;
			case vkCmdSetLineStippleEnableEXT: return .Primary | .Secondary;
			case vkCmdSetDepthClipNegativeOneToOneEXT: return .Primary | .Secondary;
			case vkCmdSetViewportWScalingEnableNV: return .Primary | .Secondary;
			case vkCmdSetViewportSwizzleNV: return .Primary | .Secondary;
			case vkCmdSetCoverageToColorEnableNV: return .Primary | .Secondary;
			case vkCmdSetCoverageToColorLocationNV: return .Primary | .Secondary;
			case vkCmdSetCoverageModulationModeNV: return .Primary | .Secondary;
			case vkCmdSetCoverageModulationTableEnableNV: return .Primary | .Secondary;
			case vkCmdSetCoverageModulationTableNV: return .Primary | .Secondary;
			case vkCmdSetShadingRateImageEnableNV: return .Primary | .Secondary;
			case vkCmdSetCoverageReductionModeNV: return .Primary | .Secondary;
			case vkCmdSetRepresentativeFragmentTestEnableNV: return .Primary | .Secondary;
			case vkCmdCopyBuffer2: return .Primary | .Secondary;
			case vkCmdCopyImage2: return .Primary | .Secondary;
			case vkCmdBlitImage2: return .Primary | .Secondary;
			case vkCmdCopyBufferToImage2: return .Primary | .Secondary;
			case vkCmdCopyImageToBuffer2: return .Primary | .Secondary;
			case vkCmdResolveImage2: return .Primary | .Secondary;
			case vkCmdSetFragmentShadingRateKHR: return .Primary | .Secondary;
			case vkCmdSetFragmentShadingRateEnumNV: return .Primary | .Secondary;
			case vkCmdSetVertexInputEXT: return .Primary | .Secondary;
			case vkCmdSetColorWriteEnableEXT: return .Primary | .Secondary;
			case vkCmdSetEvent2: return .Primary | .Secondary;
			case vkCmdResetEvent2: return .Primary | .Secondary;
			case vkCmdWaitEvents2: return .Primary | .Secondary;
			case vkCmdPipelineBarrier2: return .Primary | .Secondary;
			case vkCmdWriteTimestamp2: return .Primary | .Secondary;
			case vkCmdWriteBufferMarker2AMD: return .Primary | .Secondary;
			case vkCmdDecodeVideoKHR: return .Primary;
			case vkCmdBeginVideoCodingKHR: return .Primary;
			case vkCmdControlVideoCodingKHR: return .Primary;
			case vkCmdEndVideoCodingKHR: return .Primary;
			case vkCmdEncodeVideoKHR: return .Primary;
			case vkCmdDecompressMemoryNV: return .Primary | .Secondary;
			case vkCmdDecompressMemoryIndirectCountNV: return .Primary | .Secondary;
			case vkCmdBuildPartitionedAccelerationStructuresNV: return .Primary | .Secondary;
			case vkCmdCuLaunchKernelNVX: return .Primary | .Secondary;
			case vkCmdBindDescriptorBuffersEXT: return .Primary | .Secondary;
			case vkCmdSetDescriptorBufferOffsetsEXT: return .Primary | .Secondary;
			case vkCmdBindDescriptorBufferEmbeddedSamplersEXT: return .Primary | .Secondary;
			case vkCmdBeginRendering: return .Primary | .Secondary;
			case vkCmdEndRendering: return .Primary | .Secondary;
			case vkCmdEndRendering2EXT: return .Primary | .Secondary;
			case vkCmdBuildMicromapsEXT: return .Primary | .Secondary;
			case vkCmdCopyMicromapEXT: return .Primary | .Secondary;
			case vkCmdCopyMicromapToMemoryEXT: return .Primary | .Secondary;
			case vkCmdCopyMemoryToMicromapEXT: return .Primary | .Secondary;
			case vkCmdWriteMicromapsPropertiesEXT: return .Primary | .Secondary;
			case vkCmdBindTileMemoryQCOM: return .Primary | .Secondary;
			case vkCmdOpticalFlowExecuteNV: return .Primary | .Secondary;
			case vkCmdSetDepthBias2EXT: return .Primary | .Secondary;
			case vkCmdBindShadersEXT: return .Primary | .Secondary;
			case vkCmdBindDescriptorSets2: return .Primary | .Secondary;
			case vkCmdPushConstants2: return .Primary | .Secondary;
			case vkCmdPushDescriptorSet2: return .Primary | .Secondary;
			case vkCmdPushDescriptorSetWithTemplate2: return .Primary | .Secondary;
			case vkCmdSetDescriptorBufferOffsets2EXT: return .Primary | .Secondary;
			case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT: return .Primary | .Secondary;
			case vkCmdSetRenderingAttachmentLocations: return .Primary | .Secondary;
			case vkCmdSetRenderingInputAttachmentIndices: return .Primary | .Secondary;
			case vkCmdSetDepthClampRangeEXT: return .Primary | .Secondary;
			case vkCmdConvertCooperativeVectorMatrixNV: return .Primary | .Secondary;
			case vkCmdDispatchTileQCOM: return .Primary | .Secondary;
			case vkCmdBeginPerTileExecutionQCOM: return .Primary | .Secondary;
			case vkCmdEndPerTileExecutionQCOM: return .Primary | .Secondary;
			case vkCmdCopyTensorARM: return .Primary | .Secondary;
			case vkCmdDispatchDataGraphARM: return .Primary | .Secondary;
			default: return 0;
			}
		}
	}

	public Task Tasks
	{
		get
		{
			switch (this)
			{
			case vkCmdBindPipeline: return .State;
			case vkCmdSetAttachmentFeedbackLoopEnableEXT: return .State;
			case vkCmdSetViewport: return .State;
			case vkCmdSetScissor: return .State;
			case vkCmdSetLineWidth: return .State;
			case vkCmdSetDepthBias: return .State;
			case vkCmdSetBlendConstants: return .State;
			case vkCmdSetDepthBounds: return .State;
			case vkCmdSetStencilCompareMask: return .State;
			case vkCmdSetStencilWriteMask: return .State;
			case vkCmdSetStencilReference: return .State;
			case vkCmdBindDescriptorSets: return .State;
			case vkCmdBindIndexBuffer: return .State;
			case vkCmdBindVertexBuffers: return .State;
			case vkCmdDraw: return .Action;
			case vkCmdDrawIndexed: return .Action;
			case vkCmdDrawMultiEXT: return .Action;
			case vkCmdDrawMultiIndexedEXT: return .Action;
			case vkCmdDrawIndirect: return .Action;
			case vkCmdDrawIndexedIndirect: return .Action;
			case vkCmdDispatch: return .Action;
			case vkCmdDispatchIndirect: return .Action;
			case vkCmdSubpassShadingHUAWEI: return .Action;
			case vkCmdDrawClusterHUAWEI: return .Action;
			case vkCmdDrawClusterIndirectHUAWEI: return .Action;
			case vkCmdUpdatePipelineIndirectBufferNV: return .Action;
			case vkCmdCopyBuffer: return .Action;
			case vkCmdCopyImage: return .Action;
			case vkCmdBlitImage: return .Action;
			case vkCmdCopyBufferToImage: return .Action;
			case vkCmdCopyImageToBuffer: return .Action;
			case vkCmdCopyMemoryIndirectNV: return .Action;
			case vkCmdCopyMemoryToImageIndirectNV: return .Action;
			case vkCmdUpdateBuffer: return .Action;
			case vkCmdFillBuffer: return .Action;
			case vkCmdClearColorImage: return .Action;
			case vkCmdClearDepthStencilImage: return .Action;
			case vkCmdClearAttachments: return .Action;
			case vkCmdResolveImage: return .Action;
			case vkCmdSetEvent: return .Synchronization;
			case vkCmdResetEvent: return .Synchronization;
			case vkCmdWaitEvents: return .Synchronization;
			case vkCmdPipelineBarrier: return .Synchronization;
			case vkCmdBeginQuery: return .Action | .State;
			case vkCmdEndQuery: return .Action | .State;
			case vkCmdBeginConditionalRenderingEXT: return .Action | .State;
			case vkCmdEndConditionalRenderingEXT: return .Action | .State;
			case vkCmdResetQueryPool: return .Action;
			case vkCmdWriteTimestamp: return .Action;
			case vkCmdCopyQueryPoolResults: return .Action;
			case vkCmdPushConstants: return .State;
			case vkCmdBeginRenderPass: return .Action | .State | .Synchronization;
			case vkCmdNextSubpass: return .Action | .State | .Synchronization;
			case vkCmdEndRenderPass: return .Action | .State | .Synchronization;
			case vkCmdExecuteCommands: return .Indirection;
			case vkCmdDebugMarkerBeginEXT: return .Action;
			case vkCmdDebugMarkerEndEXT: return .Action;
			case vkCmdDebugMarkerInsertEXT: return .Action;
			case vkCmdExecuteGeneratedCommandsNV: return .Action | .Indirection;
			case vkCmdPreprocessGeneratedCommandsNV: return .Action;
			case vkCmdBindPipelineShaderGroupNV: return .State;
			case vkCmdExecuteGeneratedCommandsEXT: return .Action | .Indirection;
			case vkCmdPreprocessGeneratedCommandsEXT: return .Action;
			case vkCmdPushDescriptorSet: return .State;
			case vkCmdSetDeviceMask: return .State;
			case vkCmdDispatchBase: return .Action;
			case vkCmdPushDescriptorSetWithTemplate: return .State;
			case vkCmdSetViewportWScalingNV: return .State;
			case vkCmdSetDiscardRectangleEXT: return .State;
			case vkCmdSetDiscardRectangleEnableEXT: return .State;
			case vkCmdSetDiscardRectangleModeEXT: return .State;
			case vkCmdSetSampleLocationsEXT: return .State;
			case vkCmdBeginDebugUtilsLabelEXT: return .Action | .State;
			case vkCmdEndDebugUtilsLabelEXT: return .Action | .State;
			case vkCmdInsertDebugUtilsLabelEXT: return .Action;
			case vkCmdWriteBufferMarkerAMD: return .Action;
			case vkCmdBeginRenderPass2: return .Action | .State | .Synchronization;
			case vkCmdNextSubpass2: return .Action | .State | .Synchronization;
			case vkCmdEndRenderPass2: return .Action | .State | .Synchronization;
			case vkCmdDrawIndirectCount: return .Action;
			case vkCmdDrawIndexedIndirectCount: return .Action;
			case vkCmdSetCheckpointNV: return .Action;
			case vkCmdBindTransformFeedbackBuffersEXT: return .State;
			case vkCmdBeginTransformFeedbackEXT: return .State;
			case vkCmdEndTransformFeedbackEXT: return .State;
			case vkCmdBeginQueryIndexedEXT: return .Action | .State;
			case vkCmdEndQueryIndexedEXT: return .Action | .State;
			case vkCmdDrawIndirectByteCountEXT: return .Action;
			case vkCmdSetExclusiveScissorNV: return .State;
			case vkCmdSetExclusiveScissorEnableNV: return .State;
			case vkCmdBindShadingRateImageNV: return .State;
			case vkCmdSetViewportShadingRatePaletteNV: return .State;
			case vkCmdSetCoarseSampleOrderNV: return .State;
			case vkCmdDrawMeshTasksNV: return .Action;
			case vkCmdDrawMeshTasksIndirectNV: return .Action;
			case vkCmdDrawMeshTasksIndirectCountNV: return .Action;
			case vkCmdDrawMeshTasksEXT: return .Action;
			case vkCmdDrawMeshTasksIndirectEXT: return .Action;
			case vkCmdDrawMeshTasksIndirectCountEXT: return .Action;
			case vkCmdBindInvocationMaskHUAWEI: return .State;
			case vkCmdCopyAccelerationStructureNV: return .Action;
			case vkCmdCopyAccelerationStructureKHR: return .Action;
			case vkCmdCopyAccelerationStructureToMemoryKHR: return .Action;
			case vkCmdCopyMemoryToAccelerationStructureKHR: return .Action;
			case vkCmdWriteAccelerationStructuresPropertiesKHR: return .Action;
			case vkCmdWriteAccelerationStructuresPropertiesNV: return .Action;
			case vkCmdBuildAccelerationStructureNV: return .Action;
			case vkCmdTraceRaysKHR: return .Action;
			case vkCmdTraceRaysNV: return .Action;
			case vkCmdTraceRaysIndirectKHR: return .Action;
			case vkCmdTraceRaysIndirect2KHR: return .Action;
			case vkCmdBuildClusterAccelerationStructureIndirectNV: return .Action;
			case vkCmdSetRayTracingPipelineStackSizeKHR: return .State;
			case vkCmdSetPerformanceMarkerINTEL: return .Action | .State;
			case vkCmdSetPerformanceStreamMarkerINTEL: return .Action | .State;
			case vkCmdSetPerformanceOverrideINTEL: return .State;
			case vkCmdSetLineStipple: return .State;
			case vkCmdBuildAccelerationStructuresKHR: return .Action;
			case vkCmdBuildAccelerationStructuresIndirectKHR: return .Action;
			case vkCmdSetCullMode: return .State;
			case vkCmdSetFrontFace: return .State;
			case vkCmdSetPrimitiveTopology: return .State;
			case vkCmdSetViewportWithCount: return .State;
			case vkCmdSetScissorWithCount: return .State;
			case vkCmdBindIndexBuffer2: return .State;
			case vkCmdBindVertexBuffers2: return .State;
			case vkCmdSetDepthTestEnable: return .State;
			case vkCmdSetDepthWriteEnable: return .State;
			case vkCmdSetDepthCompareOp: return .State;
			case vkCmdSetDepthBoundsTestEnable: return .State;
			case vkCmdSetStencilTestEnable: return .State;
			case vkCmdSetStencilOp: return .State;
			case vkCmdSetPatchControlPointsEXT: return .State;
			case vkCmdSetRasterizerDiscardEnable: return .State;
			case vkCmdSetDepthBiasEnable: return .State;
			case vkCmdSetLogicOpEXT: return .State;
			case vkCmdSetPrimitiveRestartEnable: return .State;
			case vkCmdSetTessellationDomainOriginEXT: return .State;
			case vkCmdSetDepthClampEnableEXT: return .State;
			case vkCmdSetPolygonModeEXT: return .State;
			case vkCmdSetRasterizationSamplesEXT: return .State;
			case vkCmdSetSampleMaskEXT: return .State;
			case vkCmdSetAlphaToCoverageEnableEXT: return .State;
			case vkCmdSetAlphaToOneEnableEXT: return .State;
			case vkCmdSetLogicOpEnableEXT: return .State;
			case vkCmdSetColorBlendEnableEXT: return .State;
			case vkCmdSetColorBlendEquationEXT: return .State;
			case vkCmdSetColorWriteMaskEXT: return .State;
			case vkCmdSetRasterizationStreamEXT: return .State;
			case vkCmdSetConservativeRasterizationModeEXT: return .State;
			case vkCmdSetExtraPrimitiveOverestimationSizeEXT: return .State;
			case vkCmdSetDepthClipEnableEXT: return .State;
			case vkCmdSetSampleLocationsEnableEXT: return .State;
			case vkCmdSetColorBlendAdvancedEXT: return .State;
			case vkCmdSetProvokingVertexModeEXT: return .State;
			case vkCmdSetLineRasterizationModeEXT: return .State;
			case vkCmdSetLineStippleEnableEXT: return .State;
			case vkCmdSetDepthClipNegativeOneToOneEXT: return .State;
			case vkCmdSetViewportWScalingEnableNV: return .State;
			case vkCmdSetViewportSwizzleNV: return .State;
			case vkCmdSetCoverageToColorEnableNV: return .State;
			case vkCmdSetCoverageToColorLocationNV: return .State;
			case vkCmdSetCoverageModulationModeNV: return .State;
			case vkCmdSetCoverageModulationTableEnableNV: return .State;
			case vkCmdSetCoverageModulationTableNV: return .State;
			case vkCmdSetShadingRateImageEnableNV: return .State;
			case vkCmdSetCoverageReductionModeNV: return .State;
			case vkCmdSetRepresentativeFragmentTestEnableNV: return .State;
			case vkCmdCopyBuffer2: return .Action;
			case vkCmdCopyImage2: return .Action;
			case vkCmdBlitImage2: return .Action;
			case vkCmdCopyBufferToImage2: return .Action;
			case vkCmdCopyImageToBuffer2: return .Action;
			case vkCmdResolveImage2: return .Action;
			case vkCmdSetFragmentShadingRateKHR: return .State;
			case vkCmdSetFragmentShadingRateEnumNV: return .State;
			case vkCmdSetVertexInputEXT: return .State;
			case vkCmdSetColorWriteEnableEXT: return .State;
			case vkCmdSetEvent2: return .Synchronization;
			case vkCmdResetEvent2: return .Synchronization;
			case vkCmdWaitEvents2: return .Synchronization;
			case vkCmdPipelineBarrier2: return .Synchronization;
			case vkCmdWriteTimestamp2: return .Action;
			case vkCmdWriteBufferMarker2AMD: return .Action;
			case vkCmdDecodeVideoKHR: return .Action;
			case vkCmdBeginVideoCodingKHR: return .Action | .State;
			case vkCmdControlVideoCodingKHR: return .Action;
			case vkCmdEndVideoCodingKHR: return .Action | .State;
			case vkCmdEncodeVideoKHR: return .Action;
			case vkCmdDecompressMemoryNV: return .Action;
			case vkCmdDecompressMemoryIndirectCountNV: return .Action;
			case vkCmdBuildPartitionedAccelerationStructuresNV: return .Action;
			case vkCmdCuLaunchKernelNVX: return .Action;
			case vkCmdBindDescriptorBuffersEXT: return .State;
			case vkCmdSetDescriptorBufferOffsetsEXT: return .State;
			case vkCmdBindDescriptorBufferEmbeddedSamplersEXT: return .State;
			case vkCmdBeginRendering: return .Action | .State;
			case vkCmdEndRendering: return .Action | .State;
			case vkCmdEndRendering2EXT: return .Action | .State;
			case vkCmdBuildMicromapsEXT: return .Action;
			case vkCmdCopyMicromapEXT: return .Action;
			case vkCmdCopyMicromapToMemoryEXT: return .Action;
			case vkCmdCopyMemoryToMicromapEXT: return .Action;
			case vkCmdWriteMicromapsPropertiesEXT: return .Action;
			case vkCmdBindTileMemoryQCOM: return .State;
			case vkCmdOpticalFlowExecuteNV: return .Action;
			case vkCmdSetDepthBias2EXT: return .State;
			case vkCmdBindShadersEXT: return .State;
			case vkCmdBindDescriptorSets2: return .State;
			case vkCmdPushConstants2: return .State;
			case vkCmdPushDescriptorSet2: return .State;
			case vkCmdPushDescriptorSetWithTemplate2: return .State;
			case vkCmdSetDescriptorBufferOffsets2EXT: return .State;
			case vkCmdBindDescriptorBufferEmbeddedSamplers2EXT: return .State;
			case vkCmdSetRenderingAttachmentLocations: return .State;
			case vkCmdSetRenderingInputAttachmentIndices: return .State;
			case vkCmdSetDepthClampRangeEXT: return .State;
			case vkCmdConvertCooperativeVectorMatrixNV: return .Action;
			case vkCmdDispatchTileQCOM: return .Action;
			case vkCmdBeginPerTileExecutionQCOM: return .State;
			case vkCmdEndPerTileExecutionQCOM: return .State;
			case vkCmdCopyTensorARM: return .Action;
			case vkCmdDispatchDataGraphARM: return .Action;
			default: return 0;
			}
		}
	}
}

enum VulkanFeature
{
	case robustBufferAccess;
	case storageBuffer16BitAccess;
	case multiview;
	case shaderDrawParameters;
	case subgroupBroadcastDynamicId;
	case samplerMirrorClampToEdge;
	case drawIndirectCount;
	case storageBuffer8BitAccess;
	case shaderInt64;
	case descriptorIndexing;
	case shaderSampledImageArrayDynamicIndexing;
	case shaderStorageBufferArrayDynamicIndexing;
	case shaderUniformTexelBufferArrayDynamicIndexing;
	case shaderStorageTexelBufferArrayDynamicIndexing;
	case shaderSampledImageArrayNonUniformIndexing;
	case shaderStorageBufferArrayNonUniformIndexing;
	case shaderUniformTexelBufferArrayNonUniformIndexing;
	case descriptorBindingSampledImageUpdateAfterBind;
	case descriptorBindingStorageImageUpdateAfterBind;
	case descriptorBindingStorageBufferUpdateAfterBind;
	case descriptorBindingUniformTexelBufferUpdateAfterBind;
	case descriptorBindingStorageTexelBufferUpdateAfterBind;
	case descriptorBindingUpdateUnusedWhilePending;
	case descriptorBindingPartiallyBound;
	case runtimeDescriptorArray;
	case shaderOutputViewportIndex;
	case shaderOutputLayer;
	case samplerFilterMinmax;
	case imagelessFramebuffer;
	case uniformBufferStandardLayout;
	case shaderSubgroupExtendedTypes;
	case separateDepthStencilLayouts;
	case hostQueryReset;
	case timelineSemaphore;
	case shaderTerminateInvocation;
	case shaderDemoteToHelperInvocation;
	case privateData;
	case pipelineCreationCacheControl;
	case synchronization2;
	case shaderZeroInitializeWorkgroupMemory;
	case robustImageAccess;
	case subgroupSizeControl;
	case computeFullSubgroups;
	case dynamicRendering;
	case shaderIntegerDotProduct;
	case maintenance4;
	case vulkanMemoryModel;
	case vulkanMemoryModelDeviceScope;
	case inlineUniformBlock;
	case bufferDeviceAddress;
	case descriptorBindingInlineUniformBlockUpdateAfterBind;
	case fullDrawIndexUint32;
	case imageCubeArray;
	case independentBlend;
	case sampleRateShading;
	case drawIndirectFirstInstance;
	case depthClamp;
	case depthBiasClamp;
	case samplerAnisotropy;
	case fragmentStoresAndAtomics;
	case shaderStorageImageExtendedFormats;
	case shaderUniformBufferArrayDynamicIndexing;
	case shaderStorageImageArrayDynamicIndexing;
	case shaderImageGatherExtended;
	case shaderInt16;
	case largePoints;
	case samplerYcbcrConversion;
	case variablePointers;
	case variablePointersStorageBuffer;
	case scalarBlockLayout;
	case shaderInt8;
	case globalPriorityQuery;
	case shaderSubgroupRotate;
	case shaderSubgroupRotateClustered;
	case shaderFloatControls2;
	case shaderExpectAssume;
	case bresenhamLines;
	case vertexAttributeInstanceRateDivisor;
	case indexTypeUint8;
	case maintenance5;
	case pushDescriptor;
	case dynamicRenderingLocalRead;
	case maintenance6;
	case pipelineProtectedAccess;
	case pipelineRobustness;
	case transformFeedback;
	case cornerSampledImage;
	case textureCompressionASTC_HDR;
	case conditionalRendering;
	case shaderFloat16;
	case depthClipEnable;
	case relaxedLineRasterization;
	case performanceCounterQueryPools;
	case shaderBFloat16Type;
	case shaderBFloat16CooperativeMatrix;
	case shaderBFloat16DotProduct;
	case accelerationStructure;
	case descriptorBindingAccelerationStructureUpdateAfterBind;
	case rayTracingPipeline;
	case rayTracingPipelineTraceRaysIndirect;
	case rayTraversalPrimitiveCulling;
	case rayQuery;
	case shaderSMBuiltins;
	case shadingRateImage;
	case representativeFragmentTest;
	case shaderBufferInt64Atomics;
	case shaderSubgroupClock;
	case computeDerivativeGroupQuads;
	case computeDerivativeGroupLinear;
	case meshShader;
	case imageFootprint;
	case exclusiveScissor;
	case shaderIntegerFunctions2;
	case fragmentDensityMap;
	case pipelineFragmentShadingRate;
	case deviceCoherentMemory;
	case shaderImageInt64Atomics;
	case shaderQuadControl;
	case memoryPriority;
	case dedicatedAllocationImageAliasing;
	case presentWait;
	case cooperativeMatrix;
	case coverageReductionMode;
	case fragmentShaderSampleInterlock;
	case fragmentShaderPixelInterlock;
	case fragmentShaderShadingRateInterlock;
	case ycbcrImageArrays;
	case provokingVertexLast;
	case rectangularLines;
	case smoothLines;
	case stippledRectangularLines;
	case stippledBresenhamLines;
	case stippledSmoothLines;
	case shaderBufferFloat32Atomics;
	case shaderBufferFloat32AtomicAdd;
	case shaderBufferFloat64Atomics;
	case shaderBufferFloat64AtomicAdd;
	case shaderSharedFloat32Atomics;
	case shaderSharedFloat32AtomicAdd;
	case shaderSharedFloat64Atomics;
	case shaderSharedFloat64AtomicAdd;
	case shaderImageFloat32Atomics;
	case shaderImageFloat32AtomicAdd;
	case extendedDynamicState;
	case pipelineExecutableInfo;
	case hostImageCopy;
	case memoryMapPlaced;
	case shaderBufferFloat16Atomics;
	case shaderBufferFloat16AtomicAdd;
	case shaderBufferFloat16AtomicMinMax;
	case shaderBufferFloat32AtomicMinMax;
	case shaderBufferFloat64AtomicMinMax;
	case shaderSharedFloat16Atomics;
	case shaderSharedFloat16AtomicAdd;
	case shaderSharedFloat16AtomicMinMax;
	case shaderSharedFloat32AtomicMinMax;
	case shaderSharedFloat64AtomicMinMax;
	case shaderImageFloat32AtomicMinMax;
	case swapchainMaintenance1;
	case deviceGeneratedCommands;
	case inheritedViewportScissor2D;
	case texelBufferAlignment;
	case depthBiasControl;
	case deviceMemoryReport;
	case robustBufferAccess2;
	case robustImageAccess2;
	case nullDescriptor;
	case customBorderColors;
	case presentBarrier;
	case presentId;
	case diagnosticsConfig;
	case tileShading;
	case tileShadingFragmentStage;
	case tileShadingPerTileDispatch;
	case tileShadingAtomicOps;
	case tileShadingColorAttachments;
	case tileShadingPerTileDraw;
	case tileShadingApron;
	case tileShadingDepthAttachments;
	case tileShadingStencilAttachments;
	case tileShadingInputAttachments;
	case tileShadingSampledAttachments;
	case descriptorBuffer;
	case graphicsPipelineLibrary;
	case shaderEarlyAndLateFragmentTests;
	case fragmentShaderBarycentric;
	case shaderSubgroupUniformControlFlow;
	case fragmentShadingRateEnums;
	case rayTracingMotionBlur;
	case taskShader;
	case primitiveFragmentShadingRate;
	case ycbcr2plane444Formats;
	case fragmentDensityMapDeferred;
	case workgroupMemoryExplicitLayout;
	case imageCompressionControl;
	case attachmentFeedbackLoopLayout;
	case formatA4R4G4B4;
	case deviceFault;
	case formatRgba10x6WithoutYCbCrSampler;
	case mutableDescriptorType;
	case vertexInputDynamicState;
	case reportAddressBinding;
	case depthClipControl;
	case primitiveTopologyListRestart;
	case presentModeFifoLatestReady;
	case subpassShading;
	case invocationMask;
	case externalMemoryRDMA;
	case pipelinePropertiesIdentifier;
	case frameBoundary;
	case multisampledRenderToSingleSampled;
	case extendedDynamicState2;
	case colorWriteEnable;
	case primitivesGeneratedQuery;
	case rayTracingMaintenance1;
	case minLod;
	case multiDraw;
	case image2DViewOf3D;
	case shaderTileImageColorReadAccess;
	case micromap;
	case clustercullingShader;
	case borderColorSwizzle;
	case pageableDeviceLocalMemory;
	case schedulingControls;
	case imageSlicedViewOf3D;
	case descriptorSetHostMapping;
	case depthClampZeroOne;
	case nonSeamlessCubeMap;
	case renderPassStriped;
	case fragmentDensityMapOffset;
	case indirectCopy;
	case memoryDecompression;
	case deviceGeneratedCompute;
	case spheres;
	case linearSweptSpheres;
	case linearColorAttachment;
	case shaderMaximalReconvergence;
	case imageCompressionControlSwapchain;
	case textureSampleWeighted;
	case textureBlockMatch;
	case textureBoxFilter;
	case nestedCommandBuffer;
	case tessellationShader;
	case fillModeNonSolid;
	case alphaToOne;
	case logicOp;
	case geometryStreams;
	case subpassMergeFeedback;
	case tensors;
	case shaderModuleIdentifier;
	case opticalFlow;
	case legacyDithering;
	case antiLag;
	case presentId2;
	case presentWait2;
	case rayTracingPositionFetch;
	case shaderObject;
	case pipelineBinaries;
	case tileProperties;
	case amigoProfiling;
	case multiviewPerViewViewports;
	case rayTracingInvocationReorder;
	case cooperativeVector;
	case extendedSparseAddressSpace;
	case legacyVertexAttributes;
	case shaderCoreBuiltins;
	case pipelineLibraryGroupHandles;
	case dynamicRenderingUnusedAttachments;
	case dataGraph;
	case multiviewPerViewRenderAreas;
	case videoEncodeAV1;
	case videoDecodeVP9;
	case videoMaintenance1;
	case perStageDescriptorSet;
	case textureBlockMatch2;
	case selectableCubicWeights;
	case ycbcrDegamma;
	case cubicRangeClamp;
	case attachmentFeedbackLoopDynamicState;
	case unifiedImageLayouts;
	case descriptorPoolOverallocation;
	case tileMemoryHeap;
	case videoEncodeIntraRefresh;
	case videoEncodeQuantizationMap;
	case shaderRawAccessChains;
	case shaderRelaxedExtendedInstruction;
	case commandBufferInheritance;
	case maintenance7;
	case shaderFloat16VectorAtomics;
	case shaderReplicatedComposites;
	case shaderFloat8;
	case rayTracingValidation;
	case clusterAccelerationStructure;
	case partitionedAccelerationStructure;
	case maintenance8;
	case imageAlignmentControl;
	case depthClampControl;
	case maintenance9;
	case videoMaintenance2;
	case hdrVivid;
	case cooperativeMatrixWorkgroupScope;
	case cooperativeMatrixFlexibleDimensions;
	case cooperativeMatrixReductions;
	case cooperativeMatrixConversions;
	case cooperativeMatrixPerElementOperations;
	case cooperativeMatrixTensorAddressing;
	case cooperativeMatrixBlockLoads;
	case pipelineOpacityMicromap;
	case vertexAttributeRobustness;
	case formatPack;
	case fragmentDensityMapLayered;
	case zeroInitializeDeviceMemory;
	case pipelineCacheIncrementalMode;

	public VulkanApi Api
	{
		get
		{
			switch (this)
			{
			case robustBufferAccess: return VulkanApi.ApiVersion(.VK_VERSION_1_0);
			case storageBuffer16BitAccess: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case multiview: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case shaderDrawParameters: return VulkanApi.ApiVersion(.VK_VERSION_1_1);
			case subgroupBroadcastDynamicId: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case samplerMirrorClampToEdge: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case drawIndirectCount: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case storageBuffer8BitAccess: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderInt64: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderSampledImageArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderStorageBufferArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderUniformTexelBufferArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderStorageTexelBufferArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderSampledImageArrayNonUniformIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderStorageBufferArrayNonUniformIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderUniformTexelBufferArrayNonUniformIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingSampledImageUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingStorageImageUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingStorageBufferUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingUniformTexelBufferUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingStorageTexelBufferUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingUpdateUnusedWhilePending: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case descriptorBindingPartiallyBound: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case runtimeDescriptorArray: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderOutputViewportIndex: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderOutputLayer: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case samplerFilterMinmax: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case imagelessFramebuffer: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case uniformBufferStandardLayout: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderSubgroupExtendedTypes: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case separateDepthStencilLayouts: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case hostQueryReset: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case timelineSemaphore: return VulkanApi.ApiVersion(.VK_VERSION_1_2);
			case shaderTerminateInvocation: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case shaderDemoteToHelperInvocation: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case privateData: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case pipelineCreationCacheControl: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case synchronization2: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case shaderZeroInitializeWorkgroupMemory: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case robustImageAccess: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case subgroupSizeControl: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case computeFullSubgroups: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case dynamicRendering: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case shaderIntegerDotProduct: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case maintenance4: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case vulkanMemoryModel: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case vulkanMemoryModelDeviceScope: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case inlineUniformBlock: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case bufferDeviceAddress: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case descriptorBindingInlineUniformBlockUpdateAfterBind: return VulkanApi.ApiVersion(.VK_VERSION_1_3);
			case fullDrawIndexUint32: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case imageCubeArray: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case independentBlend: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case sampleRateShading: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case drawIndirectFirstInstance: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case depthClamp: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case depthBiasClamp: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case samplerAnisotropy: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case fragmentStoresAndAtomics: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderStorageImageExtendedFormats: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderUniformBufferArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderStorageImageArrayDynamicIndexing: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderImageGatherExtended: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderInt16: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case largePoints: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case samplerYcbcrConversion: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case variablePointers: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case variablePointersStorageBuffer: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case scalarBlockLayout: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderInt8: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case globalPriorityQuery: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderSubgroupRotate: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderSubgroupRotateClustered: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderFloatControls2: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case shaderExpectAssume: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case bresenhamLines: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case vertexAttributeInstanceRateDivisor: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case indexTypeUint8: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case maintenance5: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case pushDescriptor: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case dynamicRenderingLocalRead: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case maintenance6: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case pipelineProtectedAccess: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case pipelineRobustness: return VulkanApi.ApiVersion(.VK_VERSION_1_4);
			case transformFeedback: return VulkanApi.Extension(.VK_EXT_transform_feedback);
			case cornerSampledImage: return VulkanApi.Extension(.VK_NV_corner_sampled_image);
			case textureCompressionASTC_HDR: return VulkanApi.Extension(.VK_EXT_texture_compression_astc_hdr);
			case conditionalRendering: return VulkanApi.Extension(.VK_EXT_conditional_rendering);
			case shaderFloat16: return VulkanApi.Extension(.VK_KHR_shader_float16_int8);
			case depthClipEnable: return VulkanApi.Extension(.VK_EXT_depth_clip_enable);
			case relaxedLineRasterization: return VulkanApi.Extension(.VK_IMG_relaxed_line_rasterization);
			case performanceCounterQueryPools: return VulkanApi.Extension(.VK_KHR_performance_query);
			case shaderBFloat16Type: return VulkanApi.Extension(.VK_KHR_shader_bfloat16);
			case shaderBFloat16CooperativeMatrix: return VulkanApi.Extension(.VK_KHR_shader_bfloat16);
			case shaderBFloat16DotProduct: return VulkanApi.Extension(.VK_KHR_shader_bfloat16);
			case accelerationStructure: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			case descriptorBindingAccelerationStructureUpdateAfterBind: return VulkanApi.Extension(.VK_KHR_acceleration_structure);
			case rayTracingPipeline: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			case rayTracingPipelineTraceRaysIndirect: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			case rayTraversalPrimitiveCulling: return VulkanApi.Extension(.VK_KHR_ray_tracing_pipeline);
			case rayQuery: return VulkanApi.Extension(.VK_KHR_ray_query);
			case shaderSMBuiltins: return VulkanApi.Extension(.VK_NV_shader_sm_builtins);
			case shadingRateImage: return VulkanApi.Extension(.VK_NV_shading_rate_image);
			case representativeFragmentTest: return VulkanApi.Extension(.VK_NV_representative_fragment_test);
			case shaderBufferInt64Atomics: return VulkanApi.Extension(.VK_KHR_shader_atomic_int64);
			case shaderSubgroupClock: return VulkanApi.Extension(.VK_KHR_shader_clock);
			case computeDerivativeGroupQuads: return VulkanApi.Extension(.VK_NV_compute_shader_derivatives);
			case computeDerivativeGroupLinear: return VulkanApi.Extension(.VK_NV_compute_shader_derivatives);
			case meshShader: return VulkanApi.Extension(.VK_NV_mesh_shader);
			case imageFootprint: return VulkanApi.Extension(.VK_NV_shader_image_footprint);
			case exclusiveScissor: return VulkanApi.Extension(.VK_NV_scissor_exclusive);
			case shaderIntegerFunctions2: return VulkanApi.Extension(.VK_INTEL_shader_integer_functions2);
			case fragmentDensityMap: return VulkanApi.Extension(.VK_EXT_fragment_density_map);
			case pipelineFragmentShadingRate: return VulkanApi.Extension(.VK_KHR_fragment_shading_rate);
			case deviceCoherentMemory: return VulkanApi.Extension(.VK_AMD_device_coherent_memory);
			case shaderImageInt64Atomics: return VulkanApi.Extension(.VK_EXT_shader_image_atomic_int64);
			case shaderQuadControl: return VulkanApi.Extension(.VK_KHR_shader_quad_control);
			case memoryPriority: return VulkanApi.Extension(.VK_EXT_memory_priority);
			case dedicatedAllocationImageAliasing: return VulkanApi.Extension(.VK_NV_dedicated_allocation_image_aliasing);
			case presentWait: return VulkanApi.Extension(.VK_KHR_present_wait);
			case cooperativeMatrix: return VulkanApi.Extension(.VK_NV_cooperative_matrix);
			case coverageReductionMode: return VulkanApi.Extension(.VK_NV_coverage_reduction_mode);
			case fragmentShaderSampleInterlock: return VulkanApi.Extension(.VK_EXT_fragment_shader_interlock);
			case fragmentShaderPixelInterlock: return VulkanApi.Extension(.VK_EXT_fragment_shader_interlock);
			case fragmentShaderShadingRateInterlock: return VulkanApi.Extension(.VK_EXT_fragment_shader_interlock);
			case ycbcrImageArrays: return VulkanApi.Extension(.VK_EXT_ycbcr_image_arrays);
			case provokingVertexLast: return VulkanApi.Extension(.VK_EXT_provoking_vertex);
			case rectangularLines: return VulkanApi.Extension(.VK_EXT_line_rasterization);
			case smoothLines: return VulkanApi.Extension(.VK_EXT_line_rasterization);
			case stippledRectangularLines: return VulkanApi.Extension(.VK_EXT_line_rasterization);
			case stippledBresenhamLines: return VulkanApi.Extension(.VK_EXT_line_rasterization);
			case stippledSmoothLines: return VulkanApi.Extension(.VK_EXT_line_rasterization);
			case shaderBufferFloat32Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderBufferFloat32AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderBufferFloat64Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderBufferFloat64AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderSharedFloat32Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderSharedFloat32AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderSharedFloat64Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderSharedFloat64AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderImageFloat32Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case shaderImageFloat32AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float);
			case extendedDynamicState: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state);
			case pipelineExecutableInfo: return VulkanApi.Extension(.VK_KHR_pipeline_executable_properties);
			case hostImageCopy: return VulkanApi.Extension(.VK_EXT_host_image_copy);
			case memoryMapPlaced: return VulkanApi.Extension(.VK_EXT_map_memory_placed);
			case shaderBufferFloat16Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderBufferFloat16AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderBufferFloat16AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderBufferFloat32AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderBufferFloat64AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderSharedFloat16Atomics: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderSharedFloat16AtomicAdd: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderSharedFloat16AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderSharedFloat32AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderSharedFloat64AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case shaderImageFloat32AtomicMinMax: return VulkanApi.Extension(.VK_EXT_shader_atomic_float2);
			case swapchainMaintenance1: return VulkanApi.Extension(.VK_EXT_swapchain_maintenance1);
			case deviceGeneratedCommands: return VulkanApi.Extension(.VK_NV_device_generated_commands);
			case inheritedViewportScissor2D: return VulkanApi.Extension(.VK_NV_inherited_viewport_scissor);
			case texelBufferAlignment: return VulkanApi.Extension(.VK_EXT_texel_buffer_alignment);
			case depthBiasControl: return VulkanApi.Extension(.VK_EXT_depth_bias_control);
			case deviceMemoryReport: return VulkanApi.Extension(.VK_EXT_device_memory_report);
			case robustBufferAccess2: return VulkanApi.Extension(.VK_EXT_robustness2);
			case robustImageAccess2: return VulkanApi.Extension(.VK_EXT_robustness2);
			case nullDescriptor: return VulkanApi.Extension(.VK_EXT_robustness2);
			case customBorderColors: return VulkanApi.Extension(.VK_EXT_custom_border_color);
			case presentBarrier: return VulkanApi.Extension(.VK_NV_present_barrier);
			case presentId: return VulkanApi.Extension(.VK_KHR_present_id);
			case diagnosticsConfig: return VulkanApi.Extension(.VK_NV_device_diagnostics_config);
			case tileShading: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingFragmentStage: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingPerTileDispatch: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingAtomicOps: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingColorAttachments: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingPerTileDraw: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingApron: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingDepthAttachments: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingStencilAttachments: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingInputAttachments: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case tileShadingSampledAttachments: return VulkanApi.Extension(.VK_QCOM_tile_shading);
			case descriptorBuffer: return VulkanApi.Extension(.VK_EXT_descriptor_buffer);
			case graphicsPipelineLibrary: return VulkanApi.Extension(.VK_EXT_graphics_pipeline_library);
			case shaderEarlyAndLateFragmentTests: return VulkanApi.Extension(.VK_AMD_shader_early_and_late_fragment_tests);
			case fragmentShaderBarycentric: return VulkanApi.Extension(.VK_KHR_fragment_shader_barycentric);
			case shaderSubgroupUniformControlFlow: return VulkanApi.Extension(.VK_KHR_shader_subgroup_uniform_control_flow);
			case fragmentShadingRateEnums: return VulkanApi.Extension(.VK_NV_fragment_shading_rate_enums);
			case rayTracingMotionBlur: return VulkanApi.Extension(.VK_NV_ray_tracing_motion_blur);
			case taskShader: return VulkanApi.Extension(.VK_EXT_mesh_shader);
			case primitiveFragmentShadingRate: return VulkanApi.Extension(.VK_EXT_mesh_shader);
			case ycbcr2plane444Formats: return VulkanApi.Extension(.VK_EXT_ycbcr_2plane_444_formats);
			case fragmentDensityMapDeferred: return VulkanApi.Extension(.VK_EXT_fragment_density_map2);
			case workgroupMemoryExplicitLayout: return VulkanApi.Extension(.VK_KHR_workgroup_memory_explicit_layout);
			case imageCompressionControl: return VulkanApi.Extension(.VK_EXT_image_compression_control);
			case attachmentFeedbackLoopLayout: return VulkanApi.Extension(.VK_EXT_attachment_feedback_loop_layout);
			case formatA4R4G4B4: return VulkanApi.Extension(.VK_EXT_4444_formats);
			case deviceFault: return VulkanApi.Extension(.VK_EXT_device_fault);
			case formatRgba10x6WithoutYCbCrSampler: return VulkanApi.Extension(.VK_EXT_rgba10x6_formats);
			case mutableDescriptorType: return VulkanApi.Extension(.VK_VALVE_mutable_descriptor_type);
			case vertexInputDynamicState: return VulkanApi.Extension(.VK_EXT_vertex_input_dynamic_state);
			case reportAddressBinding: return VulkanApi.Extension(.VK_EXT_device_address_binding_report);
			case depthClipControl: return VulkanApi.Extension(.VK_EXT_depth_clip_control);
			case primitiveTopologyListRestart: return VulkanApi.Extension(.VK_EXT_primitive_topology_list_restart);
			case presentModeFifoLatestReady: return VulkanApi.Extension(.VK_EXT_present_mode_fifo_latest_ready);
			case subpassShading: return VulkanApi.Extension(.VK_HUAWEI_subpass_shading);
			case invocationMask: return VulkanApi.Extension(.VK_HUAWEI_invocation_mask);
			case externalMemoryRDMA: return VulkanApi.Extension(.VK_NV_external_memory_rdma);
			case pipelinePropertiesIdentifier: return VulkanApi.Extension(.VK_EXT_pipeline_properties);
			case frameBoundary: return VulkanApi.Extension(.VK_EXT_frame_boundary);
			case multisampledRenderToSingleSampled: return VulkanApi.Extension(.VK_EXT_multisampled_render_to_single_sampled);
			case extendedDynamicState2: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state2);
			case colorWriteEnable: return VulkanApi.Extension(.VK_EXT_color_write_enable);
			case primitivesGeneratedQuery: return VulkanApi.Extension(.VK_EXT_primitives_generated_query);
			case rayTracingMaintenance1: return VulkanApi.Extension(.VK_KHR_ray_tracing_maintenance1);
			case minLod: return VulkanApi.Extension(.VK_EXT_image_view_min_lod);
			case multiDraw: return VulkanApi.Extension(.VK_EXT_multi_draw);
			case image2DViewOf3D: return VulkanApi.Extension(.VK_EXT_image_2d_view_of_3d);
			case shaderTileImageColorReadAccess: return VulkanApi.Extension(.VK_EXT_shader_tile_image);
			case micromap: return VulkanApi.Extension(.VK_EXT_opacity_micromap);
			case clustercullingShader: return VulkanApi.Extension(.VK_HUAWEI_cluster_culling_shader);
			case borderColorSwizzle: return VulkanApi.Extension(.VK_EXT_border_color_swizzle);
			case pageableDeviceLocalMemory: return VulkanApi.Extension(.VK_EXT_pageable_device_local_memory);
			case schedulingControls: return VulkanApi.Extension(.VK_ARM_scheduling_controls);
			case imageSlicedViewOf3D: return VulkanApi.Extension(.VK_EXT_image_sliced_view_of_3d);
			case descriptorSetHostMapping: return VulkanApi.Extension(.VK_VALVE_descriptor_set_host_mapping);
			case depthClampZeroOne: return VulkanApi.Extension(.VK_EXT_depth_clamp_zero_one);
			case nonSeamlessCubeMap: return VulkanApi.Extension(.VK_EXT_non_seamless_cube_map);
			case renderPassStriped: return VulkanApi.Extension(.VK_ARM_render_pass_striped);
			case fragmentDensityMapOffset: return VulkanApi.Extension(.VK_QCOM_fragment_density_map_offset);
			case indirectCopy: return VulkanApi.Extension(.VK_NV_copy_memory_indirect);
			case memoryDecompression: return VulkanApi.Extension(.VK_NV_memory_decompression);
			case deviceGeneratedCompute: return VulkanApi.Extension(.VK_NV_device_generated_commands_compute);
			case spheres: return VulkanApi.Extension(.VK_NV_ray_tracing_linear_swept_spheres);
			case linearSweptSpheres: return VulkanApi.Extension(.VK_NV_ray_tracing_linear_swept_spheres);
			case linearColorAttachment: return VulkanApi.Extension(.VK_NV_linear_color_attachment);
			case shaderMaximalReconvergence: return VulkanApi.Extension(.VK_KHR_shader_maximal_reconvergence);
			case imageCompressionControlSwapchain: return VulkanApi.Extension(.VK_EXT_image_compression_control_swapchain);
			case textureSampleWeighted: return VulkanApi.Extension(.VK_QCOM_image_processing);
			case textureBlockMatch: return VulkanApi.Extension(.VK_QCOM_image_processing);
			case textureBoxFilter: return VulkanApi.Extension(.VK_QCOM_image_processing);
			case nestedCommandBuffer: return VulkanApi.Extension(.VK_EXT_nested_command_buffer);
			case tessellationShader: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state3);
			case fillModeNonSolid: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state3);
			case alphaToOne: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state3);
			case logicOp: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state3);
			case geometryStreams: return VulkanApi.Extension(.VK_EXT_extended_dynamic_state3);
			case subpassMergeFeedback: return VulkanApi.Extension(.VK_EXT_subpass_merge_feedback);
			case tensors: return VulkanApi.Extension(.VK_ARM_tensors);
			case shaderModuleIdentifier: return VulkanApi.Extension(.VK_EXT_shader_module_identifier);
			case opticalFlow: return VulkanApi.Extension(.VK_NV_optical_flow);
			case legacyDithering: return VulkanApi.Extension(.VK_EXT_legacy_dithering);
			case antiLag: return VulkanApi.Extension(.VK_AMD_anti_lag);
			case presentId2: return VulkanApi.Extension(.VK_KHR_present_id2);
			case presentWait2: return VulkanApi.Extension(.VK_KHR_present_wait2);
			case rayTracingPositionFetch: return VulkanApi.Extension(.VK_KHR_ray_tracing_position_fetch);
			case shaderObject: return VulkanApi.Extension(.VK_EXT_shader_object);
			case pipelineBinaries: return VulkanApi.Extension(.VK_KHR_pipeline_binary);
			case tileProperties: return VulkanApi.Extension(.VK_QCOM_tile_properties);
			case amigoProfiling: return VulkanApi.Extension(.VK_SEC_amigo_profiling);
			case multiviewPerViewViewports: return VulkanApi.Extension(.VK_QCOM_multiview_per_view_viewports);
			case rayTracingInvocationReorder: return VulkanApi.Extension(.VK_NV_ray_tracing_invocation_reorder);
			case cooperativeVector: return VulkanApi.Extension(.VK_NV_cooperative_vector);
			case extendedSparseAddressSpace: return VulkanApi.Extension(.VK_NV_extended_sparse_address_space);
			case legacyVertexAttributes: return VulkanApi.Extension(.VK_EXT_legacy_vertex_attributes);
			case shaderCoreBuiltins: return VulkanApi.Extension(.VK_ARM_shader_core_builtins);
			case pipelineLibraryGroupHandles: return VulkanApi.Extension(.VK_EXT_pipeline_library_group_handles);
			case dynamicRenderingUnusedAttachments: return VulkanApi.Extension(.VK_EXT_dynamic_rendering_unused_attachments);
			case dataGraph: return VulkanApi.Extension(.VK_ARM_data_graph);
			case multiviewPerViewRenderAreas: return VulkanApi.Extension(.VK_QCOM_multiview_per_view_render_areas);
			case videoEncodeAV1: return VulkanApi.Extension(.VK_KHR_video_encode_av1);
			case videoDecodeVP9: return VulkanApi.Extension(.VK_KHR_video_decode_vp9);
			case videoMaintenance1: return VulkanApi.Extension(.VK_KHR_video_maintenance1);
			case perStageDescriptorSet: return VulkanApi.Extension(.VK_NV_per_stage_descriptor_set);
			case textureBlockMatch2: return VulkanApi.Extension(.VK_QCOM_image_processing2);
			case selectableCubicWeights: return VulkanApi.Extension(.VK_QCOM_filter_cubic_weights);
			case ycbcrDegamma: return VulkanApi.Extension(.VK_QCOM_ycbcr_degamma);
			case cubicRangeClamp: return VulkanApi.Extension(.VK_QCOM_filter_cubic_clamp);
			case attachmentFeedbackLoopDynamicState: return VulkanApi.Extension(.VK_EXT_attachment_feedback_loop_dynamic_state);
			case unifiedImageLayouts: return VulkanApi.Extension(.VK_KHR_unified_image_layouts);
			case descriptorPoolOverallocation: return VulkanApi.Extension(.VK_NV_descriptor_pool_overallocation);
			case tileMemoryHeap: return VulkanApi.Extension(.VK_QCOM_tile_memory_heap);
			case videoEncodeIntraRefresh: return VulkanApi.Extension(.VK_KHR_video_encode_intra_refresh);
			case videoEncodeQuantizationMap: return VulkanApi.Extension(.VK_KHR_video_encode_quantization_map);
			case shaderRawAccessChains: return VulkanApi.Extension(.VK_NV_raw_access_chains);
			case shaderRelaxedExtendedInstruction: return VulkanApi.Extension(.VK_KHR_shader_relaxed_extended_instruction);
			case commandBufferInheritance: return VulkanApi.Extension(.VK_NV_command_buffer_inheritance);
			case maintenance7: return VulkanApi.Extension(.VK_KHR_maintenance7);
			case shaderFloat16VectorAtomics: return VulkanApi.Extension(.VK_NV_shader_atomic_float16_vector);
			case shaderReplicatedComposites: return VulkanApi.Extension(.VK_EXT_shader_replicated_composites);
			case shaderFloat8: return VulkanApi.Extension(.VK_EXT_shader_float8);
			case rayTracingValidation: return VulkanApi.Extension(.VK_NV_ray_tracing_validation);
			case clusterAccelerationStructure: return VulkanApi.Extension(.VK_NV_cluster_acceleration_structure);
			case partitionedAccelerationStructure: return VulkanApi.Extension(.VK_NV_partitioned_acceleration_structure);
			case maintenance8: return VulkanApi.Extension(.VK_KHR_maintenance8);
			case imageAlignmentControl: return VulkanApi.Extension(.VK_MESA_image_alignment_control);
			case depthClampControl: return VulkanApi.Extension(.VK_EXT_depth_clamp_control);
			case maintenance9: return VulkanApi.Extension(.VK_KHR_maintenance9);
			case videoMaintenance2: return VulkanApi.Extension(.VK_KHR_video_maintenance2);
			case hdrVivid: return VulkanApi.Extension(.VK_HUAWEI_hdr_vivid);
			case cooperativeMatrixWorkgroupScope: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixFlexibleDimensions: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixReductions: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixConversions: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixPerElementOperations: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixTensorAddressing: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case cooperativeMatrixBlockLoads: return VulkanApi.Extension(.VK_NV_cooperative_matrix2);
			case pipelineOpacityMicromap: return VulkanApi.Extension(.VK_ARM_pipeline_opacity_micromap);
			case vertexAttributeRobustness: return VulkanApi.Extension(.VK_EXT_vertex_attribute_robustness);
			case formatPack: return VulkanApi.Extension(.VK_ARM_format_pack);
			case fragmentDensityMapLayered: return VulkanApi.Extension(.VK_VALVE_fragment_density_map_layered);
			case zeroInitializeDeviceMemory: return VulkanApi.Extension(.VK_EXT_zero_initialize_device_memory);
			case pipelineCacheIncrementalMode: return VulkanApi.Extension(.VK_SEC_pipeline_cache_incremental_mode);
			}
		}
	}

	public VkStructureType Struct
	{
		get
		{
			switch (this)
			{
			case robustBufferAccess: return .VkPhysicalDeviceFeatures2;
			case storageBuffer16BitAccess: return VkPhysicalDevice16BitStorageFeatures.SType;
			case multiview: return VkPhysicalDeviceMultiviewFeatures.SType;
			case shaderDrawParameters: return VkPhysicalDeviceShaderDrawParametersFeatures.SType;
			case subgroupBroadcastDynamicId: return VkPhysicalDeviceVulkan12Features.SType;
			case samplerMirrorClampToEdge: return VkPhysicalDeviceVulkan12Features.SType;
			case drawIndirectCount: return VkPhysicalDeviceVulkan12Features.SType;
			case storageBuffer8BitAccess: return VkPhysicalDevice8BitStorageFeatures.SType;
			case shaderInt64: return .VkPhysicalDeviceFeatures2;
			case descriptorIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderSampledImageArrayDynamicIndexing: return .VkPhysicalDeviceFeatures2;
			case shaderStorageBufferArrayDynamicIndexing: return .VkPhysicalDeviceFeatures2;
			case shaderUniformTexelBufferArrayDynamicIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderStorageTexelBufferArrayDynamicIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderSampledImageArrayNonUniformIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderStorageBufferArrayNonUniformIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderUniformTexelBufferArrayNonUniformIndexing: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingSampledImageUpdateAfterBind: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingStorageImageUpdateAfterBind: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingStorageBufferUpdateAfterBind: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingUniformTexelBufferUpdateAfterBind: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingStorageTexelBufferUpdateAfterBind: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingUpdateUnusedWhilePending: return VkPhysicalDeviceVulkan12Features.SType;
			case descriptorBindingPartiallyBound: return VkPhysicalDeviceVulkan12Features.SType;
			case runtimeDescriptorArray: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderOutputViewportIndex: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderOutputLayer: return VkPhysicalDeviceVulkan12Features.SType;
			case samplerFilterMinmax: return VkPhysicalDeviceVulkan12Features.SType;
			case imagelessFramebuffer: return VkPhysicalDeviceImagelessFramebufferFeatures.SType;
			case uniformBufferStandardLayout: return VkPhysicalDeviceUniformBufferStandardLayoutFeatures.SType;
			case shaderSubgroupExtendedTypes: return VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.SType;
			case separateDepthStencilLayouts: return VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.SType;
			case hostQueryReset: return VkPhysicalDeviceHostQueryResetFeatures.SType;
			case timelineSemaphore: return VkPhysicalDeviceTimelineSemaphoreFeatures.SType;
			case shaderTerminateInvocation: return VkPhysicalDeviceShaderTerminateInvocationFeatures.SType;
			case shaderDemoteToHelperInvocation: return VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.SType;
			case privateData: return VkPhysicalDevicePrivateDataFeatures.SType;
			case pipelineCreationCacheControl: return VkPhysicalDevicePipelineCreationCacheControlFeatures.SType;
			case synchronization2: return VkPhysicalDeviceSynchronization2Features.SType;
			case shaderZeroInitializeWorkgroupMemory: return VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.SType;
			case robustImageAccess: return VkPhysicalDeviceImageRobustnessFeatures.SType;
			case subgroupSizeControl: return VkPhysicalDeviceSubgroupSizeControlFeatures.SType;
			case computeFullSubgroups: return VkPhysicalDeviceSubgroupSizeControlFeatures.SType;
			case dynamicRendering: return VkPhysicalDeviceDynamicRenderingFeatures.SType;
			case shaderIntegerDotProduct: return VkPhysicalDeviceShaderIntegerDotProductFeatures.SType;
			case maintenance4: return VkPhysicalDeviceMaintenance4Features.SType;
			case vulkanMemoryModel: return VkPhysicalDeviceVulkanMemoryModelFeatures.SType;
			case vulkanMemoryModelDeviceScope: return VkPhysicalDeviceVulkanMemoryModelFeatures.SType;
			case inlineUniformBlock: return VkPhysicalDeviceInlineUniformBlockFeatures.SType;
			case bufferDeviceAddress: return VkPhysicalDeviceBufferDeviceAddressFeatures.SType;
			case descriptorBindingInlineUniformBlockUpdateAfterBind: return VkPhysicalDeviceInlineUniformBlockFeatures.SType;
			case fullDrawIndexUint32: return .VkPhysicalDeviceFeatures2;
			case imageCubeArray: return .VkPhysicalDeviceFeatures2;
			case independentBlend: return .VkPhysicalDeviceFeatures2;
			case sampleRateShading: return .VkPhysicalDeviceFeatures2;
			case drawIndirectFirstInstance: return .VkPhysicalDeviceFeatures2;
			case depthClamp: return .VkPhysicalDeviceFeatures2;
			case depthBiasClamp: return .VkPhysicalDeviceFeatures2;
			case samplerAnisotropy: return .VkPhysicalDeviceFeatures2;
			case fragmentStoresAndAtomics: return .VkPhysicalDeviceFeatures2;
			case shaderStorageImageExtendedFormats: return .VkPhysicalDeviceFeatures2;
			case shaderUniformBufferArrayDynamicIndexing: return .VkPhysicalDeviceFeatures2;
			case shaderStorageImageArrayDynamicIndexing: return .VkPhysicalDeviceFeatures2;
			case shaderImageGatherExtended: return .VkPhysicalDeviceFeatures2;
			case shaderInt16: return .VkPhysicalDeviceFeatures2;
			case largePoints: return .VkPhysicalDeviceFeatures2;
			case samplerYcbcrConversion: return VkPhysicalDeviceVulkan11Features.SType;
			case variablePointers: return VkPhysicalDeviceVulkan11Features.SType;
			case variablePointersStorageBuffer: return VkPhysicalDeviceVulkan11Features.SType;
			case scalarBlockLayout: return VkPhysicalDeviceVulkan12Features.SType;
			case shaderInt8: return VkPhysicalDeviceVulkan12Features.SType;
			case globalPriorityQuery: return VkPhysicalDeviceGlobalPriorityQueryFeatures.SType;
			case shaderSubgroupRotate: return VkPhysicalDeviceShaderSubgroupRotateFeatures.SType;
			case shaderSubgroupRotateClustered: return VkPhysicalDeviceShaderSubgroupRotateFeatures.SType;
			case shaderFloatControls2: return VkPhysicalDeviceShaderFloatControls2Features.SType;
			case shaderExpectAssume: return VkPhysicalDeviceShaderExpectAssumeFeatures.SType;
			case bresenhamLines: return VkPhysicalDeviceLineRasterizationFeatures.SType;
			case vertexAttributeInstanceRateDivisor: return VkPhysicalDeviceVertexAttributeDivisorFeatures.SType;
			case indexTypeUint8: return VkPhysicalDeviceIndexTypeUint8Features.SType;
			case maintenance5: return VkPhysicalDeviceMaintenance5Features.SType;
			case pushDescriptor: return VkPhysicalDeviceVulkan14Features.SType;
			case dynamicRenderingLocalRead: return VkPhysicalDeviceDynamicRenderingLocalReadFeatures.SType;
			case maintenance6: return VkPhysicalDeviceMaintenance6Features.SType;
			case pipelineProtectedAccess: return VkPhysicalDevicePipelineProtectedAccessFeatures.SType;
			case pipelineRobustness: return VkPhysicalDevicePipelineRobustnessFeatures.SType;
			case transformFeedback: return VkPhysicalDeviceTransformFeedbackFeaturesEXT.SType;
			case cornerSampledImage: return VkPhysicalDeviceCornerSampledImageFeaturesNV.SType;
			case textureCompressionASTC_HDR: return VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.SType;
			case conditionalRendering: return VkPhysicalDeviceConditionalRenderingFeaturesEXT.SType;
			case shaderFloat16: return VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.SType;
			case depthClipEnable: return VkPhysicalDeviceDepthClipEnableFeaturesEXT.SType;
			case relaxedLineRasterization: return VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG.SType;
			case performanceCounterQueryPools: return VkPhysicalDevicePerformanceQueryFeaturesKHR.SType;
			case shaderBFloat16Type: return VkPhysicalDeviceShaderBfloat16FeaturesKHR.SType;
			case shaderBFloat16CooperativeMatrix: return VkPhysicalDeviceShaderBfloat16FeaturesKHR.SType;
			case shaderBFloat16DotProduct: return VkPhysicalDeviceShaderBfloat16FeaturesKHR.SType;
			case accelerationStructure: return VkPhysicalDeviceAccelerationStructureFeaturesKHR.SType;
			case descriptorBindingAccelerationStructureUpdateAfterBind: return VkPhysicalDeviceAccelerationStructureFeaturesKHR.SType;
			case rayTracingPipeline: return VkPhysicalDeviceRayTracingPipelineFeaturesKHR.SType;
			case rayTracingPipelineTraceRaysIndirect: return VkPhysicalDeviceRayTracingPipelineFeaturesKHR.SType;
			case rayTraversalPrimitiveCulling: return VkPhysicalDeviceRayTracingPipelineFeaturesKHR.SType;
			case rayQuery: return VkPhysicalDeviceRayQueryFeaturesKHR.SType;
			case shaderSMBuiltins: return VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.SType;
			case shadingRateImage: return VkPhysicalDeviceShadingRateImageFeaturesNV.SType;
			case representativeFragmentTest: return VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.SType;
			case shaderBufferInt64Atomics: return VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.SType;
			case shaderSubgroupClock: return VkPhysicalDeviceShaderClockFeaturesKHR.SType;
			case computeDerivativeGroupQuads: return VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.SType;
			case computeDerivativeGroupLinear: return VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.SType;
			case meshShader: return VkPhysicalDeviceMeshShaderFeaturesNV.SType;
			case imageFootprint: return VkPhysicalDeviceShaderImageFootprintFeaturesNV.SType;
			case exclusiveScissor: return VkPhysicalDeviceExclusiveScissorFeaturesNV.SType;
			case shaderIntegerFunctions2: return VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.SType;
			case fragmentDensityMap: return VkPhysicalDeviceFragmentDensityMapFeaturesEXT.SType;
			case pipelineFragmentShadingRate: return VkPhysicalDeviceFragmentShadingRateFeaturesKHR.SType;
			case deviceCoherentMemory: return VkPhysicalDeviceCoherentMemoryFeaturesAMD.SType;
			case shaderImageInt64Atomics: return VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.SType;
			case shaderQuadControl: return VkPhysicalDeviceShaderQuadControlFeaturesKHR.SType;
			case memoryPriority: return VkPhysicalDeviceMemoryPriorityFeaturesEXT.SType;
			case dedicatedAllocationImageAliasing: return VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.SType;
			case presentWait: return VkPhysicalDevicePresentWaitFeaturesKHR.SType;
			case cooperativeMatrix: return VkPhysicalDeviceCooperativeMatrixFeaturesNV.SType;
			case coverageReductionMode: return VkPhysicalDeviceCoverageReductionModeFeaturesNV.SType;
			case fragmentShaderSampleInterlock: return VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.SType;
			case fragmentShaderPixelInterlock: return VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.SType;
			case fragmentShaderShadingRateInterlock: return VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.SType;
			case ycbcrImageArrays: return VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.SType;
			case provokingVertexLast: return VkPhysicalDeviceProvokingVertexFeaturesEXT.SType;
			case rectangularLines: return VkPhysicalDeviceLineRasterizationFeaturesEXT.SType;
			case smoothLines: return VkPhysicalDeviceLineRasterizationFeaturesEXT.SType;
			case stippledRectangularLines: return VkPhysicalDeviceLineRasterizationFeaturesEXT.SType;
			case stippledBresenhamLines: return VkPhysicalDeviceLineRasterizationFeaturesEXT.SType;
			case stippledSmoothLines: return VkPhysicalDeviceLineRasterizationFeaturesEXT.SType;
			case shaderBufferFloat32Atomics: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderBufferFloat32AtomicAdd: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderBufferFloat64Atomics: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderBufferFloat64AtomicAdd: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderSharedFloat32Atomics: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderSharedFloat32AtomicAdd: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderSharedFloat64Atomics: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderSharedFloat64AtomicAdd: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderImageFloat32Atomics: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case shaderImageFloat32AtomicAdd: return VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.SType;
			case extendedDynamicState: return VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.SType;
			case pipelineExecutableInfo: return VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.SType;
			case hostImageCopy: return VkPhysicalDeviceHostImageCopyFeaturesEXT.SType;
			case memoryMapPlaced: return VkPhysicalDeviceMapMemoryPlacedFeaturesEXT.SType;
			case shaderBufferFloat16Atomics: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderBufferFloat16AtomicAdd: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderBufferFloat16AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderBufferFloat32AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderBufferFloat64AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderSharedFloat16Atomics: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderSharedFloat16AtomicAdd: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderSharedFloat16AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderSharedFloat32AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderSharedFloat64AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case shaderImageFloat32AtomicMinMax: return VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.SType;
			case swapchainMaintenance1: return VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT.SType;
			case deviceGeneratedCommands: return VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.SType;
			case inheritedViewportScissor2D: return VkPhysicalDeviceInheritedViewportScissorFeaturesNV.SType;
			case texelBufferAlignment: return VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.SType;
			case depthBiasControl: return VkPhysicalDeviceDepthBiasControlFeaturesEXT.SType;
			case deviceMemoryReport: return VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.SType;
			case robustBufferAccess2: return VkPhysicalDeviceRobustness2FeaturesEXT.SType;
			case robustImageAccess2: return VkPhysicalDeviceRobustness2FeaturesEXT.SType;
			case nullDescriptor: return VkPhysicalDeviceRobustness2FeaturesEXT.SType;
			case customBorderColors: return VkPhysicalDeviceCustomBorderColorFeaturesEXT.SType;
			case presentBarrier: return VkPhysicalDevicePresentBarrierFeaturesNV.SType;
			case presentId: return VkPhysicalDevicePresentIdFeaturesKHR.SType;
			case diagnosticsConfig: return VkPhysicalDeviceDiagnosticsConfigFeaturesNV.SType;
			case tileShading: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingFragmentStage: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingPerTileDispatch: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingAtomicOps: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingColorAttachments: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingPerTileDraw: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingApron: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingDepthAttachments: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingStencilAttachments: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingInputAttachments: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case tileShadingSampledAttachments: return VkPhysicalDeviceTileShadingFeaturesQCOM.SType;
			case descriptorBuffer: return VkPhysicalDeviceDescriptorBufferFeaturesEXT.SType;
			case graphicsPipelineLibrary: return VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.SType;
			case shaderEarlyAndLateFragmentTests: return VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.SType;
			case fragmentShaderBarycentric: return VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.SType;
			case shaderSubgroupUniformControlFlow: return VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.SType;
			case fragmentShadingRateEnums: return VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.SType;
			case rayTracingMotionBlur: return VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.SType;
			case taskShader: return VkPhysicalDeviceMeshShaderFeaturesEXT.SType;
			case primitiveFragmentShadingRate: return VkPhysicalDeviceFragmentShadingRateFeaturesKHR.SType;
			case ycbcr2plane444Formats: return VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.SType;
			case fragmentDensityMapDeferred: return VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.SType;
			case workgroupMemoryExplicitLayout: return VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.SType;
			case imageCompressionControl: return VkPhysicalDeviceImageCompressionControlFeaturesEXT.SType;
			case attachmentFeedbackLoopLayout: return VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.SType;
			case formatA4R4G4B4: return VkPhysicalDevice4444FormatsFeaturesEXT.SType;
			case deviceFault: return VkPhysicalDeviceFaultFeaturesEXT.SType;
			case formatRgba10x6WithoutYCbCrSampler: return VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.SType;
			case mutableDescriptorType: return VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.SType;
			case vertexInputDynamicState: return VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.SType;
			case reportAddressBinding: return VkPhysicalDeviceAddressBindingReportFeaturesEXT.SType;
			case depthClipControl: return VkPhysicalDeviceDepthClipControlFeaturesEXT.SType;
			case primitiveTopologyListRestart: return VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.SType;
			case presentModeFifoLatestReady: return VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT.SType;
			case subpassShading: return VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.SType;
			case invocationMask: return VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.SType;
			case externalMemoryRDMA: return VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.SType;
			case pipelinePropertiesIdentifier: return VkPhysicalDevicePipelinePropertiesFeaturesEXT.SType;
			case frameBoundary: return VkPhysicalDeviceFrameBoundaryFeaturesEXT.SType;
			case multisampledRenderToSingleSampled: return VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.SType;
			case extendedDynamicState2: return VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.SType;
			case colorWriteEnable: return VkPhysicalDeviceColorWriteEnableFeaturesEXT.SType;
			case primitivesGeneratedQuery: return VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.SType;
			case rayTracingMaintenance1: return VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.SType;
			case minLod: return VkPhysicalDeviceImageViewMinLodFeaturesEXT.SType;
			case multiDraw: return VkPhysicalDeviceMultiDrawFeaturesEXT.SType;
			case image2DViewOf3D: return VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.SType;
			case shaderTileImageColorReadAccess: return VkPhysicalDeviceShaderTileImageFeaturesEXT.SType;
			case micromap: return VkPhysicalDeviceOpacityMicromapFeaturesEXT.SType;
			case clustercullingShader: return VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI.SType;
			case borderColorSwizzle: return VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.SType;
			case pageableDeviceLocalMemory: return VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.SType;
			case schedulingControls: return VkPhysicalDeviceSchedulingControlsFeaturesARM.SType;
			case imageSlicedViewOf3D: return VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT.SType;
			case descriptorSetHostMapping: return VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.SType;
			case depthClampZeroOne: return VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.SType;
			case nonSeamlessCubeMap: return VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.SType;
			case renderPassStriped: return VkPhysicalDeviceRenderPassStripedFeaturesARM.SType;
			case fragmentDensityMapOffset: return VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.SType;
			case indirectCopy: return VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.SType;
			case memoryDecompression: return VkPhysicalDeviceMemoryDecompressionFeaturesNV.SType;
			case deviceGeneratedCompute: return VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.SType;
			case spheres: return VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV.SType;
			case linearSweptSpheres: return VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV.SType;
			case linearColorAttachment: return VkPhysicalDeviceLinearColorAttachmentFeaturesNV.SType;
			case shaderMaximalReconvergence: return VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR.SType;
			case imageCompressionControlSwapchain: return VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.SType;
			case textureSampleWeighted: return VkPhysicalDeviceImageProcessingFeaturesQCOM.SType;
			case textureBlockMatch: return VkPhysicalDeviceImageProcessingFeaturesQCOM.SType;
			case textureBoxFilter: return VkPhysicalDeviceImageProcessingFeaturesQCOM.SType;
			case nestedCommandBuffer: return VkPhysicalDeviceNestedCommandBufferFeaturesEXT.SType;
			case tessellationShader: return .VkPhysicalDeviceFeatures2;
			case fillModeNonSolid: return .VkPhysicalDeviceFeatures2;
			case alphaToOne: return .VkPhysicalDeviceFeatures2;
			case logicOp: return .VkPhysicalDeviceFeatures2;
			case geometryStreams: return VkPhysicalDeviceTransformFeedbackFeaturesEXT.SType;
			case subpassMergeFeedback: return VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.SType;
			case tensors: return VkPhysicalDeviceTensorFeaturesARM.SType;
			case shaderModuleIdentifier: return VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.SType;
			case opticalFlow: return VkPhysicalDeviceOpticalFlowFeaturesNV.SType;
			case legacyDithering: return VkPhysicalDeviceLegacyDitheringFeaturesEXT.SType;
			case antiLag: return VkPhysicalDeviceAntiLagFeaturesAMD.SType;
			case presentId2: return VkPhysicalDevicePresentId2FeaturesKHR.SType;
			case presentWait2: return VkPhysicalDevicePresentWait2FeaturesKHR.SType;
			case rayTracingPositionFetch: return VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR.SType;
			case shaderObject: return VkPhysicalDeviceShaderObjectFeaturesEXT.SType;
			case pipelineBinaries: return VkPhysicalDevicePipelineBinaryFeaturesKHR.SType;
			case tileProperties: return VkPhysicalDeviceTilePropertiesFeaturesQCOM.SType;
			case amigoProfiling: return VkPhysicalDeviceAmigoProfilingFeaturesSEC.SType;
			case multiviewPerViewViewports: return VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM.SType;
			case rayTracingInvocationReorder: return VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.SType;
			case cooperativeVector: return VkPhysicalDeviceCooperativeVectorFeaturesNV.SType;
			case extendedSparseAddressSpace: return VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV.SType;
			case legacyVertexAttributes: return VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT.SType;
			case shaderCoreBuiltins: return VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.SType;
			case pipelineLibraryGroupHandles: return VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT.SType;
			case dynamicRenderingUnusedAttachments: return VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.SType;
			case dataGraph: return VkPhysicalDeviceDataGraphFeaturesARM.SType;
			case multiviewPerViewRenderAreas: return VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM.SType;
			case videoEncodeAV1: return VkPhysicalDeviceVideoEncodeAV1FeaturesKHR.SType;
			case videoDecodeVP9: return VkPhysicalDeviceVideoDecodeVP9FeaturesKHR.SType;
			case videoMaintenance1: return VkPhysicalDeviceVideoMaintenance1FeaturesKHR.SType;
			case perStageDescriptorSet: return VkPhysicalDevicePerStageDescriptorSetFeaturesNV.SType;
			case textureBlockMatch2: return VkPhysicalDeviceImageProcessing2FeaturesQCOM.SType;
			case selectableCubicWeights: return VkPhysicalDeviceCubicWeightsFeaturesQCOM.SType;
			case ycbcrDegamma: return VkPhysicalDeviceYcbcrDegammaFeaturesQCOM.SType;
			case cubicRangeClamp: return VkPhysicalDeviceCubicClampFeaturesQCOM.SType;
			case attachmentFeedbackLoopDynamicState: return VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.SType;
			case unifiedImageLayouts: return VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR.SType;
			case descriptorPoolOverallocation: return VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV.SType;
			case tileMemoryHeap: return VkPhysicalDeviceTileMemoryHeapFeaturesQCOM.SType;
			case videoEncodeIntraRefresh: return VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR.SType;
			case videoEncodeQuantizationMap: return VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR.SType;
			case shaderRawAccessChains: return VkPhysicalDeviceRawAccessChainsFeaturesNV.SType;
			case shaderRelaxedExtendedInstruction: return VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.SType;
			case commandBufferInheritance: return VkPhysicalDeviceCommandBufferInheritanceFeaturesNV.SType;
			case maintenance7: return VkPhysicalDeviceMaintenance7FeaturesKHR.SType;
			case shaderFloat16VectorAtomics: return VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV.SType;
			case shaderReplicatedComposites: return VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT.SType;
			case shaderFloat8: return VkPhysicalDeviceShaderFloat8FeaturesEXT.SType;
			case rayTracingValidation: return VkPhysicalDeviceRayTracingValidationFeaturesNV.SType;
			case clusterAccelerationStructure: return VkPhysicalDeviceClusterAccelerationStructureFeaturesNV.SType;
			case partitionedAccelerationStructure: return VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV.SType;
			case maintenance8: return VkPhysicalDeviceMaintenance8FeaturesKHR.SType;
			case imageAlignmentControl: return VkPhysicalDeviceImageAlignmentControlFeaturesMESA.SType;
			case depthClampControl: return VkPhysicalDeviceDepthClampControlFeaturesEXT.SType;
			case maintenance9: return VkPhysicalDeviceMaintenance9FeaturesKHR.SType;
			case videoMaintenance2: return VkPhysicalDeviceVideoMaintenance2FeaturesKHR.SType;
			case hdrVivid: return VkPhysicalDeviceHdrVividFeaturesHUAWEI.SType;
			case cooperativeMatrixWorkgroupScope: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixFlexibleDimensions: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixReductions: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixConversions: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixPerElementOperations: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixTensorAddressing: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case cooperativeMatrixBlockLoads: return VkPhysicalDeviceCooperativeMatrix2FeaturesNV.SType;
			case pipelineOpacityMicromap: return VkPhysicalDevicePipelineOpacityMicromapFeaturesARM.SType;
			case vertexAttributeRobustness: return VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT.SType;
			case formatPack: return VkPhysicalDeviceFormatPackFeaturesARM.SType;
			case fragmentDensityMapLayered: return VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE.SType;
			case zeroInitializeDeviceMemory: return VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT.SType;
			case pipelineCacheIncrementalMode: return VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC.SType;
			}
		}
	}
}