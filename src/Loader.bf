/*  Auto Generated by Setup/Program.bf
 *  DO NOT EDIT
 */

using System;
using System.Interop;

using Vulkan;
using Vulkan.Loader;

namespace Vulkan.Loader;

static
{
	public static PFN_vkCreateInstance vkCreateInstance;
	public static PFN_vkDestroyInstance vkDestroyInstance;
	public static PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices;
	public static PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;
	public static PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;
	public static PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;
	public static PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties;
	public static PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;
	public static PFN_vkGetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures;
	public static PFN_vkGetPhysicalDeviceFormatProperties vkGetPhysicalDeviceFormatProperties;
	public static PFN_vkGetPhysicalDeviceImageFormatProperties vkGetPhysicalDeviceImageFormatProperties;
	public static PFN_vkCreateDevice vkCreateDevice;
	public static PFN_vkDestroyDevice vkDestroyDevice;
	public static PFN_vkEnumerateInstanceVersion vkEnumerateInstanceVersion;
	public static PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties;
	public static PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties;
	public static PFN_vkEnumerateDeviceLayerProperties vkEnumerateDeviceLayerProperties;
	public static PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties;
	public static PFN_vkGetDeviceQueue vkGetDeviceQueue;
	public static PFN_vkQueueSubmit vkQueueSubmit;
	public static PFN_vkQueueWaitIdle vkQueueWaitIdle;
	public static PFN_vkDeviceWaitIdle vkDeviceWaitIdle;
	public static PFN_vkAllocateMemory vkAllocateMemory;
	public static PFN_vkFreeMemory vkFreeMemory;
	public static PFN_vkMapMemory vkMapMemory;
	public static PFN_vkUnmapMemory vkUnmapMemory;
	public static PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;
	public static PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;
	public static PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment;
	public static PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;
	public static PFN_vkBindBufferMemory vkBindBufferMemory;
	public static PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;
	public static PFN_vkBindImageMemory vkBindImageMemory;
	public static PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements;
	public static PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkGetPhysicalDeviceSparseImageFormatProperties;
	public static PFN_vkQueueBindSparse vkQueueBindSparse;
	public static PFN_vkCreateFence vkCreateFence;
	public static PFN_vkDestroyFence vkDestroyFence;
	public static PFN_vkResetFences vkResetFences;
	public static PFN_vkGetFenceStatus vkGetFenceStatus;
	public static PFN_vkWaitForFences vkWaitForFences;
	public static PFN_vkCreateSemaphore vkCreateSemaphore;
	public static PFN_vkDestroySemaphore vkDestroySemaphore;
	public static PFN_vkCreateEvent vkCreateEvent;
	public static PFN_vkDestroyEvent vkDestroyEvent;
	public static PFN_vkGetEventStatus vkGetEventStatus;
	public static PFN_vkSetEvent vkSetEvent;
	public static PFN_vkResetEvent vkResetEvent;
	public static PFN_vkCreateQueryPool vkCreateQueryPool;
	public static PFN_vkDestroyQueryPool vkDestroyQueryPool;
	public static PFN_vkGetQueryPoolResults vkGetQueryPoolResults;
	public static PFN_vkResetQueryPool vkResetQueryPool;
	public static PFN_vkCreateBuffer vkCreateBuffer;
	public static PFN_vkDestroyBuffer vkDestroyBuffer;
	public static PFN_vkCreateBufferView vkCreateBufferView;
	public static PFN_vkDestroyBufferView vkDestroyBufferView;
	public static PFN_vkCreateImage vkCreateImage;
	public static PFN_vkDestroyImage vkDestroyImage;
	public static PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout;
	public static PFN_vkCreateImageView vkCreateImageView;
	public static PFN_vkDestroyImageView vkDestroyImageView;
	public static PFN_vkCreateShaderModule vkCreateShaderModule;
	public static PFN_vkDestroyShaderModule vkDestroyShaderModule;
	public static PFN_vkCreatePipelineCache vkCreatePipelineCache;
	public static PFN_vkDestroyPipelineCache vkDestroyPipelineCache;
	public static PFN_vkGetPipelineCacheData vkGetPipelineCacheData;
	public static PFN_vkMergePipelineCaches vkMergePipelineCaches;
	public static PFN_vkCreatePipelineBinariesKHR vkCreatePipelineBinariesKHR;
	public static PFN_vkDestroyPipelineBinaryKHR vkDestroyPipelineBinaryKHR;
	public static PFN_vkGetPipelineKeyKHR vkGetPipelineKeyKHR;
	public static PFN_vkGetPipelineBinaryDataKHR vkGetPipelineBinaryDataKHR;
	public static PFN_vkReleaseCapturedPipelineDataKHR vkReleaseCapturedPipelineDataKHR;
	public static PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines;
	public static PFN_vkCreateComputePipelines vkCreateComputePipelines;
	public static PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	public static PFN_vkDestroyPipeline vkDestroyPipeline;
	public static PFN_vkCreatePipelineLayout vkCreatePipelineLayout;
	public static PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout;
	public static PFN_vkCreateSampler vkCreateSampler;
	public static PFN_vkDestroySampler vkDestroySampler;
	public static PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout;
	public static PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout;
	public static PFN_vkCreateDescriptorPool vkCreateDescriptorPool;
	public static PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool;
	public static PFN_vkResetDescriptorPool vkResetDescriptorPool;
	public static PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets;
	public static PFN_vkFreeDescriptorSets vkFreeDescriptorSets;
	public static PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets;
	public static PFN_vkCreateFramebuffer vkCreateFramebuffer;
	public static PFN_vkDestroyFramebuffer vkDestroyFramebuffer;
	public static PFN_vkCreateRenderPass vkCreateRenderPass;
	public static PFN_vkDestroyRenderPass vkDestroyRenderPass;
	public static PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity;
	public static PFN_vkGetRenderingAreaGranularity vkGetRenderingAreaGranularity;
	public static PFN_vkCreateCommandPool vkCreateCommandPool;
	public static PFN_vkDestroyCommandPool vkDestroyCommandPool;
	public static PFN_vkResetCommandPool vkResetCommandPool;
	public static PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers;
	public static PFN_vkFreeCommandBuffers vkFreeCommandBuffers;
	public static PFN_vkBeginCommandBuffer vkBeginCommandBuffer;
	public static PFN_vkEndCommandBuffer vkEndCommandBuffer;
	public static PFN_vkResetCommandBuffer vkResetCommandBuffer;
	public static PFN_vkCmdBindPipeline vkCmdBindPipeline;
	public static PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT vkCmdSetAttachmentFeedbackLoopEnableEXT;
	public static PFN_vkCmdSetViewport vkCmdSetViewport;
	public static PFN_vkCmdSetScissor vkCmdSetScissor;
	public static PFN_vkCmdSetLineWidth vkCmdSetLineWidth;
	public static PFN_vkCmdSetDepthBias vkCmdSetDepthBias;
	public static PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants;
	public static PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds;
	public static PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask;
	public static PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask;
	public static PFN_vkCmdSetStencilReference vkCmdSetStencilReference;
	public static PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets;
	public static PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer;
	public static PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers;
	public static PFN_vkCmdDraw vkCmdDraw;
	public static PFN_vkCmdDrawIndexed vkCmdDrawIndexed;
	public static PFN_vkCmdDrawMultiEXT vkCmdDrawMultiEXT;
	public static PFN_vkCmdDrawMultiIndexedEXT vkCmdDrawMultiIndexedEXT;
	public static PFN_vkCmdDrawIndirect vkCmdDrawIndirect;
	public static PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect;
	public static PFN_vkCmdDispatch vkCmdDispatch;
	public static PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect;
	public static PFN_vkCmdSubpassShadingHUAWEI vkCmdSubpassShadingHUAWEI;
	public static PFN_vkCmdDrawClusterHUAWEI vkCmdDrawClusterHUAWEI;
	public static PFN_vkCmdDrawClusterIndirectHUAWEI vkCmdDrawClusterIndirectHUAWEI;
	public static PFN_vkCmdUpdatePipelineIndirectBufferNV vkCmdUpdatePipelineIndirectBufferNV;
	public static PFN_vkCmdCopyBuffer vkCmdCopyBuffer;
	public static PFN_vkCmdCopyImage vkCmdCopyImage;
	public static PFN_vkCmdBlitImage vkCmdBlitImage;
	public static PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage;
	public static PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer;
	public static PFN_vkCmdCopyMemoryIndirectNV vkCmdCopyMemoryIndirectNV;
	public static PFN_vkCmdCopyMemoryToImageIndirectNV vkCmdCopyMemoryToImageIndirectNV;
	public static PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer;
	public static PFN_vkCmdFillBuffer vkCmdFillBuffer;
	public static PFN_vkCmdClearColorImage vkCmdClearColorImage;
	public static PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage;
	public static PFN_vkCmdClearAttachments vkCmdClearAttachments;
	public static PFN_vkCmdResolveImage vkCmdResolveImage;
	public static PFN_vkCmdSetEvent vkCmdSetEvent;
	public static PFN_vkCmdResetEvent vkCmdResetEvent;
	public static PFN_vkCmdWaitEvents vkCmdWaitEvents;
	public static PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier;
	public static PFN_vkCmdBeginQuery vkCmdBeginQuery;
	public static PFN_vkCmdEndQuery vkCmdEndQuery;
	public static PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT;
	public static PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT;
	public static PFN_vkCmdResetQueryPool vkCmdResetQueryPool;
	public static PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp;
	public static PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults;
	public static PFN_vkCmdPushConstants vkCmdPushConstants;
	public static PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass;
	public static PFN_vkCmdNextSubpass vkCmdNextSubpass;
	public static PFN_vkCmdEndRenderPass vkCmdEndRenderPass;
	public static PFN_vkCmdExecuteCommands vkCmdExecuteCommands;
	public static PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkGetPhysicalDeviceDisplayPropertiesKHR;
	public static PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	public static PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkGetDisplayPlaneSupportedDisplaysKHR;
	public static PFN_vkGetDisplayModePropertiesKHR vkGetDisplayModePropertiesKHR;
	public static PFN_vkCreateDisplayModeKHR vkCreateDisplayModeKHR;
	public static PFN_vkGetDisplayPlaneCapabilitiesKHR vkGetDisplayPlaneCapabilitiesKHR;
	public static PFN_vkCreateDisplayPlaneSurfaceKHR vkCreateDisplayPlaneSurfaceKHR;
	public static PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR;
	public static PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR;
	public static PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;
	public static PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	public static PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;
	public static PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;
	public static PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
	public static PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;
	public static PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;
	public static PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;
	public static PFN_vkQueuePresentKHR vkQueuePresentKHR;
	public static PFN_vkCreateDebugReportCallbackEXT vkCreateDebugReportCallbackEXT;
	public static PFN_vkDestroyDebugReportCallbackEXT vkDestroyDebugReportCallbackEXT;
	public static PFN_vkDebugReportMessageEXT vkDebugReportMessageEXT;
	public static PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT;
	public static PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT;
	public static PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT;
	public static PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT;
	public static PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT;
	public static PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	public static PFN_vkCmdExecuteGeneratedCommandsNV vkCmdExecuteGeneratedCommandsNV;
	public static PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV;
	public static PFN_vkCmdBindPipelineShaderGroupNV vkCmdBindPipelineShaderGroupNV;
	public static PFN_vkGetGeneratedCommandsMemoryRequirementsNV vkGetGeneratedCommandsMemoryRequirementsNV;
	public static PFN_vkCreateIndirectCommandsLayoutNV vkCreateIndirectCommandsLayoutNV;
	public static PFN_vkDestroyIndirectCommandsLayoutNV vkDestroyIndirectCommandsLayoutNV;
	public static PFN_vkCmdExecuteGeneratedCommandsEXT vkCmdExecuteGeneratedCommandsEXT;
	public static PFN_vkCmdPreprocessGeneratedCommandsEXT vkCmdPreprocessGeneratedCommandsEXT;
	public static PFN_vkGetGeneratedCommandsMemoryRequirementsEXT vkGetGeneratedCommandsMemoryRequirementsEXT;
	public static PFN_vkCreateIndirectCommandsLayoutEXT vkCreateIndirectCommandsLayoutEXT;
	public static PFN_vkDestroyIndirectCommandsLayoutEXT vkDestroyIndirectCommandsLayoutEXT;
	public static PFN_vkCreateIndirectExecutionSetEXT vkCreateIndirectExecutionSetEXT;
	public static PFN_vkDestroyIndirectExecutionSetEXT vkDestroyIndirectExecutionSetEXT;
	public static PFN_vkUpdateIndirectExecutionSetPipelineEXT vkUpdateIndirectExecutionSetPipelineEXT;
	public static PFN_vkUpdateIndirectExecutionSetShaderEXT vkUpdateIndirectExecutionSetShaderEXT;
	public static PFN_vkGetPhysicalDeviceFeatures2 vkGetPhysicalDeviceFeatures2;
	public static PFN_vkGetPhysicalDeviceProperties2 vkGetPhysicalDeviceProperties2;
	public static PFN_vkGetPhysicalDeviceFormatProperties2 vkGetPhysicalDeviceFormatProperties2;
	public static PFN_vkGetPhysicalDeviceImageFormatProperties2 vkGetPhysicalDeviceImageFormatProperties2;
	public static PFN_vkGetPhysicalDeviceQueueFamilyProperties2 vkGetPhysicalDeviceQueueFamilyProperties2;
	public static PFN_vkGetPhysicalDeviceMemoryProperties2 vkGetPhysicalDeviceMemoryProperties2;
	public static PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 vkGetPhysicalDeviceSparseImageFormatProperties2;
	public static PFN_vkCmdPushDescriptorSet vkCmdPushDescriptorSet;
	public static PFN_vkTrimCommandPool vkTrimCommandPool;
	public static PFN_vkGetPhysicalDeviceExternalBufferProperties vkGetPhysicalDeviceExternalBufferProperties;
	public static PFN_vkGetMemoryFdKHR vkGetMemoryFdKHR;
	public static PFN_vkGetMemoryFdPropertiesKHR vkGetMemoryFdPropertiesKHR;
	public static PFN_vkGetMemoryRemoteAddressNV vkGetMemoryRemoteAddressNV;
	public static PFN_vkGetPhysicalDeviceExternalSemaphoreProperties vkGetPhysicalDeviceExternalSemaphoreProperties;
	public static PFN_vkGetSemaphoreFdKHR vkGetSemaphoreFdKHR;
	public static PFN_vkImportSemaphoreFdKHR vkImportSemaphoreFdKHR;
	public static PFN_vkGetPhysicalDeviceExternalFenceProperties vkGetPhysicalDeviceExternalFenceProperties;
	public static PFN_vkGetFenceFdKHR vkGetFenceFdKHR;
	public static PFN_vkImportFenceFdKHR vkImportFenceFdKHR;
	public static PFN_vkReleaseDisplayEXT vkReleaseDisplayEXT;
	public static PFN_vkDisplayPowerControlEXT vkDisplayPowerControlEXT;
	public static PFN_vkRegisterDeviceEventEXT vkRegisterDeviceEventEXT;
	public static PFN_vkRegisterDisplayEventEXT vkRegisterDisplayEventEXT;
	public static PFN_vkGetSwapchainCounterEXT vkGetSwapchainCounterEXT;
	public static PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	public static PFN_vkEnumeratePhysicalDeviceGroups vkEnumeratePhysicalDeviceGroups;
	public static PFN_vkGetDeviceGroupPeerMemoryFeatures vkGetDeviceGroupPeerMemoryFeatures;
	public static PFN_vkBindBufferMemory2 vkBindBufferMemory2;
	public static PFN_vkBindImageMemory2 vkBindImageMemory2;
	public static PFN_vkCmdSetDeviceMask vkCmdSetDeviceMask;
	public static PFN_vkGetDeviceGroupPresentCapabilitiesKHR vkGetDeviceGroupPresentCapabilitiesKHR;
	public static PFN_vkGetDeviceGroupSurfacePresentModesKHR vkGetDeviceGroupSurfacePresentModesKHR;
	public static PFN_vkAcquireNextImage2KHR vkAcquireNextImage2KHR;
	public static PFN_vkCmdDispatchBase vkCmdDispatchBase;
	public static PFN_vkGetPhysicalDevicePresentRectanglesKHR vkGetPhysicalDevicePresentRectanglesKHR;
	public static PFN_vkCreateDescriptorUpdateTemplate vkCreateDescriptorUpdateTemplate;
	public static PFN_vkDestroyDescriptorUpdateTemplate vkDestroyDescriptorUpdateTemplate;
	public static PFN_vkUpdateDescriptorSetWithTemplate vkUpdateDescriptorSetWithTemplate;
	public static PFN_vkCmdPushDescriptorSetWithTemplate vkCmdPushDescriptorSetWithTemplate;
	public static PFN_vkSetHdrMetadataEXT vkSetHdrMetadataEXT;
	public static PFN_vkGetSwapchainStatusKHR vkGetSwapchainStatusKHR;
	public static PFN_vkGetRefreshCycleDurationGOOGLE vkGetRefreshCycleDurationGOOGLE;
	public static PFN_vkGetPastPresentationTimingGOOGLE vkGetPastPresentationTimingGOOGLE;
	public static PFN_vkCmdSetViewportWScalingNV vkCmdSetViewportWScalingNV;
	public static PFN_vkCmdSetDiscardRectangleEXT vkCmdSetDiscardRectangleEXT;
	public static PFN_vkCmdSetDiscardRectangleEnableEXT vkCmdSetDiscardRectangleEnableEXT;
	public static PFN_vkCmdSetDiscardRectangleModeEXT vkCmdSetDiscardRectangleModeEXT;
	public static PFN_vkCmdSetSampleLocationsEXT vkCmdSetSampleLocationsEXT;
	public static PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT vkGetPhysicalDeviceMultisamplePropertiesEXT;
	public static PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	public static PFN_vkGetPhysicalDeviceSurfaceFormats2KHR vkGetPhysicalDeviceSurfaceFormats2KHR;
	public static PFN_vkGetPhysicalDeviceDisplayProperties2KHR vkGetPhysicalDeviceDisplayProperties2KHR;
	public static PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	public static PFN_vkGetDisplayModeProperties2KHR vkGetDisplayModeProperties2KHR;
	public static PFN_vkGetDisplayPlaneCapabilities2KHR vkGetDisplayPlaneCapabilities2KHR;
	public static PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2;
	public static PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2;
	public static PFN_vkGetImageSparseMemoryRequirements2 vkGetImageSparseMemoryRequirements2;
	public static PFN_vkGetDeviceBufferMemoryRequirements vkGetDeviceBufferMemoryRequirements;
	public static PFN_vkGetDeviceImageMemoryRequirements vkGetDeviceImageMemoryRequirements;
	public static PFN_vkGetDeviceImageSparseMemoryRequirements vkGetDeviceImageSparseMemoryRequirements;
	public static PFN_vkCreateSamplerYcbcrConversion vkCreateSamplerYcbcrConversion;
	public static PFN_vkDestroySamplerYcbcrConversion vkDestroySamplerYcbcrConversion;
	public static PFN_vkGetDeviceQueue2 vkGetDeviceQueue2;
	public static PFN_vkCreateValidationCacheEXT vkCreateValidationCacheEXT;
	public static PFN_vkDestroyValidationCacheEXT vkDestroyValidationCacheEXT;
	public static PFN_vkGetValidationCacheDataEXT vkGetValidationCacheDataEXT;
	public static PFN_vkMergeValidationCachesEXT vkMergeValidationCachesEXT;
	public static PFN_vkGetDescriptorSetLayoutSupport vkGetDescriptorSetLayoutSupport;
	public static PFN_vkGetShaderInfoAMD vkGetShaderInfoAMD;
	public static PFN_vkSetLocalDimmingAMD vkSetLocalDimmingAMD;
	public static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
	public static PFN_vkGetCalibratedTimestampsKHR vkGetCalibratedTimestampsKHR;
	public static PFN_vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectNameEXT;
	public static PFN_vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectTagEXT;
	public static PFN_vkQueueBeginDebugUtilsLabelEXT vkQueueBeginDebugUtilsLabelEXT;
	public static PFN_vkQueueEndDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT;
	public static PFN_vkQueueInsertDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT;
	public static PFN_vkCmdBeginDebugUtilsLabelEXT vkCmdBeginDebugUtilsLabelEXT;
	public static PFN_vkCmdEndDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT;
	public static PFN_vkCmdInsertDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT;
	public static PFN_vkCreateDebugUtilsMessengerEXT vkCreateDebugUtilsMessengerEXT;
	public static PFN_vkDestroyDebugUtilsMessengerEXT vkDestroyDebugUtilsMessengerEXT;
	public static PFN_vkSubmitDebugUtilsMessageEXT vkSubmitDebugUtilsMessageEXT;
	public static PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT;
	public static PFN_vkCmdWriteBufferMarkerAMD vkCmdWriteBufferMarkerAMD;
	public static PFN_vkCreateRenderPass2 vkCreateRenderPass2;
	public static PFN_vkCmdBeginRenderPass2 vkCmdBeginRenderPass2;
	public static PFN_vkCmdNextSubpass2 vkCmdNextSubpass2;
	public static PFN_vkCmdEndRenderPass2 vkCmdEndRenderPass2;
	public static PFN_vkGetSemaphoreCounterValue vkGetSemaphoreCounterValue;
	public static PFN_vkWaitSemaphores vkWaitSemaphores;
	public static PFN_vkSignalSemaphore vkSignalSemaphore;
	public static PFN_vkCmdDrawIndirectCount vkCmdDrawIndirectCount;
	public static PFN_vkCmdDrawIndexedIndirectCount vkCmdDrawIndexedIndirectCount;
	public static PFN_vkCmdSetCheckpointNV vkCmdSetCheckpointNV;
	public static PFN_vkGetQueueCheckpointDataNV vkGetQueueCheckpointDataNV;
	public static PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT;
	public static PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT;
	public static PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT;
	public static PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT;
	public static PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT;
	public static PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT;
	public static PFN_vkCmdSetExclusiveScissorNV vkCmdSetExclusiveScissorNV;
	public static PFN_vkCmdSetExclusiveScissorEnableNV vkCmdSetExclusiveScissorEnableNV;
	public static PFN_vkCmdBindShadingRateImageNV vkCmdBindShadingRateImageNV;
	public static PFN_vkCmdSetViewportShadingRatePaletteNV vkCmdSetViewportShadingRatePaletteNV;
	public static PFN_vkCmdSetCoarseSampleOrderNV vkCmdSetCoarseSampleOrderNV;
	public static PFN_vkCmdDrawMeshTasksNV vkCmdDrawMeshTasksNV;
	public static PFN_vkCmdDrawMeshTasksIndirectNV vkCmdDrawMeshTasksIndirectNV;
	public static PFN_vkCmdDrawMeshTasksIndirectCountNV vkCmdDrawMeshTasksIndirectCountNV;
	public static PFN_vkCmdDrawMeshTasksEXT vkCmdDrawMeshTasksEXT;
	public static PFN_vkCmdDrawMeshTasksIndirectEXT vkCmdDrawMeshTasksIndirectEXT;
	public static PFN_vkCmdDrawMeshTasksIndirectCountEXT vkCmdDrawMeshTasksIndirectCountEXT;
	public static PFN_vkCompileDeferredNV vkCompileDeferredNV;
	public static PFN_vkCreateAccelerationStructureNV vkCreateAccelerationStructureNV;
	public static PFN_vkCmdBindInvocationMaskHUAWEI vkCmdBindInvocationMaskHUAWEI;
	public static PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR;
	public static PFN_vkDestroyAccelerationStructureNV vkDestroyAccelerationStructureNV;
	public static PFN_vkGetAccelerationStructureMemoryRequirementsNV vkGetAccelerationStructureMemoryRequirementsNV;
	public static PFN_vkBindAccelerationStructureMemoryNV vkBindAccelerationStructureMemoryNV;
	public static PFN_vkCmdCopyAccelerationStructureNV vkCmdCopyAccelerationStructureNV;
	public static PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructureKHR;
	public static PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructureKHR;
	public static PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemoryKHR;
	public static PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemoryKHR;
	public static PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructureKHR;
	public static PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructureKHR;
	public static PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresPropertiesKHR;
	public static PFN_vkCmdWriteAccelerationStructuresPropertiesNV vkCmdWriteAccelerationStructuresPropertiesNV;
	public static PFN_vkCmdBuildAccelerationStructureNV vkCmdBuildAccelerationStructureNV;
	public static PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresPropertiesKHR;
	public static PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR;
	public static PFN_vkCmdTraceRaysNV vkCmdTraceRaysNV;
	public static PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR;
	public static PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	public static PFN_vkGetAccelerationStructureHandleNV vkGetAccelerationStructureHandleNV;
	public static PFN_vkCreateRayTracingPipelinesNV vkCreateRayTracingPipelinesNV;
	public static PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR;
	public static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
	public static PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirectKHR;
	public static PFN_vkCmdTraceRaysIndirect2KHR vkCmdTraceRaysIndirect2KHR;
	public static PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibilityKHR;
	public static PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSizeKHR;
	public static PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSizeKHR;
	public static PFN_vkGetImageViewHandleNVX vkGetImageViewHandleNVX;
	public static PFN_vkGetImageViewHandle64NVX vkGetImageViewHandle64NVX;
	public static PFN_vkGetImageViewAddressNVX vkGetImageViewAddressNVX;
	public static PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	public static PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	public static PFN_vkAcquireProfilingLockKHR vkAcquireProfilingLockKHR;
	public static PFN_vkReleaseProfilingLockKHR vkReleaseProfilingLockKHR;
	public static PFN_vkGetImageDrmFormatModifierPropertiesEXT vkGetImageDrmFormatModifierPropertiesEXT;
	public static PFN_vkGetBufferOpaqueCaptureAddress vkGetBufferOpaqueCaptureAddress;
	public static PFN_vkGetBufferDeviceAddress vkGetBufferDeviceAddress;
	public static PFN_vkCreateHeadlessSurfaceEXT vkCreateHeadlessSurfaceEXT;
	public static PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	public static PFN_vkInitializePerformanceApiINTEL vkInitializePerformanceApiINTEL;
	public static PFN_vkUninitializePerformanceApiINTEL vkUninitializePerformanceApiINTEL;
	public static PFN_vkCmdSetPerformanceMarkerINTEL vkCmdSetPerformanceMarkerINTEL;
	public static PFN_vkCmdSetPerformanceStreamMarkerINTEL vkCmdSetPerformanceStreamMarkerINTEL;
	public static PFN_vkCmdSetPerformanceOverrideINTEL vkCmdSetPerformanceOverrideINTEL;
	public static PFN_vkAcquirePerformanceConfigurationINTEL vkAcquirePerformanceConfigurationINTEL;
	public static PFN_vkReleasePerformanceConfigurationINTEL vkReleasePerformanceConfigurationINTEL;
	public static PFN_vkQueueSetPerformanceConfigurationINTEL vkQueueSetPerformanceConfigurationINTEL;
	public static PFN_vkGetPerformanceParameterINTEL vkGetPerformanceParameterINTEL;
	public static PFN_vkGetDeviceMemoryOpaqueCaptureAddress vkGetDeviceMemoryOpaqueCaptureAddress;
	public static PFN_vkGetPipelineExecutablePropertiesKHR vkGetPipelineExecutablePropertiesKHR;
	public static PFN_vkGetPipelineExecutableStatisticsKHR vkGetPipelineExecutableStatisticsKHR;
	public static PFN_vkGetPipelineExecutableInternalRepresentationsKHR vkGetPipelineExecutableInternalRepresentationsKHR;
	public static PFN_vkCmdSetLineStipple vkCmdSetLineStipple;
	public static PFN_vkGetPhysicalDeviceToolProperties vkGetPhysicalDeviceToolProperties;
	public static PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR;
	public static PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR;
	public static PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirectKHR;
	public static PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructuresKHR;
	public static PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR;
	public static PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperationKHR;
	public static PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperationKHR;
	public static PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrencyKHR;
	public static PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResultKHR;
	public static PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoinKHR;
	public static PFN_vkGetPipelineIndirectMemoryRequirementsNV vkGetPipelineIndirectMemoryRequirementsNV;
	public static PFN_vkGetPipelineIndirectDeviceAddressNV vkGetPipelineIndirectDeviceAddressNV;
	public static PFN_vkAntiLagUpdateAMD vkAntiLagUpdateAMD;
	public static PFN_vkCmdSetCullMode vkCmdSetCullMode;
	public static PFN_vkCmdSetFrontFace vkCmdSetFrontFace;
	public static PFN_vkCmdSetPrimitiveTopology vkCmdSetPrimitiveTopology;
	public static PFN_vkCmdSetViewportWithCount vkCmdSetViewportWithCount;
	public static PFN_vkCmdSetScissorWithCount vkCmdSetScissorWithCount;
	public static PFN_vkCmdBindIndexBuffer2 vkCmdBindIndexBuffer2;
	public static PFN_vkCmdBindVertexBuffers2 vkCmdBindVertexBuffers2;
	public static PFN_vkCmdSetDepthTestEnable vkCmdSetDepthTestEnable;
	public static PFN_vkCmdSetDepthWriteEnable vkCmdSetDepthWriteEnable;
	public static PFN_vkCmdSetDepthCompareOp vkCmdSetDepthCompareOp;
	public static PFN_vkCmdSetDepthBoundsTestEnable vkCmdSetDepthBoundsTestEnable;
	public static PFN_vkCmdSetStencilTestEnable vkCmdSetStencilTestEnable;
	public static PFN_vkCmdSetStencilOp vkCmdSetStencilOp;
	public static PFN_vkCmdSetPatchControlPointsEXT vkCmdSetPatchControlPointsEXT;
	public static PFN_vkCmdSetRasterizerDiscardEnable vkCmdSetRasterizerDiscardEnable;
	public static PFN_vkCmdSetDepthBiasEnable vkCmdSetDepthBiasEnable;
	public static PFN_vkCmdSetLogicOpEXT vkCmdSetLogicOpEXT;
	public static PFN_vkCmdSetPrimitiveRestartEnable vkCmdSetPrimitiveRestartEnable;
	public static PFN_vkCmdSetTessellationDomainOriginEXT vkCmdSetTessellationDomainOriginEXT;
	public static PFN_vkCmdSetDepthClampEnableEXT vkCmdSetDepthClampEnableEXT;
	public static PFN_vkCmdSetPolygonModeEXT vkCmdSetPolygonModeEXT;
	public static PFN_vkCmdSetRasterizationSamplesEXT vkCmdSetRasterizationSamplesEXT;
	public static PFN_vkCmdSetSampleMaskEXT vkCmdSetSampleMaskEXT;
	public static PFN_vkCmdSetAlphaToCoverageEnableEXT vkCmdSetAlphaToCoverageEnableEXT;
	public static PFN_vkCmdSetAlphaToOneEnableEXT vkCmdSetAlphaToOneEnableEXT;
	public static PFN_vkCmdSetLogicOpEnableEXT vkCmdSetLogicOpEnableEXT;
	public static PFN_vkCmdSetColorBlendEnableEXT vkCmdSetColorBlendEnableEXT;
	public static PFN_vkCmdSetColorBlendEquationEXT vkCmdSetColorBlendEquationEXT;
	public static PFN_vkCmdSetColorWriteMaskEXT vkCmdSetColorWriteMaskEXT;
	public static PFN_vkCmdSetRasterizationStreamEXT vkCmdSetRasterizationStreamEXT;
	public static PFN_vkCmdSetConservativeRasterizationModeEXT vkCmdSetConservativeRasterizationModeEXT;
	public static PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	public static PFN_vkCmdSetDepthClipEnableEXT vkCmdSetDepthClipEnableEXT;
	public static PFN_vkCmdSetSampleLocationsEnableEXT vkCmdSetSampleLocationsEnableEXT;
	public static PFN_vkCmdSetColorBlendAdvancedEXT vkCmdSetColorBlendAdvancedEXT;
	public static PFN_vkCmdSetProvokingVertexModeEXT vkCmdSetProvokingVertexModeEXT;
	public static PFN_vkCmdSetLineRasterizationModeEXT vkCmdSetLineRasterizationModeEXT;
	public static PFN_vkCmdSetLineStippleEnableEXT vkCmdSetLineStippleEnableEXT;
	public static PFN_vkCmdSetDepthClipNegativeOneToOneEXT vkCmdSetDepthClipNegativeOneToOneEXT;
	public static PFN_vkCmdSetViewportWScalingEnableNV vkCmdSetViewportWScalingEnableNV;
	public static PFN_vkCmdSetViewportSwizzleNV vkCmdSetViewportSwizzleNV;
	public static PFN_vkCmdSetCoverageToColorEnableNV vkCmdSetCoverageToColorEnableNV;
	public static PFN_vkCmdSetCoverageToColorLocationNV vkCmdSetCoverageToColorLocationNV;
	public static PFN_vkCmdSetCoverageModulationModeNV vkCmdSetCoverageModulationModeNV;
	public static PFN_vkCmdSetCoverageModulationTableEnableNV vkCmdSetCoverageModulationTableEnableNV;
	public static PFN_vkCmdSetCoverageModulationTableNV vkCmdSetCoverageModulationTableNV;
	public static PFN_vkCmdSetShadingRateImageEnableNV vkCmdSetShadingRateImageEnableNV;
	public static PFN_vkCmdSetCoverageReductionModeNV vkCmdSetCoverageReductionModeNV;
	public static PFN_vkCmdSetRepresentativeFragmentTestEnableNV vkCmdSetRepresentativeFragmentTestEnableNV;
	public static PFN_vkCreatePrivateDataSlot vkCreatePrivateDataSlot;
	public static PFN_vkDestroyPrivateDataSlot vkDestroyPrivateDataSlot;
	public static PFN_vkSetPrivateData vkSetPrivateData;
	public static PFN_vkGetPrivateData vkGetPrivateData;
	public static PFN_vkCmdCopyBuffer2 vkCmdCopyBuffer2;
	public static PFN_vkCmdCopyImage2 vkCmdCopyImage2;
	public static PFN_vkCmdBlitImage2 vkCmdBlitImage2;
	public static PFN_vkCmdCopyBufferToImage2 vkCmdCopyBufferToImage2;
	public static PFN_vkCmdCopyImageToBuffer2 vkCmdCopyImageToBuffer2;
	public static PFN_vkCmdResolveImage2 vkCmdResolveImage2;
	public static PFN_vkCmdSetFragmentShadingRateKHR vkCmdSetFragmentShadingRateKHR;
	public static PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR vkGetPhysicalDeviceFragmentShadingRatesKHR;
	public static PFN_vkCmdSetFragmentShadingRateEnumNV vkCmdSetFragmentShadingRateEnumNV;
	public static PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR;
	public static PFN_vkCmdSetVertexInputEXT vkCmdSetVertexInputEXT;
	public static PFN_vkCmdSetColorWriteEnableEXT vkCmdSetColorWriteEnableEXT;
	public static PFN_vkCmdSetEvent2 vkCmdSetEvent2;
	public static PFN_vkCmdResetEvent2 vkCmdResetEvent2;
	public static PFN_vkCmdWaitEvents2 vkCmdWaitEvents2;
	public static PFN_vkCmdPipelineBarrier2 vkCmdPipelineBarrier2;
	public static PFN_vkQueueSubmit2 vkQueueSubmit2;
	public static PFN_vkCmdWriteTimestamp2 vkCmdWriteTimestamp2;
	public static PFN_vkCmdWriteBufferMarker2AMD vkCmdWriteBufferMarker2AMD;
	public static PFN_vkGetQueueCheckpointData2NV vkGetQueueCheckpointData2NV;
	public static PFN_vkCopyMemoryToImage vkCopyMemoryToImage;
	public static PFN_vkCopyImageToMemory vkCopyImageToMemory;
	public static PFN_vkCopyImageToImage vkCopyImageToImage;
	public static PFN_vkTransitionImageLayout vkTransitionImageLayout;
	public static PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR vkGetPhysicalDeviceVideoCapabilitiesKHR;
	public static PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR vkGetPhysicalDeviceVideoFormatPropertiesKHR;
	public static PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
	public static PFN_vkCreateVideoSessionKHR vkCreateVideoSessionKHR;
	public static PFN_vkDestroyVideoSessionKHR vkDestroyVideoSessionKHR;
	public static PFN_vkCreateVideoSessionParametersKHR vkCreateVideoSessionParametersKHR;
	public static PFN_vkUpdateVideoSessionParametersKHR vkUpdateVideoSessionParametersKHR;
	public static PFN_vkGetEncodedVideoSessionParametersKHR vkGetEncodedVideoSessionParametersKHR;
	public static PFN_vkDestroyVideoSessionParametersKHR vkDestroyVideoSessionParametersKHR;
	public static PFN_vkGetVideoSessionMemoryRequirementsKHR vkGetVideoSessionMemoryRequirementsKHR;
	public static PFN_vkBindVideoSessionMemoryKHR vkBindVideoSessionMemoryKHR;
	public static PFN_vkCmdDecodeVideoKHR vkCmdDecodeVideoKHR;
	public static PFN_vkCmdBeginVideoCodingKHR vkCmdBeginVideoCodingKHR;
	public static PFN_vkCmdControlVideoCodingKHR vkCmdControlVideoCodingKHR;
	public static PFN_vkCmdEndVideoCodingKHR vkCmdEndVideoCodingKHR;
	public static PFN_vkCmdEncodeVideoKHR vkCmdEncodeVideoKHR;
	public static PFN_vkCmdDecompressMemoryNV vkCmdDecompressMemoryNV;
	public static PFN_vkCmdDecompressMemoryIndirectCountNV vkCmdDecompressMemoryIndirectCountNV;
	public static PFN_vkCreateCuModuleNVX vkCreateCuModuleNVX;
	public static PFN_vkCreateCuFunctionNVX vkCreateCuFunctionNVX;
	public static PFN_vkDestroyCuModuleNVX vkDestroyCuModuleNVX;
	public static PFN_vkDestroyCuFunctionNVX vkDestroyCuFunctionNVX;
	public static PFN_vkCmdCuLaunchKernelNVX vkCmdCuLaunchKernelNVX;
	public static PFN_vkGetDescriptorSetLayoutSizeEXT vkGetDescriptorSetLayoutSizeEXT;
	public static PFN_vkGetDescriptorSetLayoutBindingOffsetEXT vkGetDescriptorSetLayoutBindingOffsetEXT;
	public static PFN_vkGetDescriptorEXT vkGetDescriptorEXT;
	public static PFN_vkCmdBindDescriptorBuffersEXT vkCmdBindDescriptorBuffersEXT;
	public static PFN_vkCmdSetDescriptorBufferOffsetsEXT vkCmdSetDescriptorBufferOffsetsEXT;
	public static PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	public static PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT vkGetBufferOpaqueCaptureDescriptorDataEXT;
	public static PFN_vkGetImageOpaqueCaptureDescriptorDataEXT vkGetImageOpaqueCaptureDescriptorDataEXT;
	public static PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	public static PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT vkGetSamplerOpaqueCaptureDescriptorDataEXT;
	public static PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
	public static PFN_vkSetDeviceMemoryPriorityEXT vkSetDeviceMemoryPriorityEXT;
	public static PFN_vkAcquireDrmDisplayEXT vkAcquireDrmDisplayEXT;
	public static PFN_vkGetDrmDisplayEXT vkGetDrmDisplayEXT;
	public static PFN_vkWaitForPresentKHR vkWaitForPresentKHR;
	public static PFN_vkCreateCudaModuleNV vkCreateCudaModuleNV;
	public static PFN_vkGetCudaModuleCacheNV vkGetCudaModuleCacheNV;
	public static PFN_vkCreateCudaFunctionNV vkCreateCudaFunctionNV;
	public static PFN_vkDestroyCudaModuleNV vkDestroyCudaModuleNV;
	public static PFN_vkDestroyCudaFunctionNV vkDestroyCudaFunctionNV;
	public static PFN_vkCmdCudaLaunchKernelNV vkCmdCudaLaunchKernelNV;
	public static PFN_vkCmdBeginRendering vkCmdBeginRendering;
	public static PFN_vkCmdEndRendering vkCmdEndRendering;
	public static PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	public static PFN_vkGetDescriptorSetHostMappingVALVE vkGetDescriptorSetHostMappingVALVE;
	public static PFN_vkCreateMicromapEXT vkCreateMicromapEXT;
	public static PFN_vkCmdBuildMicromapsEXT vkCmdBuildMicromapsEXT;
	public static PFN_vkBuildMicromapsEXT vkBuildMicromapsEXT;
	public static PFN_vkDestroyMicromapEXT vkDestroyMicromapEXT;
	public static PFN_vkCmdCopyMicromapEXT vkCmdCopyMicromapEXT;
	public static PFN_vkCopyMicromapEXT vkCopyMicromapEXT;
	public static PFN_vkCmdCopyMicromapToMemoryEXT vkCmdCopyMicromapToMemoryEXT;
	public static PFN_vkCopyMicromapToMemoryEXT vkCopyMicromapToMemoryEXT;
	public static PFN_vkCmdCopyMemoryToMicromapEXT vkCmdCopyMemoryToMicromapEXT;
	public static PFN_vkCopyMemoryToMicromapEXT vkCopyMemoryToMicromapEXT;
	public static PFN_vkCmdWriteMicromapsPropertiesEXT vkCmdWriteMicromapsPropertiesEXT;
	public static PFN_vkWriteMicromapsPropertiesEXT vkWriteMicromapsPropertiesEXT;
	public static PFN_vkGetDeviceMicromapCompatibilityEXT vkGetDeviceMicromapCompatibilityEXT;
	public static PFN_vkGetMicromapBuildSizesEXT vkGetMicromapBuildSizesEXT;
	public static PFN_vkGetShaderModuleIdentifierEXT vkGetShaderModuleIdentifierEXT;
	public static PFN_vkGetShaderModuleCreateInfoIdentifierEXT vkGetShaderModuleCreateInfoIdentifierEXT;
	public static PFN_vkGetImageSubresourceLayout2 vkGetImageSubresourceLayout2;
	public static PFN_vkGetPipelinePropertiesEXT vkGetPipelinePropertiesEXT;
	public static PFN_vkGetFramebufferTilePropertiesQCOM vkGetFramebufferTilePropertiesQCOM;
	public static PFN_vkGetDynamicRenderingTilePropertiesQCOM vkGetDynamicRenderingTilePropertiesQCOM;
	public static PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	public static PFN_vkCreateOpticalFlowSessionNV vkCreateOpticalFlowSessionNV;
	public static PFN_vkDestroyOpticalFlowSessionNV vkDestroyOpticalFlowSessionNV;
	public static PFN_vkBindOpticalFlowSessionImageNV vkBindOpticalFlowSessionImageNV;
	public static PFN_vkCmdOpticalFlowExecuteNV vkCmdOpticalFlowExecuteNV;
	public static PFN_vkGetDeviceFaultInfoEXT vkGetDeviceFaultInfoEXT;
	public static PFN_vkCmdSetDepthBias2EXT vkCmdSetDepthBias2EXT;
	public static PFN_vkReleaseSwapchainImagesEXT vkReleaseSwapchainImagesEXT;
	public static PFN_vkGetDeviceImageSubresourceLayout vkGetDeviceImageSubresourceLayout;
	public static PFN_vkMapMemory2 vkMapMemory2;
	public static PFN_vkUnmapMemory2 vkUnmapMemory2;
	public static PFN_vkCreateShadersEXT vkCreateShadersEXT;
	public static PFN_vkDestroyShaderEXT vkDestroyShaderEXT;
	public static PFN_vkGetShaderBinaryDataEXT vkGetShaderBinaryDataEXT;
	public static PFN_vkCmdBindShadersEXT vkCmdBindShadersEXT;
	public static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	public static PFN_vkCmdBindDescriptorSets2 vkCmdBindDescriptorSets2;
	public static PFN_vkCmdPushConstants2 vkCmdPushConstants2;
	public static PFN_vkCmdPushDescriptorSet2 vkCmdPushDescriptorSet2;
	public static PFN_vkCmdPushDescriptorSetWithTemplate2 vkCmdPushDescriptorSetWithTemplate2;
	public static PFN_vkCmdSetDescriptorBufferOffsets2EXT vkCmdSetDescriptorBufferOffsets2EXT;
	public static PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
	public static PFN_vkSetLatencySleepModeNV vkSetLatencySleepModeNV;
	public static PFN_vkLatencySleepNV vkLatencySleepNV;
	public static PFN_vkSetLatencyMarkerNV vkSetLatencyMarkerNV;
	public static PFN_vkGetLatencyTimingsNV vkGetLatencyTimingsNV;
	public static PFN_vkQueueNotifyOutOfBandNV vkQueueNotifyOutOfBandNV;
	public static PFN_vkCmdSetRenderingAttachmentLocations vkCmdSetRenderingAttachmentLocations;
	public static PFN_vkCmdSetRenderingInputAttachmentIndices vkCmdSetRenderingInputAttachmentIndices;
	public static PFN_vkCmdSetDepthClampRangeEXT vkCmdSetDepthClampRangeEXT;
	public static PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
}

extension VulkanLoader
{
	public static void Load(PFN_vkGetInstanceProcAddr customGetProc)
	{
		vkCreateInstance = (.)(void*)customGetProc(null, "vkCreateInstance");
		vkGetInstanceProcAddr = (.)(void*)customGetProc(null, "vkGetInstanceProcAddr");
		vkEnumerateInstanceVersion = (.)(void*)customGetProc(null, "vkEnumerateInstanceVersion");
		vkEnumerateInstanceLayerProperties = (.)(void*)customGetProc(null, "vkEnumerateInstanceLayerProperties");
		vkEnumerateInstanceExtensionProperties = (.)(void*)customGetProc(null, "vkEnumerateInstanceExtensionProperties");
	}

	public static void LoadInstance(VkInstance instance)
	{
		vkDestroyInstance = (.)(void*)vkGetInstanceProcAddr(instance, "vkDestroyInstance");
		vkEnumeratePhysicalDevices = (.)(void*)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDevices");
		vkGetDeviceProcAddr = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDeviceProcAddr");
		vkGetPhysicalDeviceProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties");
		vkGetPhysicalDeviceQueueFamilyProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
		vkGetPhysicalDeviceMemoryProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties");
		vkGetPhysicalDeviceFeatures = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures");
		vkGetPhysicalDeviceFormatProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties");
		vkGetPhysicalDeviceImageFormatProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties");
		vkCreateDevice = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateDevice");
		vkEnumerateDeviceLayerProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkEnumerateDeviceLayerProperties");
		vkEnumerateDeviceExtensionProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkEnumerateDeviceExtensionProperties");
		vkGetPhysicalDeviceSparseImageFormatProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
		vkGetPhysicalDeviceDisplayPropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
		vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		vkGetDisplayPlaneSupportedDisplaysKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
		vkGetDisplayModePropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDisplayModePropertiesKHR");
		vkCreateDisplayModeKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateDisplayModeKHR");
		vkGetDisplayPlaneCapabilitiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilitiesKHR");
		vkCreateDisplayPlaneSurfaceKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateDisplayPlaneSurfaceKHR");
		vkDestroySurfaceKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkDestroySurfaceKHR");
		vkGetPhysicalDeviceSurfaceSupportKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
		vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		vkGetPhysicalDeviceSurfaceFormatsKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
		vkGetPhysicalDeviceSurfacePresentModesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
		vkCreateDebugReportCallbackEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT");
		vkDestroyDebugReportCallbackEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkDestroyDebugReportCallbackEXT");
		vkDebugReportMessageEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkDebugReportMessageEXT");
		vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
		vkGetPhysicalDeviceFeatures2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2");
		vkGetPhysicalDeviceProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2");
		vkGetPhysicalDeviceFormatProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2");
		vkGetPhysicalDeviceImageFormatProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2");
		vkGetPhysicalDeviceQueueFamilyProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2");
		vkGetPhysicalDeviceMemoryProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2");
		vkGetPhysicalDeviceSparseImageFormatProperties2 = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2");
		vkGetPhysicalDeviceExternalBufferProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferProperties");
		vkGetPhysicalDeviceExternalSemaphoreProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphoreProperties");
		vkGetPhysicalDeviceExternalFenceProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalFenceProperties");
		vkReleaseDisplayEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkReleaseDisplayEXT");
		vkGetPhysicalDeviceSurfaceCapabilities2EXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
		vkEnumeratePhysicalDeviceGroups = (.)(void*)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroups");
		vkGetPhysicalDevicePresentRectanglesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDevicePresentRectanglesKHR");
		vkGetPhysicalDeviceMultisamplePropertiesEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
		vkGetPhysicalDeviceSurfaceCapabilities2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		vkGetPhysicalDeviceSurfaceFormats2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
		vkGetPhysicalDeviceDisplayProperties2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayProperties2KHR");
		vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		vkGetDisplayModeProperties2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDisplayModeProperties2KHR");
		vkGetDisplayPlaneCapabilities2KHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilities2KHR");
		vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
		vkCreateDebugUtilsMessengerEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
		vkDestroyDebugUtilsMessengerEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT");
		vkSubmitDebugUtilsMessageEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkSubmitDebugUtilsMessageEXT");
		vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
		vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		vkCreateHeadlessSurfaceEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkCreateHeadlessSurfaceEXT");
		vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		vkGetPhysicalDeviceToolProperties = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceToolProperties");
		vkGetPhysicalDeviceFragmentShadingRatesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
		vkGetPhysicalDeviceVideoCapabilitiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR");
		vkGetPhysicalDeviceVideoFormatPropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR");
		vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
		vkAcquireDrmDisplayEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkAcquireDrmDisplayEXT");
		vkGetDrmDisplayEXT = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetDrmDisplayEXT");
		vkGetPhysicalDeviceOpticalFlowImageFormatsNV = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
		vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
		vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = (.)(void*)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV");
	}

	public static void LoadDevice(VkDevice device)
	{
		vkDestroyDevice = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDevice");
		vkGetDeviceQueue = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceQueue");
		vkQueueSubmit = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSubmit");
		vkQueueWaitIdle = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueWaitIdle");
		vkDeviceWaitIdle = (.)(void*)vkGetDeviceProcAddr(device, "vkDeviceWaitIdle");
		vkAllocateMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateMemory");
		vkFreeMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeMemory");
		vkMapMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkMapMemory");
		vkUnmapMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkUnmapMemory");
		vkFlushMappedMemoryRanges = (.)(void*)vkGetDeviceProcAddr(device, "vkFlushMappedMemoryRanges");
		vkInvalidateMappedMemoryRanges = (.)(void*)vkGetDeviceProcAddr(device, "vkInvalidateMappedMemoryRanges");
		vkGetDeviceMemoryCommitment = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryCommitment");
		vkGetBufferMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements");
		vkBindBufferMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkBindBufferMemory");
		vkGetImageMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements");
		vkBindImageMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkBindImageMemory");
		vkGetImageSparseMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements");
		vkQueueBindSparse = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueBindSparse");
		vkCreateFence = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateFence");
		vkDestroyFence = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyFence");
		vkResetFences = (.)(void*)vkGetDeviceProcAddr(device, "vkResetFences");
		vkGetFenceStatus = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFenceStatus");
		vkWaitForFences = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitForFences");
		vkCreateSemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSemaphore");
		vkDestroySemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySemaphore");
		vkCreateEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateEvent");
		vkDestroyEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyEvent");
		vkGetEventStatus = (.)(void*)vkGetDeviceProcAddr(device, "vkGetEventStatus");
		vkSetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkSetEvent");
		vkResetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkResetEvent");
		vkCreateQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateQueryPool");
		vkDestroyQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyQueryPool");
		vkGetQueryPoolResults = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueryPoolResults");
		vkResetQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetQueryPool");
		vkCreateBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateBuffer");
		vkDestroyBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyBuffer");
		vkCreateBufferView = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateBufferView");
		vkDestroyBufferView = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyBufferView");
		vkCreateImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateImage");
		vkDestroyImage = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyImage");
		vkGetImageSubresourceLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout");
		vkCreateImageView = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateImageView");
		vkDestroyImageView = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyImageView");
		vkCreateShaderModule = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateShaderModule");
		vkDestroyShaderModule = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyShaderModule");
		vkCreatePipelineCache = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineCache");
		vkDestroyPipelineCache = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineCache");
		vkGetPipelineCacheData = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineCacheData");
		vkMergePipelineCaches = (.)(void*)vkGetDeviceProcAddr(device, "vkMergePipelineCaches");
		vkCreatePipelineBinariesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineBinariesKHR");
		vkDestroyPipelineBinaryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineBinaryKHR");
		vkGetPipelineKeyKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineKeyKHR");
		vkGetPipelineBinaryDataKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineBinaryDataKHR");
		vkReleaseCapturedPipelineDataKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseCapturedPipelineDataKHR");
		vkCreateGraphicsPipelines = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateGraphicsPipelines");
		vkCreateComputePipelines = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateComputePipelines");
		vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
		vkDestroyPipeline = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipeline");
		vkCreatePipelineLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineLayout");
		vkDestroyPipelineLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineLayout");
		vkCreateSampler = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSampler");
		vkDestroySampler = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySampler");
		vkCreateDescriptorSetLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorSetLayout");
		vkDestroyDescriptorSetLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorSetLayout");
		vkCreateDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorPool");
		vkDestroyDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorPool");
		vkResetDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetDescriptorPool");
		vkAllocateDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateDescriptorSets");
		vkFreeDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeDescriptorSets");
		vkUpdateDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSets");
		vkCreateFramebuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateFramebuffer");
		vkDestroyFramebuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyFramebuffer");
		vkCreateRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRenderPass");
		vkDestroyRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyRenderPass");
		vkGetRenderAreaGranularity = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRenderAreaGranularity");
		vkGetRenderingAreaGranularity = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRenderingAreaGranularity");
		vkCreateCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCommandPool");
		vkDestroyCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCommandPool");
		vkResetCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetCommandPool");
		vkAllocateCommandBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateCommandBuffers");
		vkFreeCommandBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeCommandBuffers");
		vkBeginCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkBeginCommandBuffer");
		vkEndCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkEndCommandBuffer");
		vkResetCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkResetCommandBuffer");
		vkCmdBindPipeline = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindPipeline");
		vkCmdSetAttachmentFeedbackLoopEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
		vkCmdSetViewport = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewport");
		vkCmdSetScissor = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetScissor");
		vkCmdSetLineWidth = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineWidth");
		vkCmdSetDepthBias = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBias");
		vkCmdSetBlendConstants = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetBlendConstants");
		vkCmdSetDepthBounds = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBounds");
		vkCmdSetStencilCompareMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilCompareMask");
		vkCmdSetStencilWriteMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilWriteMask");
		vkCmdSetStencilReference = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilReference");
		vkCmdBindDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorSets");
		vkCmdBindIndexBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindIndexBuffer");
		vkCmdBindVertexBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindVertexBuffers");
		vkCmdDraw = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDraw");
		vkCmdDrawIndexed = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexed");
		vkCmdDrawMultiEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMultiEXT");
		vkCmdDrawMultiIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMultiIndexedEXT");
		vkCmdDrawIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirect");
		vkCmdDrawIndexedIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexedIndirect");
		vkCmdDispatch = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatch");
		vkCmdDispatchIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatchIndirect");
		vkCmdSubpassShadingHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSubpassShadingHUAWEI");
		vkCmdDrawClusterHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawClusterHUAWEI");
		vkCmdDrawClusterIndirectHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawClusterIndirectHUAWEI");
		vkCmdUpdatePipelineIndirectBufferNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdUpdatePipelineIndirectBufferNV");
		vkCmdCopyBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBuffer");
		vkCmdCopyImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImage");
		vkCmdBlitImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBlitImage");
		vkCmdCopyBufferToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBufferToImage");
		vkCmdCopyImageToBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImageToBuffer");
		vkCmdCopyMemoryIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryIndirectNV");
		vkCmdCopyMemoryToImageIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToImageIndirectNV");
		vkCmdUpdateBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdUpdateBuffer");
		vkCmdFillBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdFillBuffer");
		vkCmdClearColorImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearColorImage");
		vkCmdClearDepthStencilImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearDepthStencilImage");
		vkCmdClearAttachments = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearAttachments");
		vkCmdResolveImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResolveImage");
		vkCmdSetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetEvent");
		vkCmdResetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetEvent");
		vkCmdWaitEvents = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWaitEvents");
		vkCmdPipelineBarrier = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPipelineBarrier");
		vkCmdBeginQuery = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginQuery");
		vkCmdEndQuery = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndQuery");
		vkCmdBeginConditionalRenderingEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginConditionalRenderingEXT");
		vkCmdEndConditionalRenderingEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndConditionalRenderingEXT");
		vkCmdResetQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetQueryPool");
		vkCmdWriteTimestamp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteTimestamp");
		vkCmdCopyQueryPoolResults = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyQueryPoolResults");
		vkCmdPushConstants = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushConstants");
		vkCmdBeginRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRenderPass");
		vkCmdNextSubpass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdNextSubpass");
		vkCmdEndRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRenderPass");
		vkCmdExecuteCommands = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteCommands");
		vkCreateSharedSwapchainsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSharedSwapchainsKHR");
		vkCreateSwapchainKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSwapchainKHR");
		vkDestroySwapchainKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySwapchainKHR");
		vkGetSwapchainImagesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainImagesKHR");
		vkAcquireNextImageKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireNextImageKHR");
		vkQueuePresentKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkQueuePresentKHR");
		vkDebugMarkerSetObjectNameEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectNameEXT");
		vkDebugMarkerSetObjectTagEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectTagEXT");
		vkCmdDebugMarkerBeginEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerBeginEXT");
		vkCmdDebugMarkerEndEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerEndEXT");
		vkCmdDebugMarkerInsertEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerInsertEXT");
		vkCmdExecuteGeneratedCommandsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteGeneratedCommandsNV");
		vkCmdPreprocessGeneratedCommandsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPreprocessGeneratedCommandsNV");
		vkCmdBindPipelineShaderGroupNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindPipelineShaderGroupNV");
		vkGetGeneratedCommandsMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetGeneratedCommandsMemoryRequirementsNV");
		vkCreateIndirectCommandsLayoutNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutNV");
		vkDestroyIndirectCommandsLayoutNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutNV");
		vkCmdExecuteGeneratedCommandsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteGeneratedCommandsEXT");
		vkCmdPreprocessGeneratedCommandsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPreprocessGeneratedCommandsEXT");
		vkGetGeneratedCommandsMemoryRequirementsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetGeneratedCommandsMemoryRequirementsEXT");
		vkCreateIndirectCommandsLayoutEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutEXT");
		vkDestroyIndirectCommandsLayoutEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutEXT");
		vkCreateIndirectExecutionSetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectExecutionSetEXT");
		vkDestroyIndirectExecutionSetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectExecutionSetEXT");
		vkUpdateIndirectExecutionSetPipelineEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateIndirectExecutionSetPipelineEXT");
		vkUpdateIndirectExecutionSetShaderEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateIndirectExecutionSetShaderEXT");
		vkCmdPushDescriptorSet = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSet");
		vkTrimCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkTrimCommandPool");
		vkGetMemoryFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryFdKHR");
		vkGetMemoryFdPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryFdPropertiesKHR");
		vkGetMemoryRemoteAddressNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryRemoteAddressNV");
		vkGetSemaphoreFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSemaphoreFdKHR");
		vkImportSemaphoreFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkImportSemaphoreFdKHR");
		vkGetFenceFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFenceFdKHR");
		vkImportFenceFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkImportFenceFdKHR");
		vkDisplayPowerControlEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDisplayPowerControlEXT");
		vkRegisterDeviceEventEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkRegisterDeviceEventEXT");
		vkRegisterDisplayEventEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkRegisterDisplayEventEXT");
		vkGetSwapchainCounterEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainCounterEXT");
		vkGetDeviceGroupPeerMemoryFeatures = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeatures");
		vkBindBufferMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkBindBufferMemory2");
		vkBindImageMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkBindImageMemory2");
		vkCmdSetDeviceMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDeviceMask");
		vkGetDeviceGroupPresentCapabilitiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHR");
		vkGetDeviceGroupSurfacePresentModesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModesKHR");
		vkAcquireNextImage2KHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireNextImage2KHR");
		vkCmdDispatchBase = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatchBase");
		vkCreateDescriptorUpdateTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplate");
		vkDestroyDescriptorUpdateTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplate");
		vkUpdateDescriptorSetWithTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplate");
		vkCmdPushDescriptorSetWithTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplate");
		vkSetHdrMetadataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetHdrMetadataEXT");
		vkGetSwapchainStatusKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainStatusKHR");
		vkGetRefreshCycleDurationGOOGLE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRefreshCycleDurationGOOGLE");
		vkGetPastPresentationTimingGOOGLE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPastPresentationTimingGOOGLE");
		vkCmdSetViewportWScalingNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWScalingNV");
		vkCmdSetDiscardRectangleEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEXT");
		vkCmdSetDiscardRectangleEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEnableEXT");
		vkCmdSetDiscardRectangleModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleModeEXT");
		vkCmdSetSampleLocationsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleLocationsEXT");
		vkGetBufferMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements2");
		vkGetImageMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements2");
		vkGetImageSparseMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements2");
		vkGetDeviceBufferMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceBufferMemoryRequirements");
		vkGetDeviceImageMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageMemoryRequirements");
		vkGetDeviceImageSparseMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageSparseMemoryRequirements");
		vkCreateSamplerYcbcrConversion = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSamplerYcbcrConversion");
		vkDestroySamplerYcbcrConversion = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySamplerYcbcrConversion");
		vkGetDeviceQueue2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceQueue2");
		vkCreateValidationCacheEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateValidationCacheEXT");
		vkDestroyValidationCacheEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyValidationCacheEXT");
		vkGetValidationCacheDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetValidationCacheDataEXT");
		vkMergeValidationCachesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkMergeValidationCachesEXT");
		vkGetDescriptorSetLayoutSupport = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSupport");
		vkGetShaderInfoAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderInfoAMD");
		vkSetLocalDimmingAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLocalDimmingAMD");
		vkGetCalibratedTimestampsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetCalibratedTimestampsKHR");
		vkSetDebugUtilsObjectNameEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectNameEXT");
		vkSetDebugUtilsObjectTagEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectTagEXT");
		vkQueueBeginDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueBeginDebugUtilsLabelEXT");
		vkQueueEndDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueEndDebugUtilsLabelEXT");
		vkQueueInsertDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueInsertDebugUtilsLabelEXT");
		vkCmdBeginDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginDebugUtilsLabelEXT");
		vkCmdEndDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndDebugUtilsLabelEXT");
		vkCmdInsertDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdInsertDebugUtilsLabelEXT");
		vkGetMemoryHostPointerPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryHostPointerPropertiesEXT");
		vkCmdWriteBufferMarkerAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteBufferMarkerAMD");
		vkCreateRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRenderPass2");
		vkCmdBeginRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRenderPass2");
		vkCmdNextSubpass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdNextSubpass2");
		vkCmdEndRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRenderPass2");
		vkGetSemaphoreCounterValue = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSemaphoreCounterValue");
		vkWaitSemaphores = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitSemaphores");
		vkSignalSemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkSignalSemaphore");
		vkCmdDrawIndirectCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirectCount");
		vkCmdDrawIndexedIndirectCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexedIndirectCount");
		vkCmdSetCheckpointNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCheckpointNV");
		vkGetQueueCheckpointDataNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueueCheckpointDataNV");
		vkCmdBindTransformFeedbackBuffersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindTransformFeedbackBuffersEXT");
		vkCmdBeginTransformFeedbackEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginTransformFeedbackEXT");
		vkCmdEndTransformFeedbackEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndTransformFeedbackEXT");
		vkCmdBeginQueryIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginQueryIndexedEXT");
		vkCmdEndQueryIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndQueryIndexedEXT");
		vkCmdDrawIndirectByteCountEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirectByteCountEXT");
		vkCmdSetExclusiveScissorNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExclusiveScissorNV");
		vkCmdSetExclusiveScissorEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExclusiveScissorEnableNV");
		vkCmdBindShadingRateImageNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindShadingRateImageNV");
		vkCmdSetViewportShadingRatePaletteNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportShadingRatePaletteNV");
		vkCmdSetCoarseSampleOrderNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoarseSampleOrderNV");
		vkCmdDrawMeshTasksNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksNV");
		vkCmdDrawMeshTasksIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectNV");
		vkCmdDrawMeshTasksIndirectCountNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectCountNV");
		vkCmdDrawMeshTasksEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksEXT");
		vkCmdDrawMeshTasksIndirectEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectEXT");
		vkCmdDrawMeshTasksIndirectCountEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectCountEXT");
		vkCompileDeferredNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCompileDeferredNV");
		vkCreateAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureNV");
		vkCmdBindInvocationMaskHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindInvocationMaskHUAWEI");
		vkDestroyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureKHR");
		vkDestroyAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureNV");
		vkGetAccelerationStructureMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureMemoryRequirementsNV");
		vkBindAccelerationStructureMemoryNV = (.)(void*)vkGetDeviceProcAddr(device, "vkBindAccelerationStructureMemoryNV");
		vkCmdCopyAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureNV");
		vkCmdCopyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureKHR");
		vkCopyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureKHR");
		vkCmdCopyAccelerationStructureToMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureToMemoryKHR");
		vkCopyAccelerationStructureToMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureToMemoryKHR");
		vkCmdCopyMemoryToAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToAccelerationStructureKHR");
		vkCopyMemoryToAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToAccelerationStructureKHR");
		vkCmdWriteAccelerationStructuresPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteAccelerationStructuresPropertiesKHR");
		vkCmdWriteAccelerationStructuresPropertiesNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteAccelerationStructuresPropertiesNV");
		vkCmdBuildAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructureNV");
		vkWriteAccelerationStructuresPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkWriteAccelerationStructuresPropertiesKHR");
		vkCmdTraceRaysKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysKHR");
		vkCmdTraceRaysNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysNV");
		vkGetRayTracingShaderGroupHandlesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupHandlesKHR");
		vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		vkGetAccelerationStructureHandleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureHandleNV");
		vkCreateRayTracingPipelinesNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesNV");
		vkCreateRayTracingPipelinesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesKHR");
		vkCmdTraceRaysIndirectKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysIndirectKHR");
		vkCmdTraceRaysIndirect2KHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysIndirect2KHR");
		vkGetDeviceAccelerationStructureCompatibilityKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceAccelerationStructureCompatibilityKHR");
		vkGetRayTracingShaderGroupStackSizeKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupStackSizeKHR");
		vkCmdSetRayTracingPipelineStackSizeKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRayTracingPipelineStackSizeKHR");
		vkGetImageViewHandleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewHandleNVX");
		vkGetImageViewHandle64NVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewHandle64NVX");
		vkGetImageViewAddressNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewAddressNVX");
		vkAcquireProfilingLockKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireProfilingLockKHR");
		vkReleaseProfilingLockKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseProfilingLockKHR");
		vkGetImageDrmFormatModifierPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageDrmFormatModifierPropertiesEXT");
		vkGetBufferOpaqueCaptureAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureAddress");
		vkGetBufferDeviceAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddress");
		vkInitializePerformanceApiINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkInitializePerformanceApiINTEL");
		vkUninitializePerformanceApiINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkUninitializePerformanceApiINTEL");
		vkCmdSetPerformanceMarkerINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceMarkerINTEL");
		vkCmdSetPerformanceStreamMarkerINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceStreamMarkerINTEL");
		vkCmdSetPerformanceOverrideINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceOverrideINTEL");
		vkAcquirePerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquirePerformanceConfigurationINTEL");
		vkReleasePerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkReleasePerformanceConfigurationINTEL");
		vkQueueSetPerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSetPerformanceConfigurationINTEL");
		vkGetPerformanceParameterINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPerformanceParameterINTEL");
		vkGetDeviceMemoryOpaqueCaptureAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryOpaqueCaptureAddress");
		vkGetPipelineExecutablePropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutablePropertiesKHR");
		vkGetPipelineExecutableStatisticsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableStatisticsKHR");
		vkGetPipelineExecutableInternalRepresentationsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableInternalRepresentationsKHR");
		vkCmdSetLineStipple = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineStipple");
		vkCreateAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureKHR");
		vkCmdBuildAccelerationStructuresKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructuresKHR");
		vkCmdBuildAccelerationStructuresIndirectKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructuresIndirectKHR");
		vkBuildAccelerationStructuresKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkBuildAccelerationStructuresKHR");
		vkGetAccelerationStructureDeviceAddressKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureDeviceAddressKHR");
		vkCreateDeferredOperationKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDeferredOperationKHR");
		vkDestroyDeferredOperationKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDeferredOperationKHR");
		vkGetDeferredOperationMaxConcurrencyKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeferredOperationMaxConcurrencyKHR");
		vkGetDeferredOperationResultKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeferredOperationResultKHR");
		vkDeferredOperationJoinKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDeferredOperationJoinKHR");
		vkGetPipelineIndirectMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectMemoryRequirementsNV");
		vkGetPipelineIndirectDeviceAddressNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectDeviceAddressNV");
		vkAntiLagUpdateAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkAntiLagUpdateAMD");
		vkCmdSetCullMode = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCullMode");
		vkCmdSetFrontFace = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFrontFace");
		vkCmdSetPrimitiveTopology = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPrimitiveTopology");
		vkCmdSetViewportWithCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWithCount");
		vkCmdSetScissorWithCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetScissorWithCount");
		vkCmdBindIndexBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindIndexBuffer2");
		vkCmdBindVertexBuffers2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindVertexBuffers2");
		vkCmdSetDepthTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthTestEnable");
		vkCmdSetDepthWriteEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthWriteEnable");
		vkCmdSetDepthCompareOp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthCompareOp");
		vkCmdSetDepthBoundsTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBoundsTestEnable");
		vkCmdSetStencilTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilTestEnable");
		vkCmdSetStencilOp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilOp");
		vkCmdSetPatchControlPointsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPatchControlPointsEXT");
		vkCmdSetRasterizerDiscardEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizerDiscardEnable");
		vkCmdSetDepthBiasEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBiasEnable");
		vkCmdSetLogicOpEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLogicOpEXT");
		vkCmdSetPrimitiveRestartEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPrimitiveRestartEnable");
		vkCmdSetTessellationDomainOriginEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetTessellationDomainOriginEXT");
		vkCmdSetDepthClampEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClampEnableEXT");
		vkCmdSetPolygonModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPolygonModeEXT");
		vkCmdSetRasterizationSamplesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizationSamplesEXT");
		vkCmdSetSampleMaskEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleMaskEXT");
		vkCmdSetAlphaToCoverageEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAlphaToCoverageEnableEXT");
		vkCmdSetAlphaToOneEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAlphaToOneEnableEXT");
		vkCmdSetLogicOpEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLogicOpEnableEXT");
		vkCmdSetColorBlendEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendEnableEXT");
		vkCmdSetColorBlendEquationEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendEquationEXT");
		vkCmdSetColorWriteMaskEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorWriteMaskEXT");
		vkCmdSetRasterizationStreamEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizationStreamEXT");
		vkCmdSetConservativeRasterizationModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetConservativeRasterizationModeEXT");
		vkCmdSetExtraPrimitiveOverestimationSizeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
		vkCmdSetDepthClipEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClipEnableEXT");
		vkCmdSetSampleLocationsEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleLocationsEnableEXT");
		vkCmdSetColorBlendAdvancedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendAdvancedEXT");
		vkCmdSetProvokingVertexModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetProvokingVertexModeEXT");
		vkCmdSetLineRasterizationModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineRasterizationModeEXT");
		vkCmdSetLineStippleEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineStippleEnableEXT");
		vkCmdSetDepthClipNegativeOneToOneEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClipNegativeOneToOneEXT");
		vkCmdSetViewportWScalingEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWScalingEnableNV");
		vkCmdSetViewportSwizzleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportSwizzleNV");
		vkCmdSetCoverageToColorEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageToColorEnableNV");
		vkCmdSetCoverageToColorLocationNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageToColorLocationNV");
		vkCmdSetCoverageModulationModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationModeNV");
		vkCmdSetCoverageModulationTableEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationTableEnableNV");
		vkCmdSetCoverageModulationTableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationTableNV");
		vkCmdSetShadingRateImageEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetShadingRateImageEnableNV");
		vkCmdSetCoverageReductionModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageReductionModeNV");
		vkCmdSetRepresentativeFragmentTestEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRepresentativeFragmentTestEnableNV");
		vkCreatePrivateDataSlot = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePrivateDataSlot");
		vkDestroyPrivateDataSlot = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPrivateDataSlot");
		vkSetPrivateData = (.)(void*)vkGetDeviceProcAddr(device, "vkSetPrivateData");
		vkGetPrivateData = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPrivateData");
		vkCmdCopyBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBuffer2");
		vkCmdCopyImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImage2");
		vkCmdBlitImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBlitImage2");
		vkCmdCopyBufferToImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBufferToImage2");
		vkCmdCopyImageToBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImageToBuffer2");
		vkCmdResolveImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResolveImage2");
		vkCmdSetFragmentShadingRateKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFragmentShadingRateKHR");
		vkCmdSetFragmentShadingRateEnumNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFragmentShadingRateEnumNV");
		vkGetAccelerationStructureBuildSizesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureBuildSizesKHR");
		vkCmdSetVertexInputEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetVertexInputEXT");
		vkCmdSetColorWriteEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorWriteEnableEXT");
		vkCmdSetEvent2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetEvent2");
		vkCmdResetEvent2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetEvent2");
		vkCmdWaitEvents2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWaitEvents2");
		vkCmdPipelineBarrier2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPipelineBarrier2");
		vkQueueSubmit2 = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSubmit2");
		vkCmdWriteTimestamp2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteTimestamp2");
		vkCmdWriteBufferMarker2AMD = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteBufferMarker2AMD");
		vkGetQueueCheckpointData2NV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueueCheckpointData2NV");
		vkCopyMemoryToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToImage");
		vkCopyImageToMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyImageToMemory");
		vkCopyImageToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyImageToImage");
		vkTransitionImageLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkTransitionImageLayout");
		vkCreateVideoSessionKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateVideoSessionKHR");
		vkDestroyVideoSessionKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionKHR");
		vkCreateVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateVideoSessionParametersKHR");
		vkUpdateVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateVideoSessionParametersKHR");
		vkGetEncodedVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetEncodedVideoSessionParametersKHR");
		vkDestroyVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionParametersKHR");
		vkGetVideoSessionMemoryRequirementsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetVideoSessionMemoryRequirementsKHR");
		vkBindVideoSessionMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkBindVideoSessionMemoryKHR");
		vkCmdDecodeVideoKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecodeVideoKHR");
		vkCmdBeginVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginVideoCodingKHR");
		vkCmdControlVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdControlVideoCodingKHR");
		vkCmdEndVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndVideoCodingKHR");
		vkCmdEncodeVideoKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEncodeVideoKHR");
		vkCmdDecompressMemoryNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecompressMemoryNV");
		vkCmdDecompressMemoryIndirectCountNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecompressMemoryIndirectCountNV");
		vkCreateCuModuleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCuModuleNVX");
		vkCreateCuFunctionNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCuFunctionNVX");
		vkDestroyCuModuleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCuModuleNVX");
		vkDestroyCuFunctionNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCuFunctionNVX");
		vkCmdCuLaunchKernelNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCuLaunchKernelNVX");
		vkGetDescriptorSetLayoutSizeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSizeEXT");
		vkGetDescriptorSetLayoutBindingOffsetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutBindingOffsetEXT");
		vkGetDescriptorEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorEXT");
		vkCmdBindDescriptorBuffersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBuffersEXT");
		vkCmdSetDescriptorBufferOffsetsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDescriptorBufferOffsetsEXT");
		vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
		vkGetBufferOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
		vkGetImageOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageOpaqueCaptureDescriptorDataEXT");
		vkGetImageViewOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
		vkGetSamplerOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
		vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
		vkSetDeviceMemoryPriorityEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDeviceMemoryPriorityEXT");
		vkWaitForPresentKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitForPresentKHR");
		vkCreateCudaModuleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCudaModuleNV");
		vkGetCudaModuleCacheNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetCudaModuleCacheNV");
		vkCreateCudaFunctionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCudaFunctionNV");
		vkDestroyCudaModuleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCudaModuleNV");
		vkDestroyCudaFunctionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCudaFunctionNV");
		vkCmdCudaLaunchKernelNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCudaLaunchKernelNV");
		vkCmdBeginRendering = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRendering");
		vkCmdEndRendering = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRendering");
		vkGetDescriptorSetLayoutHostMappingInfoVALVE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
		vkGetDescriptorSetHostMappingVALVE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetHostMappingVALVE");
		vkCreateMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateMicromapEXT");
		vkCmdBuildMicromapsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildMicromapsEXT");
		vkBuildMicromapsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkBuildMicromapsEXT");
		vkDestroyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyMicromapEXT");
		vkCmdCopyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMicromapEXT");
		vkCopyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMicromapEXT");
		vkCmdCopyMicromapToMemoryEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMicromapToMemoryEXT");
		vkCopyMicromapToMemoryEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMicromapToMemoryEXT");
		vkCmdCopyMemoryToMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToMicromapEXT");
		vkCopyMemoryToMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToMicromapEXT");
		vkCmdWriteMicromapsPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteMicromapsPropertiesEXT");
		vkWriteMicromapsPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkWriteMicromapsPropertiesEXT");
		vkGetDeviceMicromapCompatibilityEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMicromapCompatibilityEXT");
		vkGetMicromapBuildSizesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMicromapBuildSizesEXT");
		vkGetShaderModuleIdentifierEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderModuleIdentifierEXT");
		vkGetShaderModuleCreateInfoIdentifierEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderModuleCreateInfoIdentifierEXT");
		vkGetImageSubresourceLayout2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout2");
		vkGetPipelinePropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelinePropertiesEXT");
		vkGetFramebufferTilePropertiesQCOM = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFramebufferTilePropertiesQCOM");
		vkGetDynamicRenderingTilePropertiesQCOM = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDynamicRenderingTilePropertiesQCOM");
		vkCreateOpticalFlowSessionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateOpticalFlowSessionNV");
		vkDestroyOpticalFlowSessionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyOpticalFlowSessionNV");
		vkBindOpticalFlowSessionImageNV = (.)(void*)vkGetDeviceProcAddr(device, "vkBindOpticalFlowSessionImageNV");
		vkCmdOpticalFlowExecuteNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdOpticalFlowExecuteNV");
		vkGetDeviceFaultInfoEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceFaultInfoEXT");
		vkCmdSetDepthBias2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBias2EXT");
		vkReleaseSwapchainImagesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseSwapchainImagesEXT");
		vkGetDeviceImageSubresourceLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageSubresourceLayout");
		vkMapMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkMapMemory2");
		vkUnmapMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkUnmapMemory2");
		vkCreateShadersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateShadersEXT");
		vkDestroyShaderEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyShaderEXT");
		vkGetShaderBinaryDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderBinaryDataEXT");
		vkCmdBindShadersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindShadersEXT");
		vkCmdBindDescriptorSets2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorSets2");
		vkCmdPushConstants2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushConstants2");
		vkCmdPushDescriptorSet2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSet2");
		vkCmdPushDescriptorSetWithTemplate2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplate2");
		vkCmdSetDescriptorBufferOffsets2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDescriptorBufferOffsets2EXT");
		vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
		vkSetLatencySleepModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLatencySleepModeNV");
		vkLatencySleepNV = (.)(void*)vkGetDeviceProcAddr(device, "vkLatencySleepNV");
		vkSetLatencyMarkerNV = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLatencyMarkerNV");
		vkGetLatencyTimingsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetLatencyTimingsNV");
		vkQueueNotifyOutOfBandNV = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueNotifyOutOfBandNV");
		vkCmdSetRenderingAttachmentLocations = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRenderingAttachmentLocations");
		vkCmdSetRenderingInputAttachmentIndices = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRenderingInputAttachmentIndices");
		vkCmdSetDepthClampRangeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClampRangeEXT");
	}
}

struct VulkanDeviceTable
{
	public PFN_vkDestroyDevice vkDestroyDevice;
	public PFN_vkGetDeviceQueue vkGetDeviceQueue;
	public PFN_vkQueueSubmit vkQueueSubmit;
	public PFN_vkQueueWaitIdle vkQueueWaitIdle;
	public PFN_vkDeviceWaitIdle vkDeviceWaitIdle;
	public PFN_vkAllocateMemory vkAllocateMemory;
	public PFN_vkFreeMemory vkFreeMemory;
	public PFN_vkMapMemory vkMapMemory;
	public PFN_vkUnmapMemory vkUnmapMemory;
	public PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;
	public PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;
	public PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment;
	public PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;
	public PFN_vkBindBufferMemory vkBindBufferMemory;
	public PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;
	public PFN_vkBindImageMemory vkBindImageMemory;
	public PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements;
	public PFN_vkQueueBindSparse vkQueueBindSparse;
	public PFN_vkCreateFence vkCreateFence;
	public PFN_vkDestroyFence vkDestroyFence;
	public PFN_vkResetFences vkResetFences;
	public PFN_vkGetFenceStatus vkGetFenceStatus;
	public PFN_vkWaitForFences vkWaitForFences;
	public PFN_vkCreateSemaphore vkCreateSemaphore;
	public PFN_vkDestroySemaphore vkDestroySemaphore;
	public PFN_vkCreateEvent vkCreateEvent;
	public PFN_vkDestroyEvent vkDestroyEvent;
	public PFN_vkGetEventStatus vkGetEventStatus;
	public PFN_vkSetEvent vkSetEvent;
	public PFN_vkResetEvent vkResetEvent;
	public PFN_vkCreateQueryPool vkCreateQueryPool;
	public PFN_vkDestroyQueryPool vkDestroyQueryPool;
	public PFN_vkGetQueryPoolResults vkGetQueryPoolResults;
	public PFN_vkResetQueryPool vkResetQueryPool;
	public PFN_vkCreateBuffer vkCreateBuffer;
	public PFN_vkDestroyBuffer vkDestroyBuffer;
	public PFN_vkCreateBufferView vkCreateBufferView;
	public PFN_vkDestroyBufferView vkDestroyBufferView;
	public PFN_vkCreateImage vkCreateImage;
	public PFN_vkDestroyImage vkDestroyImage;
	public PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout;
	public PFN_vkCreateImageView vkCreateImageView;
	public PFN_vkDestroyImageView vkDestroyImageView;
	public PFN_vkCreateShaderModule vkCreateShaderModule;
	public PFN_vkDestroyShaderModule vkDestroyShaderModule;
	public PFN_vkCreatePipelineCache vkCreatePipelineCache;
	public PFN_vkDestroyPipelineCache vkDestroyPipelineCache;
	public PFN_vkGetPipelineCacheData vkGetPipelineCacheData;
	public PFN_vkMergePipelineCaches vkMergePipelineCaches;
	public PFN_vkCreatePipelineBinariesKHR vkCreatePipelineBinariesKHR;
	public PFN_vkDestroyPipelineBinaryKHR vkDestroyPipelineBinaryKHR;
	public PFN_vkGetPipelineKeyKHR vkGetPipelineKeyKHR;
	public PFN_vkGetPipelineBinaryDataKHR vkGetPipelineBinaryDataKHR;
	public PFN_vkReleaseCapturedPipelineDataKHR vkReleaseCapturedPipelineDataKHR;
	public PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines;
	public PFN_vkCreateComputePipelines vkCreateComputePipelines;
	public PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	public PFN_vkDestroyPipeline vkDestroyPipeline;
	public PFN_vkCreatePipelineLayout vkCreatePipelineLayout;
	public PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout;
	public PFN_vkCreateSampler vkCreateSampler;
	public PFN_vkDestroySampler vkDestroySampler;
	public PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout;
	public PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout;
	public PFN_vkCreateDescriptorPool vkCreateDescriptorPool;
	public PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool;
	public PFN_vkResetDescriptorPool vkResetDescriptorPool;
	public PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets;
	public PFN_vkFreeDescriptorSets vkFreeDescriptorSets;
	public PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets;
	public PFN_vkCreateFramebuffer vkCreateFramebuffer;
	public PFN_vkDestroyFramebuffer vkDestroyFramebuffer;
	public PFN_vkCreateRenderPass vkCreateRenderPass;
	public PFN_vkDestroyRenderPass vkDestroyRenderPass;
	public PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity;
	public PFN_vkGetRenderingAreaGranularity vkGetRenderingAreaGranularity;
	public PFN_vkCreateCommandPool vkCreateCommandPool;
	public PFN_vkDestroyCommandPool vkDestroyCommandPool;
	public PFN_vkResetCommandPool vkResetCommandPool;
	public PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers;
	public PFN_vkFreeCommandBuffers vkFreeCommandBuffers;
	public PFN_vkBeginCommandBuffer vkBeginCommandBuffer;
	public PFN_vkEndCommandBuffer vkEndCommandBuffer;
	public PFN_vkResetCommandBuffer vkResetCommandBuffer;
	public PFN_vkCmdBindPipeline vkCmdBindPipeline;
	public PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT vkCmdSetAttachmentFeedbackLoopEnableEXT;
	public PFN_vkCmdSetViewport vkCmdSetViewport;
	public PFN_vkCmdSetScissor vkCmdSetScissor;
	public PFN_vkCmdSetLineWidth vkCmdSetLineWidth;
	public PFN_vkCmdSetDepthBias vkCmdSetDepthBias;
	public PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants;
	public PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds;
	public PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask;
	public PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask;
	public PFN_vkCmdSetStencilReference vkCmdSetStencilReference;
	public PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets;
	public PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer;
	public PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers;
	public PFN_vkCmdDraw vkCmdDraw;
	public PFN_vkCmdDrawIndexed vkCmdDrawIndexed;
	public PFN_vkCmdDrawMultiEXT vkCmdDrawMultiEXT;
	public PFN_vkCmdDrawMultiIndexedEXT vkCmdDrawMultiIndexedEXT;
	public PFN_vkCmdDrawIndirect vkCmdDrawIndirect;
	public PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect;
	public PFN_vkCmdDispatch vkCmdDispatch;
	public PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect;
	public PFN_vkCmdSubpassShadingHUAWEI vkCmdSubpassShadingHUAWEI;
	public PFN_vkCmdDrawClusterHUAWEI vkCmdDrawClusterHUAWEI;
	public PFN_vkCmdDrawClusterIndirectHUAWEI vkCmdDrawClusterIndirectHUAWEI;
	public PFN_vkCmdUpdatePipelineIndirectBufferNV vkCmdUpdatePipelineIndirectBufferNV;
	public PFN_vkCmdCopyBuffer vkCmdCopyBuffer;
	public PFN_vkCmdCopyImage vkCmdCopyImage;
	public PFN_vkCmdBlitImage vkCmdBlitImage;
	public PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage;
	public PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer;
	public PFN_vkCmdCopyMemoryIndirectNV vkCmdCopyMemoryIndirectNV;
	public PFN_vkCmdCopyMemoryToImageIndirectNV vkCmdCopyMemoryToImageIndirectNV;
	public PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer;
	public PFN_vkCmdFillBuffer vkCmdFillBuffer;
	public PFN_vkCmdClearColorImage vkCmdClearColorImage;
	public PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage;
	public PFN_vkCmdClearAttachments vkCmdClearAttachments;
	public PFN_vkCmdResolveImage vkCmdResolveImage;
	public PFN_vkCmdSetEvent vkCmdSetEvent;
	public PFN_vkCmdResetEvent vkCmdResetEvent;
	public PFN_vkCmdWaitEvents vkCmdWaitEvents;
	public PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier;
	public PFN_vkCmdBeginQuery vkCmdBeginQuery;
	public PFN_vkCmdEndQuery vkCmdEndQuery;
	public PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT;
	public PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT;
	public PFN_vkCmdResetQueryPool vkCmdResetQueryPool;
	public PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp;
	public PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults;
	public PFN_vkCmdPushConstants vkCmdPushConstants;
	public PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass;
	public PFN_vkCmdNextSubpass vkCmdNextSubpass;
	public PFN_vkCmdEndRenderPass vkCmdEndRenderPass;
	public PFN_vkCmdExecuteCommands vkCmdExecuteCommands;
	public PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR;
	public PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
	public PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;
	public PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;
	public PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;
	public PFN_vkQueuePresentKHR vkQueuePresentKHR;
	public PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT;
	public PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT;
	public PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT;
	public PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT;
	public PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT;
	public PFN_vkCmdExecuteGeneratedCommandsNV vkCmdExecuteGeneratedCommandsNV;
	public PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV;
	public PFN_vkCmdBindPipelineShaderGroupNV vkCmdBindPipelineShaderGroupNV;
	public PFN_vkGetGeneratedCommandsMemoryRequirementsNV vkGetGeneratedCommandsMemoryRequirementsNV;
	public PFN_vkCreateIndirectCommandsLayoutNV vkCreateIndirectCommandsLayoutNV;
	public PFN_vkDestroyIndirectCommandsLayoutNV vkDestroyIndirectCommandsLayoutNV;
	public PFN_vkCmdExecuteGeneratedCommandsEXT vkCmdExecuteGeneratedCommandsEXT;
	public PFN_vkCmdPreprocessGeneratedCommandsEXT vkCmdPreprocessGeneratedCommandsEXT;
	public PFN_vkGetGeneratedCommandsMemoryRequirementsEXT vkGetGeneratedCommandsMemoryRequirementsEXT;
	public PFN_vkCreateIndirectCommandsLayoutEXT vkCreateIndirectCommandsLayoutEXT;
	public PFN_vkDestroyIndirectCommandsLayoutEXT vkDestroyIndirectCommandsLayoutEXT;
	public PFN_vkCreateIndirectExecutionSetEXT vkCreateIndirectExecutionSetEXT;
	public PFN_vkDestroyIndirectExecutionSetEXT vkDestroyIndirectExecutionSetEXT;
	public PFN_vkUpdateIndirectExecutionSetPipelineEXT vkUpdateIndirectExecutionSetPipelineEXT;
	public PFN_vkUpdateIndirectExecutionSetShaderEXT vkUpdateIndirectExecutionSetShaderEXT;
	public PFN_vkCmdPushDescriptorSet vkCmdPushDescriptorSet;
	public PFN_vkTrimCommandPool vkTrimCommandPool;
	public PFN_vkGetMemoryFdKHR vkGetMemoryFdKHR;
	public PFN_vkGetMemoryFdPropertiesKHR vkGetMemoryFdPropertiesKHR;
	public PFN_vkGetMemoryRemoteAddressNV vkGetMemoryRemoteAddressNV;
	public PFN_vkGetSemaphoreFdKHR vkGetSemaphoreFdKHR;
	public PFN_vkImportSemaphoreFdKHR vkImportSemaphoreFdKHR;
	public PFN_vkGetFenceFdKHR vkGetFenceFdKHR;
	public PFN_vkImportFenceFdKHR vkImportFenceFdKHR;
	public PFN_vkDisplayPowerControlEXT vkDisplayPowerControlEXT;
	public PFN_vkRegisterDeviceEventEXT vkRegisterDeviceEventEXT;
	public PFN_vkRegisterDisplayEventEXT vkRegisterDisplayEventEXT;
	public PFN_vkGetSwapchainCounterEXT vkGetSwapchainCounterEXT;
	public PFN_vkGetDeviceGroupPeerMemoryFeatures vkGetDeviceGroupPeerMemoryFeatures;
	public PFN_vkBindBufferMemory2 vkBindBufferMemory2;
	public PFN_vkBindImageMemory2 vkBindImageMemory2;
	public PFN_vkCmdSetDeviceMask vkCmdSetDeviceMask;
	public PFN_vkGetDeviceGroupPresentCapabilitiesKHR vkGetDeviceGroupPresentCapabilitiesKHR;
	public PFN_vkGetDeviceGroupSurfacePresentModesKHR vkGetDeviceGroupSurfacePresentModesKHR;
	public PFN_vkAcquireNextImage2KHR vkAcquireNextImage2KHR;
	public PFN_vkCmdDispatchBase vkCmdDispatchBase;
	public PFN_vkCreateDescriptorUpdateTemplate vkCreateDescriptorUpdateTemplate;
	public PFN_vkDestroyDescriptorUpdateTemplate vkDestroyDescriptorUpdateTemplate;
	public PFN_vkUpdateDescriptorSetWithTemplate vkUpdateDescriptorSetWithTemplate;
	public PFN_vkCmdPushDescriptorSetWithTemplate vkCmdPushDescriptorSetWithTemplate;
	public PFN_vkSetHdrMetadataEXT vkSetHdrMetadataEXT;
	public PFN_vkGetSwapchainStatusKHR vkGetSwapchainStatusKHR;
	public PFN_vkGetRefreshCycleDurationGOOGLE vkGetRefreshCycleDurationGOOGLE;
	public PFN_vkGetPastPresentationTimingGOOGLE vkGetPastPresentationTimingGOOGLE;
	public PFN_vkCmdSetViewportWScalingNV vkCmdSetViewportWScalingNV;
	public PFN_vkCmdSetDiscardRectangleEXT vkCmdSetDiscardRectangleEXT;
	public PFN_vkCmdSetDiscardRectangleEnableEXT vkCmdSetDiscardRectangleEnableEXT;
	public PFN_vkCmdSetDiscardRectangleModeEXT vkCmdSetDiscardRectangleModeEXT;
	public PFN_vkCmdSetSampleLocationsEXT vkCmdSetSampleLocationsEXT;
	public PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2;
	public PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2;
	public PFN_vkGetImageSparseMemoryRequirements2 vkGetImageSparseMemoryRequirements2;
	public PFN_vkGetDeviceBufferMemoryRequirements vkGetDeviceBufferMemoryRequirements;
	public PFN_vkGetDeviceImageMemoryRequirements vkGetDeviceImageMemoryRequirements;
	public PFN_vkGetDeviceImageSparseMemoryRequirements vkGetDeviceImageSparseMemoryRequirements;
	public PFN_vkCreateSamplerYcbcrConversion vkCreateSamplerYcbcrConversion;
	public PFN_vkDestroySamplerYcbcrConversion vkDestroySamplerYcbcrConversion;
	public PFN_vkGetDeviceQueue2 vkGetDeviceQueue2;
	public PFN_vkCreateValidationCacheEXT vkCreateValidationCacheEXT;
	public PFN_vkDestroyValidationCacheEXT vkDestroyValidationCacheEXT;
	public PFN_vkGetValidationCacheDataEXT vkGetValidationCacheDataEXT;
	public PFN_vkMergeValidationCachesEXT vkMergeValidationCachesEXT;
	public PFN_vkGetDescriptorSetLayoutSupport vkGetDescriptorSetLayoutSupport;
	public PFN_vkGetShaderInfoAMD vkGetShaderInfoAMD;
	public PFN_vkSetLocalDimmingAMD vkSetLocalDimmingAMD;
	public PFN_vkGetCalibratedTimestampsKHR vkGetCalibratedTimestampsKHR;
	public PFN_vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectNameEXT;
	public PFN_vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectTagEXT;
	public PFN_vkQueueBeginDebugUtilsLabelEXT vkQueueBeginDebugUtilsLabelEXT;
	public PFN_vkQueueEndDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT;
	public PFN_vkQueueInsertDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT;
	public PFN_vkCmdBeginDebugUtilsLabelEXT vkCmdBeginDebugUtilsLabelEXT;
	public PFN_vkCmdEndDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT;
	public PFN_vkCmdInsertDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT;
	public PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT;
	public PFN_vkCmdWriteBufferMarkerAMD vkCmdWriteBufferMarkerAMD;
	public PFN_vkCreateRenderPass2 vkCreateRenderPass2;
	public PFN_vkCmdBeginRenderPass2 vkCmdBeginRenderPass2;
	public PFN_vkCmdNextSubpass2 vkCmdNextSubpass2;
	public PFN_vkCmdEndRenderPass2 vkCmdEndRenderPass2;
	public PFN_vkGetSemaphoreCounterValue vkGetSemaphoreCounterValue;
	public PFN_vkWaitSemaphores vkWaitSemaphores;
	public PFN_vkSignalSemaphore vkSignalSemaphore;
	public PFN_vkCmdDrawIndirectCount vkCmdDrawIndirectCount;
	public PFN_vkCmdDrawIndexedIndirectCount vkCmdDrawIndexedIndirectCount;
	public PFN_vkCmdSetCheckpointNV vkCmdSetCheckpointNV;
	public PFN_vkGetQueueCheckpointDataNV vkGetQueueCheckpointDataNV;
	public PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT;
	public PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT;
	public PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT;
	public PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT;
	public PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT;
	public PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT;
	public PFN_vkCmdSetExclusiveScissorNV vkCmdSetExclusiveScissorNV;
	public PFN_vkCmdSetExclusiveScissorEnableNV vkCmdSetExclusiveScissorEnableNV;
	public PFN_vkCmdBindShadingRateImageNV vkCmdBindShadingRateImageNV;
	public PFN_vkCmdSetViewportShadingRatePaletteNV vkCmdSetViewportShadingRatePaletteNV;
	public PFN_vkCmdSetCoarseSampleOrderNV vkCmdSetCoarseSampleOrderNV;
	public PFN_vkCmdDrawMeshTasksNV vkCmdDrawMeshTasksNV;
	public PFN_vkCmdDrawMeshTasksIndirectNV vkCmdDrawMeshTasksIndirectNV;
	public PFN_vkCmdDrawMeshTasksIndirectCountNV vkCmdDrawMeshTasksIndirectCountNV;
	public PFN_vkCmdDrawMeshTasksEXT vkCmdDrawMeshTasksEXT;
	public PFN_vkCmdDrawMeshTasksIndirectEXT vkCmdDrawMeshTasksIndirectEXT;
	public PFN_vkCmdDrawMeshTasksIndirectCountEXT vkCmdDrawMeshTasksIndirectCountEXT;
	public PFN_vkCompileDeferredNV vkCompileDeferredNV;
	public PFN_vkCreateAccelerationStructureNV vkCreateAccelerationStructureNV;
	public PFN_vkCmdBindInvocationMaskHUAWEI vkCmdBindInvocationMaskHUAWEI;
	public PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR;
	public PFN_vkDestroyAccelerationStructureNV vkDestroyAccelerationStructureNV;
	public PFN_vkGetAccelerationStructureMemoryRequirementsNV vkGetAccelerationStructureMemoryRequirementsNV;
	public PFN_vkBindAccelerationStructureMemoryNV vkBindAccelerationStructureMemoryNV;
	public PFN_vkCmdCopyAccelerationStructureNV vkCmdCopyAccelerationStructureNV;
	public PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructureKHR;
	public PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructureKHR;
	public PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemoryKHR;
	public PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemoryKHR;
	public PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructureKHR;
	public PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructureKHR;
	public PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresPropertiesKHR;
	public PFN_vkCmdWriteAccelerationStructuresPropertiesNV vkCmdWriteAccelerationStructuresPropertiesNV;
	public PFN_vkCmdBuildAccelerationStructureNV vkCmdBuildAccelerationStructureNV;
	public PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresPropertiesKHR;
	public PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR;
	public PFN_vkCmdTraceRaysNV vkCmdTraceRaysNV;
	public PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR;
	public PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	public PFN_vkGetAccelerationStructureHandleNV vkGetAccelerationStructureHandleNV;
	public PFN_vkCreateRayTracingPipelinesNV vkCreateRayTracingPipelinesNV;
	public PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR;
	public PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirectKHR;
	public PFN_vkCmdTraceRaysIndirect2KHR vkCmdTraceRaysIndirect2KHR;
	public PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibilityKHR;
	public PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSizeKHR;
	public PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSizeKHR;
	public PFN_vkGetImageViewHandleNVX vkGetImageViewHandleNVX;
	public PFN_vkGetImageViewHandle64NVX vkGetImageViewHandle64NVX;
	public PFN_vkGetImageViewAddressNVX vkGetImageViewAddressNVX;
	public PFN_vkAcquireProfilingLockKHR vkAcquireProfilingLockKHR;
	public PFN_vkReleaseProfilingLockKHR vkReleaseProfilingLockKHR;
	public PFN_vkGetImageDrmFormatModifierPropertiesEXT vkGetImageDrmFormatModifierPropertiesEXT;
	public PFN_vkGetBufferOpaqueCaptureAddress vkGetBufferOpaqueCaptureAddress;
	public PFN_vkGetBufferDeviceAddress vkGetBufferDeviceAddress;
	public PFN_vkInitializePerformanceApiINTEL vkInitializePerformanceApiINTEL;
	public PFN_vkUninitializePerformanceApiINTEL vkUninitializePerformanceApiINTEL;
	public PFN_vkCmdSetPerformanceMarkerINTEL vkCmdSetPerformanceMarkerINTEL;
	public PFN_vkCmdSetPerformanceStreamMarkerINTEL vkCmdSetPerformanceStreamMarkerINTEL;
	public PFN_vkCmdSetPerformanceOverrideINTEL vkCmdSetPerformanceOverrideINTEL;
	public PFN_vkAcquirePerformanceConfigurationINTEL vkAcquirePerformanceConfigurationINTEL;
	public PFN_vkReleasePerformanceConfigurationINTEL vkReleasePerformanceConfigurationINTEL;
	public PFN_vkQueueSetPerformanceConfigurationINTEL vkQueueSetPerformanceConfigurationINTEL;
	public PFN_vkGetPerformanceParameterINTEL vkGetPerformanceParameterINTEL;
	public PFN_vkGetDeviceMemoryOpaqueCaptureAddress vkGetDeviceMemoryOpaqueCaptureAddress;
	public PFN_vkGetPipelineExecutablePropertiesKHR vkGetPipelineExecutablePropertiesKHR;
	public PFN_vkGetPipelineExecutableStatisticsKHR vkGetPipelineExecutableStatisticsKHR;
	public PFN_vkGetPipelineExecutableInternalRepresentationsKHR vkGetPipelineExecutableInternalRepresentationsKHR;
	public PFN_vkCmdSetLineStipple vkCmdSetLineStipple;
	public PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR;
	public PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR;
	public PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirectKHR;
	public PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructuresKHR;
	public PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR;
	public PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperationKHR;
	public PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperationKHR;
	public PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrencyKHR;
	public PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResultKHR;
	public PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoinKHR;
	public PFN_vkGetPipelineIndirectMemoryRequirementsNV vkGetPipelineIndirectMemoryRequirementsNV;
	public PFN_vkGetPipelineIndirectDeviceAddressNV vkGetPipelineIndirectDeviceAddressNV;
	public PFN_vkAntiLagUpdateAMD vkAntiLagUpdateAMD;
	public PFN_vkCmdSetCullMode vkCmdSetCullMode;
	public PFN_vkCmdSetFrontFace vkCmdSetFrontFace;
	public PFN_vkCmdSetPrimitiveTopology vkCmdSetPrimitiveTopology;
	public PFN_vkCmdSetViewportWithCount vkCmdSetViewportWithCount;
	public PFN_vkCmdSetScissorWithCount vkCmdSetScissorWithCount;
	public PFN_vkCmdBindIndexBuffer2 vkCmdBindIndexBuffer2;
	public PFN_vkCmdBindVertexBuffers2 vkCmdBindVertexBuffers2;
	public PFN_vkCmdSetDepthTestEnable vkCmdSetDepthTestEnable;
	public PFN_vkCmdSetDepthWriteEnable vkCmdSetDepthWriteEnable;
	public PFN_vkCmdSetDepthCompareOp vkCmdSetDepthCompareOp;
	public PFN_vkCmdSetDepthBoundsTestEnable vkCmdSetDepthBoundsTestEnable;
	public PFN_vkCmdSetStencilTestEnable vkCmdSetStencilTestEnable;
	public PFN_vkCmdSetStencilOp vkCmdSetStencilOp;
	public PFN_vkCmdSetPatchControlPointsEXT vkCmdSetPatchControlPointsEXT;
	public PFN_vkCmdSetRasterizerDiscardEnable vkCmdSetRasterizerDiscardEnable;
	public PFN_vkCmdSetDepthBiasEnable vkCmdSetDepthBiasEnable;
	public PFN_vkCmdSetLogicOpEXT vkCmdSetLogicOpEXT;
	public PFN_vkCmdSetPrimitiveRestartEnable vkCmdSetPrimitiveRestartEnable;
	public PFN_vkCmdSetTessellationDomainOriginEXT vkCmdSetTessellationDomainOriginEXT;
	public PFN_vkCmdSetDepthClampEnableEXT vkCmdSetDepthClampEnableEXT;
	public PFN_vkCmdSetPolygonModeEXT vkCmdSetPolygonModeEXT;
	public PFN_vkCmdSetRasterizationSamplesEXT vkCmdSetRasterizationSamplesEXT;
	public PFN_vkCmdSetSampleMaskEXT vkCmdSetSampleMaskEXT;
	public PFN_vkCmdSetAlphaToCoverageEnableEXT vkCmdSetAlphaToCoverageEnableEXT;
	public PFN_vkCmdSetAlphaToOneEnableEXT vkCmdSetAlphaToOneEnableEXT;
	public PFN_vkCmdSetLogicOpEnableEXT vkCmdSetLogicOpEnableEXT;
	public PFN_vkCmdSetColorBlendEnableEXT vkCmdSetColorBlendEnableEXT;
	public PFN_vkCmdSetColorBlendEquationEXT vkCmdSetColorBlendEquationEXT;
	public PFN_vkCmdSetColorWriteMaskEXT vkCmdSetColorWriteMaskEXT;
	public PFN_vkCmdSetRasterizationStreamEXT vkCmdSetRasterizationStreamEXT;
	public PFN_vkCmdSetConservativeRasterizationModeEXT vkCmdSetConservativeRasterizationModeEXT;
	public PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	public PFN_vkCmdSetDepthClipEnableEXT vkCmdSetDepthClipEnableEXT;
	public PFN_vkCmdSetSampleLocationsEnableEXT vkCmdSetSampleLocationsEnableEXT;
	public PFN_vkCmdSetColorBlendAdvancedEXT vkCmdSetColorBlendAdvancedEXT;
	public PFN_vkCmdSetProvokingVertexModeEXT vkCmdSetProvokingVertexModeEXT;
	public PFN_vkCmdSetLineRasterizationModeEXT vkCmdSetLineRasterizationModeEXT;
	public PFN_vkCmdSetLineStippleEnableEXT vkCmdSetLineStippleEnableEXT;
	public PFN_vkCmdSetDepthClipNegativeOneToOneEXT vkCmdSetDepthClipNegativeOneToOneEXT;
	public PFN_vkCmdSetViewportWScalingEnableNV vkCmdSetViewportWScalingEnableNV;
	public PFN_vkCmdSetViewportSwizzleNV vkCmdSetViewportSwizzleNV;
	public PFN_vkCmdSetCoverageToColorEnableNV vkCmdSetCoverageToColorEnableNV;
	public PFN_vkCmdSetCoverageToColorLocationNV vkCmdSetCoverageToColorLocationNV;
	public PFN_vkCmdSetCoverageModulationModeNV vkCmdSetCoverageModulationModeNV;
	public PFN_vkCmdSetCoverageModulationTableEnableNV vkCmdSetCoverageModulationTableEnableNV;
	public PFN_vkCmdSetCoverageModulationTableNV vkCmdSetCoverageModulationTableNV;
	public PFN_vkCmdSetShadingRateImageEnableNV vkCmdSetShadingRateImageEnableNV;
	public PFN_vkCmdSetCoverageReductionModeNV vkCmdSetCoverageReductionModeNV;
	public PFN_vkCmdSetRepresentativeFragmentTestEnableNV vkCmdSetRepresentativeFragmentTestEnableNV;
	public PFN_vkCreatePrivateDataSlot vkCreatePrivateDataSlot;
	public PFN_vkDestroyPrivateDataSlot vkDestroyPrivateDataSlot;
	public PFN_vkSetPrivateData vkSetPrivateData;
	public PFN_vkGetPrivateData vkGetPrivateData;
	public PFN_vkCmdCopyBuffer2 vkCmdCopyBuffer2;
	public PFN_vkCmdCopyImage2 vkCmdCopyImage2;
	public PFN_vkCmdBlitImage2 vkCmdBlitImage2;
	public PFN_vkCmdCopyBufferToImage2 vkCmdCopyBufferToImage2;
	public PFN_vkCmdCopyImageToBuffer2 vkCmdCopyImageToBuffer2;
	public PFN_vkCmdResolveImage2 vkCmdResolveImage2;
	public PFN_vkCmdSetFragmentShadingRateKHR vkCmdSetFragmentShadingRateKHR;
	public PFN_vkCmdSetFragmentShadingRateEnumNV vkCmdSetFragmentShadingRateEnumNV;
	public PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR;
	public PFN_vkCmdSetVertexInputEXT vkCmdSetVertexInputEXT;
	public PFN_vkCmdSetColorWriteEnableEXT vkCmdSetColorWriteEnableEXT;
	public PFN_vkCmdSetEvent2 vkCmdSetEvent2;
	public PFN_vkCmdResetEvent2 vkCmdResetEvent2;
	public PFN_vkCmdWaitEvents2 vkCmdWaitEvents2;
	public PFN_vkCmdPipelineBarrier2 vkCmdPipelineBarrier2;
	public PFN_vkQueueSubmit2 vkQueueSubmit2;
	public PFN_vkCmdWriteTimestamp2 vkCmdWriteTimestamp2;
	public PFN_vkCmdWriteBufferMarker2AMD vkCmdWriteBufferMarker2AMD;
	public PFN_vkGetQueueCheckpointData2NV vkGetQueueCheckpointData2NV;
	public PFN_vkCopyMemoryToImage vkCopyMemoryToImage;
	public PFN_vkCopyImageToMemory vkCopyImageToMemory;
	public PFN_vkCopyImageToImage vkCopyImageToImage;
	public PFN_vkTransitionImageLayout vkTransitionImageLayout;
	public PFN_vkCreateVideoSessionKHR vkCreateVideoSessionKHR;
	public PFN_vkDestroyVideoSessionKHR vkDestroyVideoSessionKHR;
	public PFN_vkCreateVideoSessionParametersKHR vkCreateVideoSessionParametersKHR;
	public PFN_vkUpdateVideoSessionParametersKHR vkUpdateVideoSessionParametersKHR;
	public PFN_vkGetEncodedVideoSessionParametersKHR vkGetEncodedVideoSessionParametersKHR;
	public PFN_vkDestroyVideoSessionParametersKHR vkDestroyVideoSessionParametersKHR;
	public PFN_vkGetVideoSessionMemoryRequirementsKHR vkGetVideoSessionMemoryRequirementsKHR;
	public PFN_vkBindVideoSessionMemoryKHR vkBindVideoSessionMemoryKHR;
	public PFN_vkCmdDecodeVideoKHR vkCmdDecodeVideoKHR;
	public PFN_vkCmdBeginVideoCodingKHR vkCmdBeginVideoCodingKHR;
	public PFN_vkCmdControlVideoCodingKHR vkCmdControlVideoCodingKHR;
	public PFN_vkCmdEndVideoCodingKHR vkCmdEndVideoCodingKHR;
	public PFN_vkCmdEncodeVideoKHR vkCmdEncodeVideoKHR;
	public PFN_vkCmdDecompressMemoryNV vkCmdDecompressMemoryNV;
	public PFN_vkCmdDecompressMemoryIndirectCountNV vkCmdDecompressMemoryIndirectCountNV;
	public PFN_vkCreateCuModuleNVX vkCreateCuModuleNVX;
	public PFN_vkCreateCuFunctionNVX vkCreateCuFunctionNVX;
	public PFN_vkDestroyCuModuleNVX vkDestroyCuModuleNVX;
	public PFN_vkDestroyCuFunctionNVX vkDestroyCuFunctionNVX;
	public PFN_vkCmdCuLaunchKernelNVX vkCmdCuLaunchKernelNVX;
	public PFN_vkGetDescriptorSetLayoutSizeEXT vkGetDescriptorSetLayoutSizeEXT;
	public PFN_vkGetDescriptorSetLayoutBindingOffsetEXT vkGetDescriptorSetLayoutBindingOffsetEXT;
	public PFN_vkGetDescriptorEXT vkGetDescriptorEXT;
	public PFN_vkCmdBindDescriptorBuffersEXT vkCmdBindDescriptorBuffersEXT;
	public PFN_vkCmdSetDescriptorBufferOffsetsEXT vkCmdSetDescriptorBufferOffsetsEXT;
	public PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	public PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT vkGetBufferOpaqueCaptureDescriptorDataEXT;
	public PFN_vkGetImageOpaqueCaptureDescriptorDataEXT vkGetImageOpaqueCaptureDescriptorDataEXT;
	public PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	public PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT vkGetSamplerOpaqueCaptureDescriptorDataEXT;
	public PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
	public PFN_vkSetDeviceMemoryPriorityEXT vkSetDeviceMemoryPriorityEXT;
	public PFN_vkWaitForPresentKHR vkWaitForPresentKHR;
	public PFN_vkCreateCudaModuleNV vkCreateCudaModuleNV;
	public PFN_vkGetCudaModuleCacheNV vkGetCudaModuleCacheNV;
	public PFN_vkCreateCudaFunctionNV vkCreateCudaFunctionNV;
	public PFN_vkDestroyCudaModuleNV vkDestroyCudaModuleNV;
	public PFN_vkDestroyCudaFunctionNV vkDestroyCudaFunctionNV;
	public PFN_vkCmdCudaLaunchKernelNV vkCmdCudaLaunchKernelNV;
	public PFN_vkCmdBeginRendering vkCmdBeginRendering;
	public PFN_vkCmdEndRendering vkCmdEndRendering;
	public PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	public PFN_vkGetDescriptorSetHostMappingVALVE vkGetDescriptorSetHostMappingVALVE;
	public PFN_vkCreateMicromapEXT vkCreateMicromapEXT;
	public PFN_vkCmdBuildMicromapsEXT vkCmdBuildMicromapsEXT;
	public PFN_vkBuildMicromapsEXT vkBuildMicromapsEXT;
	public PFN_vkDestroyMicromapEXT vkDestroyMicromapEXT;
	public PFN_vkCmdCopyMicromapEXT vkCmdCopyMicromapEXT;
	public PFN_vkCopyMicromapEXT vkCopyMicromapEXT;
	public PFN_vkCmdCopyMicromapToMemoryEXT vkCmdCopyMicromapToMemoryEXT;
	public PFN_vkCopyMicromapToMemoryEXT vkCopyMicromapToMemoryEXT;
	public PFN_vkCmdCopyMemoryToMicromapEXT vkCmdCopyMemoryToMicromapEXT;
	public PFN_vkCopyMemoryToMicromapEXT vkCopyMemoryToMicromapEXT;
	public PFN_vkCmdWriteMicromapsPropertiesEXT vkCmdWriteMicromapsPropertiesEXT;
	public PFN_vkWriteMicromapsPropertiesEXT vkWriteMicromapsPropertiesEXT;
	public PFN_vkGetDeviceMicromapCompatibilityEXT vkGetDeviceMicromapCompatibilityEXT;
	public PFN_vkGetMicromapBuildSizesEXT vkGetMicromapBuildSizesEXT;
	public PFN_vkGetShaderModuleIdentifierEXT vkGetShaderModuleIdentifierEXT;
	public PFN_vkGetShaderModuleCreateInfoIdentifierEXT vkGetShaderModuleCreateInfoIdentifierEXT;
	public PFN_vkGetImageSubresourceLayout2 vkGetImageSubresourceLayout2;
	public PFN_vkGetPipelinePropertiesEXT vkGetPipelinePropertiesEXT;
	public PFN_vkGetFramebufferTilePropertiesQCOM vkGetFramebufferTilePropertiesQCOM;
	public PFN_vkGetDynamicRenderingTilePropertiesQCOM vkGetDynamicRenderingTilePropertiesQCOM;
	public PFN_vkCreateOpticalFlowSessionNV vkCreateOpticalFlowSessionNV;
	public PFN_vkDestroyOpticalFlowSessionNV vkDestroyOpticalFlowSessionNV;
	public PFN_vkBindOpticalFlowSessionImageNV vkBindOpticalFlowSessionImageNV;
	public PFN_vkCmdOpticalFlowExecuteNV vkCmdOpticalFlowExecuteNV;
	public PFN_vkGetDeviceFaultInfoEXT vkGetDeviceFaultInfoEXT;
	public PFN_vkCmdSetDepthBias2EXT vkCmdSetDepthBias2EXT;
	public PFN_vkReleaseSwapchainImagesEXT vkReleaseSwapchainImagesEXT;
	public PFN_vkGetDeviceImageSubresourceLayout vkGetDeviceImageSubresourceLayout;
	public PFN_vkMapMemory2 vkMapMemory2;
	public PFN_vkUnmapMemory2 vkUnmapMemory2;
	public PFN_vkCreateShadersEXT vkCreateShadersEXT;
	public PFN_vkDestroyShaderEXT vkDestroyShaderEXT;
	public PFN_vkGetShaderBinaryDataEXT vkGetShaderBinaryDataEXT;
	public PFN_vkCmdBindShadersEXT vkCmdBindShadersEXT;
	public PFN_vkCmdBindDescriptorSets2 vkCmdBindDescriptorSets2;
	public PFN_vkCmdPushConstants2 vkCmdPushConstants2;
	public PFN_vkCmdPushDescriptorSet2 vkCmdPushDescriptorSet2;
	public PFN_vkCmdPushDescriptorSetWithTemplate2 vkCmdPushDescriptorSetWithTemplate2;
	public PFN_vkCmdSetDescriptorBufferOffsets2EXT vkCmdSetDescriptorBufferOffsets2EXT;
	public PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
	public PFN_vkSetLatencySleepModeNV vkSetLatencySleepModeNV;
	public PFN_vkLatencySleepNV vkLatencySleepNV;
	public PFN_vkSetLatencyMarkerNV vkSetLatencyMarkerNV;
	public PFN_vkGetLatencyTimingsNV vkGetLatencyTimingsNV;
	public PFN_vkQueueNotifyOutOfBandNV vkQueueNotifyOutOfBandNV;
	public PFN_vkCmdSetRenderingAttachmentLocations vkCmdSetRenderingAttachmentLocations;
	public PFN_vkCmdSetRenderingInputAttachmentIndices vkCmdSetRenderingInputAttachmentIndices;
	public PFN_vkCmdSetDepthClampRangeEXT vkCmdSetDepthClampRangeEXT;

	public void Load(VkDevice device) mut
	{
		vkDestroyDevice = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDevice");
		vkGetDeviceQueue = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceQueue");
		vkQueueSubmit = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSubmit");
		vkQueueWaitIdle = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueWaitIdle");
		vkDeviceWaitIdle = (.)(void*)vkGetDeviceProcAddr(device, "vkDeviceWaitIdle");
		vkAllocateMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateMemory");
		vkFreeMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeMemory");
		vkMapMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkMapMemory");
		vkUnmapMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkUnmapMemory");
		vkFlushMappedMemoryRanges = (.)(void*)vkGetDeviceProcAddr(device, "vkFlushMappedMemoryRanges");
		vkInvalidateMappedMemoryRanges = (.)(void*)vkGetDeviceProcAddr(device, "vkInvalidateMappedMemoryRanges");
		vkGetDeviceMemoryCommitment = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryCommitment");
		vkGetBufferMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements");
		vkBindBufferMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkBindBufferMemory");
		vkGetImageMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements");
		vkBindImageMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkBindImageMemory");
		vkGetImageSparseMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements");
		vkQueueBindSparse = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueBindSparse");
		vkCreateFence = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateFence");
		vkDestroyFence = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyFence");
		vkResetFences = (.)(void*)vkGetDeviceProcAddr(device, "vkResetFences");
		vkGetFenceStatus = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFenceStatus");
		vkWaitForFences = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitForFences");
		vkCreateSemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSemaphore");
		vkDestroySemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySemaphore");
		vkCreateEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateEvent");
		vkDestroyEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyEvent");
		vkGetEventStatus = (.)(void*)vkGetDeviceProcAddr(device, "vkGetEventStatus");
		vkSetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkSetEvent");
		vkResetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkResetEvent");
		vkCreateQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateQueryPool");
		vkDestroyQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyQueryPool");
		vkGetQueryPoolResults = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueryPoolResults");
		vkResetQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetQueryPool");
		vkCreateBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateBuffer");
		vkDestroyBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyBuffer");
		vkCreateBufferView = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateBufferView");
		vkDestroyBufferView = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyBufferView");
		vkCreateImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateImage");
		vkDestroyImage = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyImage");
		vkGetImageSubresourceLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout");
		vkCreateImageView = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateImageView");
		vkDestroyImageView = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyImageView");
		vkCreateShaderModule = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateShaderModule");
		vkDestroyShaderModule = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyShaderModule");
		vkCreatePipelineCache = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineCache");
		vkDestroyPipelineCache = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineCache");
		vkGetPipelineCacheData = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineCacheData");
		vkMergePipelineCaches = (.)(void*)vkGetDeviceProcAddr(device, "vkMergePipelineCaches");
		vkCreatePipelineBinariesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineBinariesKHR");
		vkDestroyPipelineBinaryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineBinaryKHR");
		vkGetPipelineKeyKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineKeyKHR");
		vkGetPipelineBinaryDataKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineBinaryDataKHR");
		vkReleaseCapturedPipelineDataKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseCapturedPipelineDataKHR");
		vkCreateGraphicsPipelines = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateGraphicsPipelines");
		vkCreateComputePipelines = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateComputePipelines");
		vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
		vkDestroyPipeline = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipeline");
		vkCreatePipelineLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePipelineLayout");
		vkDestroyPipelineLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPipelineLayout");
		vkCreateSampler = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSampler");
		vkDestroySampler = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySampler");
		vkCreateDescriptorSetLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorSetLayout");
		vkDestroyDescriptorSetLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorSetLayout");
		vkCreateDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorPool");
		vkDestroyDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorPool");
		vkResetDescriptorPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetDescriptorPool");
		vkAllocateDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateDescriptorSets");
		vkFreeDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeDescriptorSets");
		vkUpdateDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSets");
		vkCreateFramebuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateFramebuffer");
		vkDestroyFramebuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyFramebuffer");
		vkCreateRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRenderPass");
		vkDestroyRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyRenderPass");
		vkGetRenderAreaGranularity = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRenderAreaGranularity");
		vkGetRenderingAreaGranularity = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRenderingAreaGranularity");
		vkCreateCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCommandPool");
		vkDestroyCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCommandPool");
		vkResetCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkResetCommandPool");
		vkAllocateCommandBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkAllocateCommandBuffers");
		vkFreeCommandBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkFreeCommandBuffers");
		vkBeginCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkBeginCommandBuffer");
		vkEndCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkEndCommandBuffer");
		vkResetCommandBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkResetCommandBuffer");
		vkCmdBindPipeline = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindPipeline");
		vkCmdSetAttachmentFeedbackLoopEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
		vkCmdSetViewport = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewport");
		vkCmdSetScissor = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetScissor");
		vkCmdSetLineWidth = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineWidth");
		vkCmdSetDepthBias = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBias");
		vkCmdSetBlendConstants = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetBlendConstants");
		vkCmdSetDepthBounds = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBounds");
		vkCmdSetStencilCompareMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilCompareMask");
		vkCmdSetStencilWriteMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilWriteMask");
		vkCmdSetStencilReference = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilReference");
		vkCmdBindDescriptorSets = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorSets");
		vkCmdBindIndexBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindIndexBuffer");
		vkCmdBindVertexBuffers = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindVertexBuffers");
		vkCmdDraw = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDraw");
		vkCmdDrawIndexed = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexed");
		vkCmdDrawMultiEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMultiEXT");
		vkCmdDrawMultiIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMultiIndexedEXT");
		vkCmdDrawIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirect");
		vkCmdDrawIndexedIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexedIndirect");
		vkCmdDispatch = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatch");
		vkCmdDispatchIndirect = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatchIndirect");
		vkCmdSubpassShadingHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSubpassShadingHUAWEI");
		vkCmdDrawClusterHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawClusterHUAWEI");
		vkCmdDrawClusterIndirectHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawClusterIndirectHUAWEI");
		vkCmdUpdatePipelineIndirectBufferNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdUpdatePipelineIndirectBufferNV");
		vkCmdCopyBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBuffer");
		vkCmdCopyImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImage");
		vkCmdBlitImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBlitImage");
		vkCmdCopyBufferToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBufferToImage");
		vkCmdCopyImageToBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImageToBuffer");
		vkCmdCopyMemoryIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryIndirectNV");
		vkCmdCopyMemoryToImageIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToImageIndirectNV");
		vkCmdUpdateBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdUpdateBuffer");
		vkCmdFillBuffer = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdFillBuffer");
		vkCmdClearColorImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearColorImage");
		vkCmdClearDepthStencilImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearDepthStencilImage");
		vkCmdClearAttachments = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdClearAttachments");
		vkCmdResolveImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResolveImage");
		vkCmdSetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetEvent");
		vkCmdResetEvent = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetEvent");
		vkCmdWaitEvents = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWaitEvents");
		vkCmdPipelineBarrier = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPipelineBarrier");
		vkCmdBeginQuery = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginQuery");
		vkCmdEndQuery = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndQuery");
		vkCmdBeginConditionalRenderingEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginConditionalRenderingEXT");
		vkCmdEndConditionalRenderingEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndConditionalRenderingEXT");
		vkCmdResetQueryPool = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetQueryPool");
		vkCmdWriteTimestamp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteTimestamp");
		vkCmdCopyQueryPoolResults = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyQueryPoolResults");
		vkCmdPushConstants = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushConstants");
		vkCmdBeginRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRenderPass");
		vkCmdNextSubpass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdNextSubpass");
		vkCmdEndRenderPass = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRenderPass");
		vkCmdExecuteCommands = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteCommands");
		vkCreateSharedSwapchainsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSharedSwapchainsKHR");
		vkCreateSwapchainKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSwapchainKHR");
		vkDestroySwapchainKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySwapchainKHR");
		vkGetSwapchainImagesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainImagesKHR");
		vkAcquireNextImageKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireNextImageKHR");
		vkQueuePresentKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkQueuePresentKHR");
		vkDebugMarkerSetObjectNameEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectNameEXT");
		vkDebugMarkerSetObjectTagEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectTagEXT");
		vkCmdDebugMarkerBeginEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerBeginEXT");
		vkCmdDebugMarkerEndEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerEndEXT");
		vkCmdDebugMarkerInsertEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDebugMarkerInsertEXT");
		vkCmdExecuteGeneratedCommandsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteGeneratedCommandsNV");
		vkCmdPreprocessGeneratedCommandsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPreprocessGeneratedCommandsNV");
		vkCmdBindPipelineShaderGroupNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindPipelineShaderGroupNV");
		vkGetGeneratedCommandsMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetGeneratedCommandsMemoryRequirementsNV");
		vkCreateIndirectCommandsLayoutNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutNV");
		vkDestroyIndirectCommandsLayoutNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutNV");
		vkCmdExecuteGeneratedCommandsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdExecuteGeneratedCommandsEXT");
		vkCmdPreprocessGeneratedCommandsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPreprocessGeneratedCommandsEXT");
		vkGetGeneratedCommandsMemoryRequirementsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetGeneratedCommandsMemoryRequirementsEXT");
		vkCreateIndirectCommandsLayoutEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutEXT");
		vkDestroyIndirectCommandsLayoutEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutEXT");
		vkCreateIndirectExecutionSetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateIndirectExecutionSetEXT");
		vkDestroyIndirectExecutionSetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyIndirectExecutionSetEXT");
		vkUpdateIndirectExecutionSetPipelineEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateIndirectExecutionSetPipelineEXT");
		vkUpdateIndirectExecutionSetShaderEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateIndirectExecutionSetShaderEXT");
		vkCmdPushDescriptorSet = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSet");
		vkTrimCommandPool = (.)(void*)vkGetDeviceProcAddr(device, "vkTrimCommandPool");
		vkGetMemoryFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryFdKHR");
		vkGetMemoryFdPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryFdPropertiesKHR");
		vkGetMemoryRemoteAddressNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryRemoteAddressNV");
		vkGetSemaphoreFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSemaphoreFdKHR");
		vkImportSemaphoreFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkImportSemaphoreFdKHR");
		vkGetFenceFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFenceFdKHR");
		vkImportFenceFdKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkImportFenceFdKHR");
		vkDisplayPowerControlEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDisplayPowerControlEXT");
		vkRegisterDeviceEventEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkRegisterDeviceEventEXT");
		vkRegisterDisplayEventEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkRegisterDisplayEventEXT");
		vkGetSwapchainCounterEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainCounterEXT");
		vkGetDeviceGroupPeerMemoryFeatures = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeatures");
		vkBindBufferMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkBindBufferMemory2");
		vkBindImageMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkBindImageMemory2");
		vkCmdSetDeviceMask = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDeviceMask");
		vkGetDeviceGroupPresentCapabilitiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHR");
		vkGetDeviceGroupSurfacePresentModesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModesKHR");
		vkAcquireNextImage2KHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireNextImage2KHR");
		vkCmdDispatchBase = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDispatchBase");
		vkCreateDescriptorUpdateTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplate");
		vkDestroyDescriptorUpdateTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplate");
		vkUpdateDescriptorSetWithTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplate");
		vkCmdPushDescriptorSetWithTemplate = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplate");
		vkSetHdrMetadataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetHdrMetadataEXT");
		vkGetSwapchainStatusKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSwapchainStatusKHR");
		vkGetRefreshCycleDurationGOOGLE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRefreshCycleDurationGOOGLE");
		vkGetPastPresentationTimingGOOGLE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPastPresentationTimingGOOGLE");
		vkCmdSetViewportWScalingNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWScalingNV");
		vkCmdSetDiscardRectangleEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEXT");
		vkCmdSetDiscardRectangleEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEnableEXT");
		vkCmdSetDiscardRectangleModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleModeEXT");
		vkCmdSetSampleLocationsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleLocationsEXT");
		vkGetBufferMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements2");
		vkGetImageMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements2");
		vkGetImageSparseMemoryRequirements2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements2");
		vkGetDeviceBufferMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceBufferMemoryRequirements");
		vkGetDeviceImageMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageMemoryRequirements");
		vkGetDeviceImageSparseMemoryRequirements = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageSparseMemoryRequirements");
		vkCreateSamplerYcbcrConversion = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateSamplerYcbcrConversion");
		vkDestroySamplerYcbcrConversion = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroySamplerYcbcrConversion");
		vkGetDeviceQueue2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceQueue2");
		vkCreateValidationCacheEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateValidationCacheEXT");
		vkDestroyValidationCacheEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyValidationCacheEXT");
		vkGetValidationCacheDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetValidationCacheDataEXT");
		vkMergeValidationCachesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkMergeValidationCachesEXT");
		vkGetDescriptorSetLayoutSupport = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSupport");
		vkGetShaderInfoAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderInfoAMD");
		vkSetLocalDimmingAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLocalDimmingAMD");
		vkGetCalibratedTimestampsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetCalibratedTimestampsKHR");
		vkSetDebugUtilsObjectNameEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectNameEXT");
		vkSetDebugUtilsObjectTagEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectTagEXT");
		vkQueueBeginDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueBeginDebugUtilsLabelEXT");
		vkQueueEndDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueEndDebugUtilsLabelEXT");
		vkQueueInsertDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueInsertDebugUtilsLabelEXT");
		vkCmdBeginDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginDebugUtilsLabelEXT");
		vkCmdEndDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndDebugUtilsLabelEXT");
		vkCmdInsertDebugUtilsLabelEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdInsertDebugUtilsLabelEXT");
		vkGetMemoryHostPointerPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMemoryHostPointerPropertiesEXT");
		vkCmdWriteBufferMarkerAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteBufferMarkerAMD");
		vkCreateRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRenderPass2");
		vkCmdBeginRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRenderPass2");
		vkCmdNextSubpass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdNextSubpass2");
		vkCmdEndRenderPass2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRenderPass2");
		vkGetSemaphoreCounterValue = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSemaphoreCounterValue");
		vkWaitSemaphores = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitSemaphores");
		vkSignalSemaphore = (.)(void*)vkGetDeviceProcAddr(device, "vkSignalSemaphore");
		vkCmdDrawIndirectCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirectCount");
		vkCmdDrawIndexedIndirectCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndexedIndirectCount");
		vkCmdSetCheckpointNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCheckpointNV");
		vkGetQueueCheckpointDataNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueueCheckpointDataNV");
		vkCmdBindTransformFeedbackBuffersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindTransformFeedbackBuffersEXT");
		vkCmdBeginTransformFeedbackEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginTransformFeedbackEXT");
		vkCmdEndTransformFeedbackEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndTransformFeedbackEXT");
		vkCmdBeginQueryIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginQueryIndexedEXT");
		vkCmdEndQueryIndexedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndQueryIndexedEXT");
		vkCmdDrawIndirectByteCountEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawIndirectByteCountEXT");
		vkCmdSetExclusiveScissorNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExclusiveScissorNV");
		vkCmdSetExclusiveScissorEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExclusiveScissorEnableNV");
		vkCmdBindShadingRateImageNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindShadingRateImageNV");
		vkCmdSetViewportShadingRatePaletteNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportShadingRatePaletteNV");
		vkCmdSetCoarseSampleOrderNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoarseSampleOrderNV");
		vkCmdDrawMeshTasksNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksNV");
		vkCmdDrawMeshTasksIndirectNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectNV");
		vkCmdDrawMeshTasksIndirectCountNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectCountNV");
		vkCmdDrawMeshTasksEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksEXT");
		vkCmdDrawMeshTasksIndirectEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectEXT");
		vkCmdDrawMeshTasksIndirectCountEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDrawMeshTasksIndirectCountEXT");
		vkCompileDeferredNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCompileDeferredNV");
		vkCreateAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureNV");
		vkCmdBindInvocationMaskHUAWEI = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindInvocationMaskHUAWEI");
		vkDestroyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureKHR");
		vkDestroyAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureNV");
		vkGetAccelerationStructureMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureMemoryRequirementsNV");
		vkBindAccelerationStructureMemoryNV = (.)(void*)vkGetDeviceProcAddr(device, "vkBindAccelerationStructureMemoryNV");
		vkCmdCopyAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureNV");
		vkCmdCopyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureKHR");
		vkCopyAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureKHR");
		vkCmdCopyAccelerationStructureToMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyAccelerationStructureToMemoryKHR");
		vkCopyAccelerationStructureToMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureToMemoryKHR");
		vkCmdCopyMemoryToAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToAccelerationStructureKHR");
		vkCopyMemoryToAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToAccelerationStructureKHR");
		vkCmdWriteAccelerationStructuresPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteAccelerationStructuresPropertiesKHR");
		vkCmdWriteAccelerationStructuresPropertiesNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteAccelerationStructuresPropertiesNV");
		vkCmdBuildAccelerationStructureNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructureNV");
		vkWriteAccelerationStructuresPropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkWriteAccelerationStructuresPropertiesKHR");
		vkCmdTraceRaysKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysKHR");
		vkCmdTraceRaysNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysNV");
		vkGetRayTracingShaderGroupHandlesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupHandlesKHR");
		vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		vkGetAccelerationStructureHandleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureHandleNV");
		vkCreateRayTracingPipelinesNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesNV");
		vkCreateRayTracingPipelinesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesKHR");
		vkCmdTraceRaysIndirectKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysIndirectKHR");
		vkCmdTraceRaysIndirect2KHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdTraceRaysIndirect2KHR");
		vkGetDeviceAccelerationStructureCompatibilityKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceAccelerationStructureCompatibilityKHR");
		vkGetRayTracingShaderGroupStackSizeKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupStackSizeKHR");
		vkCmdSetRayTracingPipelineStackSizeKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRayTracingPipelineStackSizeKHR");
		vkGetImageViewHandleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewHandleNVX");
		vkGetImageViewHandle64NVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewHandle64NVX");
		vkGetImageViewAddressNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewAddressNVX");
		vkAcquireProfilingLockKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquireProfilingLockKHR");
		vkReleaseProfilingLockKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseProfilingLockKHR");
		vkGetImageDrmFormatModifierPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageDrmFormatModifierPropertiesEXT");
		vkGetBufferOpaqueCaptureAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureAddress");
		vkGetBufferDeviceAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddress");
		vkInitializePerformanceApiINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkInitializePerformanceApiINTEL");
		vkUninitializePerformanceApiINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkUninitializePerformanceApiINTEL");
		vkCmdSetPerformanceMarkerINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceMarkerINTEL");
		vkCmdSetPerformanceStreamMarkerINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceStreamMarkerINTEL");
		vkCmdSetPerformanceOverrideINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPerformanceOverrideINTEL");
		vkAcquirePerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkAcquirePerformanceConfigurationINTEL");
		vkReleasePerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkReleasePerformanceConfigurationINTEL");
		vkQueueSetPerformanceConfigurationINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSetPerformanceConfigurationINTEL");
		vkGetPerformanceParameterINTEL = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPerformanceParameterINTEL");
		vkGetDeviceMemoryOpaqueCaptureAddress = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryOpaqueCaptureAddress");
		vkGetPipelineExecutablePropertiesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutablePropertiesKHR");
		vkGetPipelineExecutableStatisticsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableStatisticsKHR");
		vkGetPipelineExecutableInternalRepresentationsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableInternalRepresentationsKHR");
		vkCmdSetLineStipple = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineStipple");
		vkCreateAccelerationStructureKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureKHR");
		vkCmdBuildAccelerationStructuresKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructuresKHR");
		vkCmdBuildAccelerationStructuresIndirectKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildAccelerationStructuresIndirectKHR");
		vkBuildAccelerationStructuresKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkBuildAccelerationStructuresKHR");
		vkGetAccelerationStructureDeviceAddressKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureDeviceAddressKHR");
		vkCreateDeferredOperationKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateDeferredOperationKHR");
		vkDestroyDeferredOperationKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyDeferredOperationKHR");
		vkGetDeferredOperationMaxConcurrencyKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeferredOperationMaxConcurrencyKHR");
		vkGetDeferredOperationResultKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeferredOperationResultKHR");
		vkDeferredOperationJoinKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDeferredOperationJoinKHR");
		vkGetPipelineIndirectMemoryRequirementsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectMemoryRequirementsNV");
		vkGetPipelineIndirectDeviceAddressNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectDeviceAddressNV");
		vkAntiLagUpdateAMD = (.)(void*)vkGetDeviceProcAddr(device, "vkAntiLagUpdateAMD");
		vkCmdSetCullMode = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCullMode");
		vkCmdSetFrontFace = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFrontFace");
		vkCmdSetPrimitiveTopology = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPrimitiveTopology");
		vkCmdSetViewportWithCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWithCount");
		vkCmdSetScissorWithCount = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetScissorWithCount");
		vkCmdBindIndexBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindIndexBuffer2");
		vkCmdBindVertexBuffers2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindVertexBuffers2");
		vkCmdSetDepthTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthTestEnable");
		vkCmdSetDepthWriteEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthWriteEnable");
		vkCmdSetDepthCompareOp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthCompareOp");
		vkCmdSetDepthBoundsTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBoundsTestEnable");
		vkCmdSetStencilTestEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilTestEnable");
		vkCmdSetStencilOp = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetStencilOp");
		vkCmdSetPatchControlPointsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPatchControlPointsEXT");
		vkCmdSetRasterizerDiscardEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizerDiscardEnable");
		vkCmdSetDepthBiasEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBiasEnable");
		vkCmdSetLogicOpEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLogicOpEXT");
		vkCmdSetPrimitiveRestartEnable = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPrimitiveRestartEnable");
		vkCmdSetTessellationDomainOriginEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetTessellationDomainOriginEXT");
		vkCmdSetDepthClampEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClampEnableEXT");
		vkCmdSetPolygonModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetPolygonModeEXT");
		vkCmdSetRasterizationSamplesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizationSamplesEXT");
		vkCmdSetSampleMaskEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleMaskEXT");
		vkCmdSetAlphaToCoverageEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAlphaToCoverageEnableEXT");
		vkCmdSetAlphaToOneEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetAlphaToOneEnableEXT");
		vkCmdSetLogicOpEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLogicOpEnableEXT");
		vkCmdSetColorBlendEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendEnableEXT");
		vkCmdSetColorBlendEquationEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendEquationEXT");
		vkCmdSetColorWriteMaskEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorWriteMaskEXT");
		vkCmdSetRasterizationStreamEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRasterizationStreamEXT");
		vkCmdSetConservativeRasterizationModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetConservativeRasterizationModeEXT");
		vkCmdSetExtraPrimitiveOverestimationSizeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
		vkCmdSetDepthClipEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClipEnableEXT");
		vkCmdSetSampleLocationsEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetSampleLocationsEnableEXT");
		vkCmdSetColorBlendAdvancedEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorBlendAdvancedEXT");
		vkCmdSetProvokingVertexModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetProvokingVertexModeEXT");
		vkCmdSetLineRasterizationModeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineRasterizationModeEXT");
		vkCmdSetLineStippleEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetLineStippleEnableEXT");
		vkCmdSetDepthClipNegativeOneToOneEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClipNegativeOneToOneEXT");
		vkCmdSetViewportWScalingEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportWScalingEnableNV");
		vkCmdSetViewportSwizzleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetViewportSwizzleNV");
		vkCmdSetCoverageToColorEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageToColorEnableNV");
		vkCmdSetCoverageToColorLocationNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageToColorLocationNV");
		vkCmdSetCoverageModulationModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationModeNV");
		vkCmdSetCoverageModulationTableEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationTableEnableNV");
		vkCmdSetCoverageModulationTableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageModulationTableNV");
		vkCmdSetShadingRateImageEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetShadingRateImageEnableNV");
		vkCmdSetCoverageReductionModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetCoverageReductionModeNV");
		vkCmdSetRepresentativeFragmentTestEnableNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRepresentativeFragmentTestEnableNV");
		vkCreatePrivateDataSlot = (.)(void*)vkGetDeviceProcAddr(device, "vkCreatePrivateDataSlot");
		vkDestroyPrivateDataSlot = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyPrivateDataSlot");
		vkSetPrivateData = (.)(void*)vkGetDeviceProcAddr(device, "vkSetPrivateData");
		vkGetPrivateData = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPrivateData");
		vkCmdCopyBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBuffer2");
		vkCmdCopyImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImage2");
		vkCmdBlitImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBlitImage2");
		vkCmdCopyBufferToImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyBufferToImage2");
		vkCmdCopyImageToBuffer2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyImageToBuffer2");
		vkCmdResolveImage2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResolveImage2");
		vkCmdSetFragmentShadingRateKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFragmentShadingRateKHR");
		vkCmdSetFragmentShadingRateEnumNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetFragmentShadingRateEnumNV");
		vkGetAccelerationStructureBuildSizesKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureBuildSizesKHR");
		vkCmdSetVertexInputEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetVertexInputEXT");
		vkCmdSetColorWriteEnableEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetColorWriteEnableEXT");
		vkCmdSetEvent2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetEvent2");
		vkCmdResetEvent2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdResetEvent2");
		vkCmdWaitEvents2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWaitEvents2");
		vkCmdPipelineBarrier2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPipelineBarrier2");
		vkQueueSubmit2 = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueSubmit2");
		vkCmdWriteTimestamp2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteTimestamp2");
		vkCmdWriteBufferMarker2AMD = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteBufferMarker2AMD");
		vkGetQueueCheckpointData2NV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetQueueCheckpointData2NV");
		vkCopyMemoryToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToImage");
		vkCopyImageToMemory = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyImageToMemory");
		vkCopyImageToImage = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyImageToImage");
		vkTransitionImageLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkTransitionImageLayout");
		vkCreateVideoSessionKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateVideoSessionKHR");
		vkDestroyVideoSessionKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionKHR");
		vkCreateVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateVideoSessionParametersKHR");
		vkUpdateVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkUpdateVideoSessionParametersKHR");
		vkGetEncodedVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetEncodedVideoSessionParametersKHR");
		vkDestroyVideoSessionParametersKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionParametersKHR");
		vkGetVideoSessionMemoryRequirementsKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkGetVideoSessionMemoryRequirementsKHR");
		vkBindVideoSessionMemoryKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkBindVideoSessionMemoryKHR");
		vkCmdDecodeVideoKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecodeVideoKHR");
		vkCmdBeginVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginVideoCodingKHR");
		vkCmdControlVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdControlVideoCodingKHR");
		vkCmdEndVideoCodingKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndVideoCodingKHR");
		vkCmdEncodeVideoKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEncodeVideoKHR");
		vkCmdDecompressMemoryNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecompressMemoryNV");
		vkCmdDecompressMemoryIndirectCountNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdDecompressMemoryIndirectCountNV");
		vkCreateCuModuleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCuModuleNVX");
		vkCreateCuFunctionNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCuFunctionNVX");
		vkDestroyCuModuleNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCuModuleNVX");
		vkDestroyCuFunctionNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCuFunctionNVX");
		vkCmdCuLaunchKernelNVX = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCuLaunchKernelNVX");
		vkGetDescriptorSetLayoutSizeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSizeEXT");
		vkGetDescriptorSetLayoutBindingOffsetEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutBindingOffsetEXT");
		vkGetDescriptorEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorEXT");
		vkCmdBindDescriptorBuffersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBuffersEXT");
		vkCmdSetDescriptorBufferOffsetsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDescriptorBufferOffsetsEXT");
		vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
		vkGetBufferOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
		vkGetImageOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageOpaqueCaptureDescriptorDataEXT");
		vkGetImageViewOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
		vkGetSamplerOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
		vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
		vkSetDeviceMemoryPriorityEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkSetDeviceMemoryPriorityEXT");
		vkWaitForPresentKHR = (.)(void*)vkGetDeviceProcAddr(device, "vkWaitForPresentKHR");
		vkCreateCudaModuleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCudaModuleNV");
		vkGetCudaModuleCacheNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetCudaModuleCacheNV");
		vkCreateCudaFunctionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateCudaFunctionNV");
		vkDestroyCudaModuleNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCudaModuleNV");
		vkDestroyCudaFunctionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyCudaFunctionNV");
		vkCmdCudaLaunchKernelNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCudaLaunchKernelNV");
		vkCmdBeginRendering = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBeginRendering");
		vkCmdEndRendering = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdEndRendering");
		vkGetDescriptorSetLayoutHostMappingInfoVALVE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
		vkGetDescriptorSetHostMappingVALVE = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDescriptorSetHostMappingVALVE");
		vkCreateMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateMicromapEXT");
		vkCmdBuildMicromapsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBuildMicromapsEXT");
		vkBuildMicromapsEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkBuildMicromapsEXT");
		vkDestroyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyMicromapEXT");
		vkCmdCopyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMicromapEXT");
		vkCopyMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMicromapEXT");
		vkCmdCopyMicromapToMemoryEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMicromapToMemoryEXT");
		vkCopyMicromapToMemoryEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMicromapToMemoryEXT");
		vkCmdCopyMemoryToMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdCopyMemoryToMicromapEXT");
		vkCopyMemoryToMicromapEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCopyMemoryToMicromapEXT");
		vkCmdWriteMicromapsPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdWriteMicromapsPropertiesEXT");
		vkWriteMicromapsPropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkWriteMicromapsPropertiesEXT");
		vkGetDeviceMicromapCompatibilityEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceMicromapCompatibilityEXT");
		vkGetMicromapBuildSizesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetMicromapBuildSizesEXT");
		vkGetShaderModuleIdentifierEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderModuleIdentifierEXT");
		vkGetShaderModuleCreateInfoIdentifierEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderModuleCreateInfoIdentifierEXT");
		vkGetImageSubresourceLayout2 = (.)(void*)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout2");
		vkGetPipelinePropertiesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetPipelinePropertiesEXT");
		vkGetFramebufferTilePropertiesQCOM = (.)(void*)vkGetDeviceProcAddr(device, "vkGetFramebufferTilePropertiesQCOM");
		vkGetDynamicRenderingTilePropertiesQCOM = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDynamicRenderingTilePropertiesQCOM");
		vkCreateOpticalFlowSessionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateOpticalFlowSessionNV");
		vkDestroyOpticalFlowSessionNV = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyOpticalFlowSessionNV");
		vkBindOpticalFlowSessionImageNV = (.)(void*)vkGetDeviceProcAddr(device, "vkBindOpticalFlowSessionImageNV");
		vkCmdOpticalFlowExecuteNV = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdOpticalFlowExecuteNV");
		vkGetDeviceFaultInfoEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceFaultInfoEXT");
		vkCmdSetDepthBias2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthBias2EXT");
		vkReleaseSwapchainImagesEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkReleaseSwapchainImagesEXT");
		vkGetDeviceImageSubresourceLayout = (.)(void*)vkGetDeviceProcAddr(device, "vkGetDeviceImageSubresourceLayout");
		vkMapMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkMapMemory2");
		vkUnmapMemory2 = (.)(void*)vkGetDeviceProcAddr(device, "vkUnmapMemory2");
		vkCreateShadersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCreateShadersEXT");
		vkDestroyShaderEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkDestroyShaderEXT");
		vkGetShaderBinaryDataEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkGetShaderBinaryDataEXT");
		vkCmdBindShadersEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindShadersEXT");
		vkCmdBindDescriptorSets2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorSets2");
		vkCmdPushConstants2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushConstants2");
		vkCmdPushDescriptorSet2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSet2");
		vkCmdPushDescriptorSetWithTemplate2 = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplate2");
		vkCmdSetDescriptorBufferOffsets2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDescriptorBufferOffsets2EXT");
		vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
		vkSetLatencySleepModeNV = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLatencySleepModeNV");
		vkLatencySleepNV = (.)(void*)vkGetDeviceProcAddr(device, "vkLatencySleepNV");
		vkSetLatencyMarkerNV = (.)(void*)vkGetDeviceProcAddr(device, "vkSetLatencyMarkerNV");
		vkGetLatencyTimingsNV = (.)(void*)vkGetDeviceProcAddr(device, "vkGetLatencyTimingsNV");
		vkQueueNotifyOutOfBandNV = (.)(void*)vkGetDeviceProcAddr(device, "vkQueueNotifyOutOfBandNV");
		vkCmdSetRenderingAttachmentLocations = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRenderingAttachmentLocations");
		vkCmdSetRenderingInputAttachmentIndices = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetRenderingInputAttachmentIndices");
		vkCmdSetDepthClampRangeEXT = (.)(void*)vkGetDeviceProcAddr(device, "vkCmdSetDepthClampRangeEXT");
	}
}

static
{
	[Inline] public static void Destroy(this VkInstance instance, VkAllocationCallbacks* pAllocator = null) => vkDestroyInstance(instance, pAllocator);
	[Inline] public static VkResult EnumeratePhysicalDevices(this VkInstance instance, out uint32 pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices = null) => vkEnumeratePhysicalDevices(instance, out pPhysicalDeviceCount, pPhysicalDevices);
	[Inline] public static PFN_vkVoidFunction GetProcAddr(this VkDevice device, c_char* pName) => vkGetDeviceProcAddr(device, pName);
	[Inline] public static PFN_vkVoidFunction GetProcAddr(this VkInstance instance, c_char* pName) => vkGetInstanceProcAddr(instance, pName);
	[Inline] public static void GetProperties(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties pProperties) => vkGetPhysicalDeviceProperties(physicalDevice, out pProperties);
	[Inline] public static void GetQueueFamilyProperties(this VkPhysicalDevice physicalDevice, out uint32 pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties = null) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties);
	[Inline] public static void GetMemoryProperties(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties pMemoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, out pMemoryProperties);
	[Inline] public static void GetFeatures(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures pFeatures) => vkGetPhysicalDeviceFeatures(physicalDevice, out pFeatures);
	[Inline] public static void GetFormatProperties(this VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties pFormatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, out pFormatProperties);
	[Inline] public static VkResult GetImageFormatProperties(this VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties pImageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, out pImageFormatProperties);
	[Inline] public static VkResult CreateDevice(this VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDevice pDevice) => vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, out pDevice);
	[Inline] public static void Destroy(this VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyDevice(device, pAllocator);
	[Inline] public static VkResult EnumerateDeviceLayerProperties(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkLayerProperties* pProperties = null) => vkEnumerateDeviceLayerProperties(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static VkResult EnumerateDeviceExtensionProperties(this VkPhysicalDevice physicalDevice, c_char* pLayerName, out uint32 pPropertyCount, VkExtensionProperties* pProperties = null) => vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, out pPropertyCount, pProperties);
	[Inline] public static void GetQueue(this VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, out VkQueue pQueue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, out pQueue);
	[Inline] public static VkResult Submit(this VkQueue queue, VulkanSpan<VkSubmitInfo> pSubmits = .(), VkFence fence = null) => vkQueueSubmit(queue, pSubmits, fence);
	[Inline] public static VkResult WaitIdle(this VkQueue queue) => vkQueueWaitIdle(queue);
	[Inline] public static VkResult WaitIdle(this VkDevice device) => vkDeviceWaitIdle(device);
	[Inline] public static VkResult AllocateMemory(this VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, out VkDeviceMemory pMemory) => vkAllocateMemory(device, pAllocateInfo, pAllocator, out pMemory);
	[Inline] public static void FreeMemory(this VkDeviceMemory memory, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkFreeMemory(device, memory, pAllocator);
	[Inline] public static VkResult MapMemory(this VkDeviceMemory memory, VkDevice device, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, out void* ppData) => vkMapMemory(device, memory, offset, size, flags, out ppData);
	[Inline] public static void UnmapMemory(this VkDeviceMemory memory, VkDevice device) => vkUnmapMemory(device, memory);
	[Inline] public static VkResult FlushMappedMemoryRanges(this VkDevice device, VulkanSpan<VkMappedMemoryRange> pMemoryRanges) => vkFlushMappedMemoryRanges(device, pMemoryRanges);
	[Inline] public static VkResult InvalidateMappedMemoryRanges(this VkDevice device, VulkanSpan<VkMappedMemoryRange> pMemoryRanges) => vkInvalidateMappedMemoryRanges(device, pMemoryRanges);
	[Inline] public static void GetMemoryCommitment(this VkDeviceMemory memory, VkDevice device, out VkDeviceSize pCommittedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, out pCommittedMemoryInBytes);
	[Inline] public static void GetMemoryRequirements(this VkBuffer buffer, VkDevice device, out VkMemoryRequirements pMemoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, out pMemoryRequirements);
	[Inline] public static VkResult BindMemory(this VkBuffer buffer, VkDevice device, VkDeviceMemory memory, VkDeviceSize memoryOffset) => vkBindBufferMemory(device, buffer, memory, memoryOffset);
	[Inline] public static void GetMemoryRequirements(this VkImage image, VkDevice device, out VkMemoryRequirements pMemoryRequirements) => vkGetImageMemoryRequirements(device, image, out pMemoryRequirements);
	[Inline] public static VkResult BindMemory(this VkImage image, VkDevice device, VkDeviceMemory memory, VkDeviceSize memoryOffset) => vkBindImageMemory(device, image, memory, memoryOffset);
	[Inline] public static void GetSparseMemoryRequirements(this VkImage image, VkDevice device, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements = null) => vkGetImageSparseMemoryRequirements(device, image, out pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	[Inline] public static void GetSparseImageFormatProperties(this VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, out uint32 pPropertyCount, VkSparseImageFormatProperties* pProperties = null) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, out pPropertyCount, pProperties);
	[Inline] public static VkResult BindSparse(this VkQueue queue, VulkanSpan<VkBindSparseInfo> pBindInfo = .(), VkFence fence = null) => vkQueueBindSparse(queue, pBindInfo, fence);
	[Inline] public static VkResult CreateFence(this VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence) => vkCreateFence(device, pCreateInfo, pAllocator, out pFence);
	[Inline] public static void Destroy(this VkFence fence, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyFence(device, fence, pAllocator);
	[Inline] public static VkResult ResetFences(this VkDevice device, VulkanSpan<VkFence> pFences) => vkResetFences(device, pFences);
	[Inline] public static VkResult GetStatus(this VkFence fence, VkDevice device) => vkGetFenceStatus(device, fence);
	[Inline] public static VkResult WaitForFences(this VkDevice device, VulkanSpan<VkFence> pFences, VkBool32 waitAll, uint64 timeout) => vkWaitForFences(device, pFences, waitAll, timeout);
	[Inline] public static VkResult CreateSemaphore(this VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSemaphore pSemaphore) => vkCreateSemaphore(device, pCreateInfo, pAllocator, out pSemaphore);
	[Inline] public static void Destroy(this VkSemaphore semaphore, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroySemaphore(device, semaphore, pAllocator);
	[Inline] public static VkResult CreateEvent(this VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkEvent pEvent) => vkCreateEvent(device, pCreateInfo, pAllocator, out pEvent);
	[Inline] public static void Destroy(this VkEvent event, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyEvent(device, event, pAllocator);
	[Inline] public static VkResult GetStatus(this VkEvent event, VkDevice device) => vkGetEventStatus(device, event);
	[Inline] public static VkResult Set(this VkEvent event, VkDevice device) => vkSetEvent(device, event);
	[Inline] public static VkResult Reset(this VkEvent event, VkDevice device) => vkResetEvent(device, event);
	[Inline] public static VkResult CreateQueryPool(this VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkQueryPool pQueryPool) => vkCreateQueryPool(device, pCreateInfo, pAllocator, out pQueryPool);
	[Inline] public static void Destroy(this VkQueryPool queryPool, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyQueryPool(device, queryPool, pAllocator);
	[Inline] public static VkResult GetResults(this VkQueryPool queryPool, VkDevice device, uint32 firstQuery, uint32 queryCount, c_size dataSize, out void pData, VkDeviceSize stride, VkQueryResultFlags flags = 0) => vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, out pData, stride, flags);
	[Inline] public static void Reset(this VkQueryPool queryPool, VkDevice device, uint32 firstQuery, uint32 queryCount) => vkResetQueryPool(device, queryPool, firstQuery, queryCount);
	[Inline] public static VkResult CreateBuffer(this VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkBuffer pBuffer) => vkCreateBuffer(device, pCreateInfo, pAllocator, out pBuffer);
	[Inline] public static void Destroy(this VkBuffer buffer, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyBuffer(device, buffer, pAllocator);
	[Inline] public static VkResult CreateBufferView(this VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkBufferView pView) => vkCreateBufferView(device, pCreateInfo, pAllocator, out pView);
	[Inline] public static void Destroy(this VkBufferView bufferView, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyBufferView(device, bufferView, pAllocator);
	[Inline] public static VkResult CreateImage(this VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkImage pImage) => vkCreateImage(device, pCreateInfo, pAllocator, out pImage);
	[Inline] public static void Destroy(this VkImage image, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyImage(device, image, pAllocator);
	[Inline] public static void GetSubresourceLayout(this VkImage image, VkDevice device, VkImageSubresource* pSubresource, out VkSubresourceLayout pLayout) => vkGetImageSubresourceLayout(device, image, pSubresource, out pLayout);
	[Inline] public static VkResult CreateImageView(this VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkImageView pView) => vkCreateImageView(device, pCreateInfo, pAllocator, out pView);
	[Inline] public static void Destroy(this VkImageView imageView, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyImageView(device, imageView, pAllocator);
	[Inline] public static VkResult CreateShaderModule(this VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkShaderModule pShaderModule) => vkCreateShaderModule(device, pCreateInfo, pAllocator, out pShaderModule);
	[Inline] public static void Destroy(this VkShaderModule shaderModule, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyShaderModule(device, shaderModule, pAllocator);
	[Inline] public static VkResult CreatePipelineCache(this VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineCache pPipelineCache) => vkCreatePipelineCache(device, pCreateInfo, pAllocator, out pPipelineCache);
	[Inline] public static void Destroy(this VkPipelineCache pipelineCache, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyPipelineCache(device, pipelineCache, pAllocator);
	[Inline] public static VkResult GetData(this VkPipelineCache pipelineCache, VkDevice device, out c_size pDataSize, out void pData) => vkGetPipelineCacheData(device, pipelineCache, out pDataSize, out pData);
	[Inline] public static VkResult Merges(this VkPipelineCache dstCache, VkDevice device, VulkanSpan<VkPipelineCache> pSrcCaches) => vkMergePipelineCaches(device, dstCache, pSrcCaches);
	[Inline] public static VkResult CreatePipelineBinariesKHR(this VkDevice device, VkPipelineBinaryCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineBinaryHandlesInfoKHR pBinaries) => vkCreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, out pBinaries);
	[Inline] public static void DestroyKHR(this VkPipelineBinaryKHR pipelineBinary, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);
	[Inline] public static VkResult GetPipelineKeyKHR(this VkDevice device, VkPipelineCreateInfoKHR* pPipelineCreateInfo, out VkPipelineBinaryKeyKHR pPipelineKey) => vkGetPipelineKeyKHR(device, pPipelineCreateInfo, out pPipelineKey);
	[Inline] public static VkResult GetPipelineBinaryDataKHR(this VkDevice device, VkPipelineBinaryDataInfoKHR* pInfo, out VkPipelineBinaryKeyKHR pPipelineBinaryKey, out c_size pPipelineBinaryDataSize, out void pPipelineBinaryData) => vkGetPipelineBinaryDataKHR(device, pInfo, out pPipelineBinaryKey, out pPipelineBinaryDataSize, out pPipelineBinaryData);
	[Inline] public static VkResult ReleaseCapturedPipelineDataKHR(this VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* pInfo, VkAllocationCallbacks* pAllocator = null) => vkReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);
	[Inline] public static VkResult CreateGraphicsPipelines(this VkPipelineCache pipelineCache, VkDevice device, VulkanSpan<VkGraphicsPipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines) => vkCreateGraphicsPipelines(device, pipelineCache, pCreateInfos, pAllocator, out pPipelines);
	[Inline] public static VkResult CreateComputePipelines(this VkPipelineCache pipelineCache, VkDevice device, VulkanSpan<VkComputePipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines) => vkCreateComputePipelines(device, pipelineCache, pCreateInfos, pAllocator, out pPipelines);
	[Inline] public static VkResult GetSubpassShadingMaxWorkgroupSizeHUAWEI(this VkRenderPass renderpass, VkDevice device, out VkExtent2D pMaxWorkgroupSize) => vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, out pMaxWorkgroupSize);
	[Inline] public static void Destroy(this VkPipeline pipeline, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyPipeline(device, pipeline, pAllocator);
	[Inline] public static VkResult CreatePipelineLayout(this VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineLayout pPipelineLayout) => vkCreatePipelineLayout(device, pCreateInfo, pAllocator, out pPipelineLayout);
	[Inline] public static void Destroy(this VkPipelineLayout pipelineLayout, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
	[Inline] public static VkResult CreateSampler(this VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSampler pSampler) => vkCreateSampler(device, pCreateInfo, pAllocator, out pSampler);
	[Inline] public static void Destroy(this VkSampler sampler, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroySampler(device, sampler, pAllocator);
	[Inline] public static VkResult CreateDescriptorSetLayout(this VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorSetLayout pSetLayout) => vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, out pSetLayout);
	[Inline] public static void Destroy(this VkDescriptorSetLayout descriptorSetLayout, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
	[Inline] public static VkResult CreateDescriptorPool(this VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorPool pDescriptorPool) => vkCreateDescriptorPool(device, pCreateInfo, pAllocator, out pDescriptorPool);
	[Inline] public static void Destroy(this VkDescriptorPool descriptorPool, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
	[Inline] public static VkResult Reset(this VkDescriptorPool descriptorPool, VkDevice device, VkDescriptorPoolResetFlags flags = 0) => vkResetDescriptorPool(device, descriptorPool, flags);
	[Inline] public static VkResult AllocateDescriptorSets(this VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, out VkDescriptorSet pDescriptorSets) => vkAllocateDescriptorSets(device, pAllocateInfo, out pDescriptorSets);
	[Inline] public static VkResult FreeDescriptorSets(this VkDescriptorPool descriptorPool, VkDevice device, VulkanSpan<VkDescriptorSet> pDescriptorSets) => vkFreeDescriptorSets(device, descriptorPool, pDescriptorSets);
	[Inline] public static void UpdateDescriptorSets(this VkDevice device, VulkanSpan<VkWriteDescriptorSet> pDescriptorWrites = .(), VulkanSpan<VkCopyDescriptorSet> pDescriptorCopies = .()) => vkUpdateDescriptorSets(device, pDescriptorWrites, pDescriptorCopies);
	[Inline] public static VkResult CreateFramebuffer(this VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkFramebuffer pFramebuffer) => vkCreateFramebuffer(device, pCreateInfo, pAllocator, out pFramebuffer);
	[Inline] public static void Destroy(this VkFramebuffer framebuffer, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyFramebuffer(device, framebuffer, pAllocator);
	[Inline] public static VkResult CreateRenderPass(this VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkRenderPass pRenderPass) => vkCreateRenderPass(device, pCreateInfo, pAllocator, out pRenderPass);
	[Inline] public static void Destroy(this VkRenderPass renderPass, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyRenderPass(device, renderPass, pAllocator);
	[Inline] public static void GetRenderAreaGranularity(this VkRenderPass renderPass, VkDevice device, out VkExtent2D pGranularity) => vkGetRenderAreaGranularity(device, renderPass, out pGranularity);
	[Inline] public static void GetRenderingAreaGranularity(this VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, out VkExtent2D pGranularity) => vkGetRenderingAreaGranularity(device, pRenderingAreaInfo, out pGranularity);
	[Inline] public static VkResult CreateCommandPool(this VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCommandPool pCommandPool) => vkCreateCommandPool(device, pCreateInfo, pAllocator, out pCommandPool);
	[Inline] public static void Destroy(this VkCommandPool commandPool, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyCommandPool(device, commandPool, pAllocator);
	[Inline] public static VkResult Reset(this VkCommandPool commandPool, VkDevice device, VkCommandPoolResetFlags flags = 0) => vkResetCommandPool(device, commandPool, flags);
	[Inline] public static VkResult AllocateCommandBuffers(this VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, out VkCommandBuffer pCommandBuffers) => vkAllocateCommandBuffers(device, pAllocateInfo, out pCommandBuffers);
	[Inline] public static void FreeCommandBuffers(this VkCommandPool commandPool, VkDevice device, VulkanSpan<VkCommandBuffer> pCommandBuffers) => vkFreeCommandBuffers(device, commandPool, pCommandBuffers);
	[Inline] public static VkResult Begin(this VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo) => vkBeginCommandBuffer(commandBuffer, pBeginInfo);
	[Inline] public static VkResult End(this VkCommandBuffer commandBuffer) => vkEndCommandBuffer(commandBuffer);
	[Inline] public static VkResult Reset(this VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags = 0) => vkResetCommandBuffer(commandBuffer, flags);
	[Inline] public static void CmdBindPipeline(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) => vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
	[Inline] public static void CmdSetAttachmentFeedbackLoopEnableEXT(this VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask = 0) => vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
	[Inline] public static void CmdSetViewport(this VkCommandBuffer commandBuffer, uint32 firstViewport, VulkanSpan<VkViewport> pViewports) => vkCmdSetViewport(commandBuffer, firstViewport, pViewports);
	[Inline] public static void CmdSetScissor(this VkCommandBuffer commandBuffer, uint32 firstScissor, VulkanSpan<VkRect2D> pScissors) => vkCmdSetScissor(commandBuffer, firstScissor, pScissors);
	[Inline] public static void CmdSetLineWidth(this VkCommandBuffer commandBuffer, float lineWidth) => vkCmdSetLineWidth(commandBuffer, lineWidth);
	[Inline] public static void CmdSetDepthBias(this VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) => vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	[Inline] public static void CmdSetBlendConstants(this VkCommandBuffer commandBuffer, float[4] blendConstants) => vkCmdSetBlendConstants(commandBuffer, blendConstants);
	[Inline] public static void CmdSetDepthBounds(this VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) => vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
	[Inline] public static void CmdSetStencilCompareMask(this VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask) => vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
	[Inline] public static void CmdSetStencilWriteMask(this VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask) => vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
	[Inline] public static void CmdSetStencilReference(this VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference) => vkCmdSetStencilReference(commandBuffer, faceMask, reference);
	[Inline] public static void CmdBindDescriptorSets(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, VulkanSpan<VkDescriptorSet> pDescriptorSets, VulkanSpan<uint32> pDynamicOffsets = .()) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, pDescriptorSets, pDynamicOffsets);
	[Inline] public static void CmdBindIndexBuffer(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) => vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
	[Inline] public static void CmdBindVertexBuffers(this VkCommandBuffer commandBuffer, uint32 firstBinding, VulkanDuoSpan<VkBuffer, VkDeviceSize> pBuffers_pOffsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, pBuffers_pOffsets);
	[Inline] public static void CmdDraw(this VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance) => vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	[Inline] public static void CmdDrawIndexed(this VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 vertexOffset, uint32 firstInstance) => vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	[Inline] public static void CmdDrawMultiEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkMultiDrawInfoEXT> pVertexInfo, uint32 instanceCount, uint32 firstInstance, uint32 stride) => vkCmdDrawMultiEXT(commandBuffer, pVertexInfo, instanceCount, firstInstance, stride);
	[Inline] public static void CmdDrawMultiIndexedEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkMultiDrawIndexedInfoEXT> pIndexInfo, uint32 instanceCount, uint32 firstInstance, uint32 stride, int32* pVertexOffset = null) => vkCmdDrawMultiIndexedEXT(commandBuffer, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
	[Inline] public static void CmdDrawIndirect(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride) => vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
	[Inline] public static void CmdDrawIndexedIndirect(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride) => vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
	[Inline] public static void CmdDispatch(this VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ) => vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
	[Inline] public static void CmdDispatchIndirect(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => vkCmdDispatchIndirect(commandBuffer, buffer, offset);
	[Inline] public static void CmdSubpassShadingHUAWEI(this VkCommandBuffer commandBuffer) => vkCmdSubpassShadingHUAWEI(commandBuffer);
	[Inline] public static void CmdDrawClusterHUAWEI(this VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ) => vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
	[Inline] public static void CmdDrawClusterIndirectHUAWEI(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
	[Inline] public static void CmdUpdatePipelineIndirectBufferNV(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) => vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
	[Inline] public static void CmdCopyBuffer(this VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, VulkanSpan<VkBufferCopy> pRegions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, pRegions);
	[Inline] public static void CmdCopyImage(this VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, VulkanSpan<VkImageCopy> pRegions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, pRegions);
	[Inline] public static void CmdBlitImage(this VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, VulkanSpan<VkImageBlit> pRegions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, pRegions, filter);
	[Inline] public static void CmdCopyBufferToImage(this VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, VulkanSpan<VkBufferImageCopy> pRegions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, pRegions);
	[Inline] public static void CmdCopyImageToBuffer(this VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, VulkanSpan<VkBufferImageCopy> pRegions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, pRegions);
	[Inline] public static void CmdCopyMemoryIndirectNV(this VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32 copyCount, uint32 stride) => vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
	[Inline] public static void CmdCopyMemoryToImageIndirectNV(this VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32 copyCount, uint32 stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers* pImageSubresources) => vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
	[Inline] public static void CmdUpdateBuffer(this VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData) => vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	[Inline] public static void CmdFillBuffer(this VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data) => vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
	[Inline] public static void CmdClearColorImage(this VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, VulkanSpan<VkImageSubresourceRange> pRanges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, pRanges);
	[Inline] public static void CmdClearDepthStencilImage(this VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, VulkanSpan<VkImageSubresourceRange> pRanges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, pRanges);
	[Inline] public static void CmdClearAttachments(this VkCommandBuffer commandBuffer, VulkanSpan<VkClearAttachment> pAttachments, VulkanSpan<VkClearRect> pRects) => vkCmdClearAttachments(commandBuffer, pAttachments, pRects);
	[Inline] public static void CmdResolveImage(this VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, VulkanSpan<VkImageResolve> pRegions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, pRegions);
	[Inline] public static void CmdSetEvent(this VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask = 0) => vkCmdSetEvent(commandBuffer, event, stageMask);
	[Inline] public static void CmdResetEvent(this VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask = 0) => vkCmdResetEvent(commandBuffer, event, stageMask);
	[Inline] public static void CmdWaitEvents(this VkCommandBuffer commandBuffer, VulkanSpan<VkEvent> pEvents, VkPipelineStageFlags srcStageMask = 0, VkPipelineStageFlags dstStageMask = 0, VulkanSpan<VkMemoryBarrier> pMemoryBarriers = .(), VulkanSpan<VkBufferMemoryBarrier> pBufferMemoryBarriers = .(), VulkanSpan<VkImageMemoryBarrier> pImageMemoryBarriers = .()) => vkCmdWaitEvents(commandBuffer, pEvents, srcStageMask, dstStageMask, pMemoryBarriers, pBufferMemoryBarriers, pImageMemoryBarriers);
	[Inline] public static void CmdPipelineBarrier(this VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask = 0, VkPipelineStageFlags dstStageMask = 0, VkDependencyFlags dependencyFlags = 0, VulkanSpan<VkMemoryBarrier> pMemoryBarriers = .(), VulkanSpan<VkBufferMemoryBarrier> pBufferMemoryBarriers = .(), VulkanSpan<VkImageMemoryBarrier> pImageMemoryBarriers = .()) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, pMemoryBarriers, pBufferMemoryBarriers, pImageMemoryBarriers);
	[Inline] public static void CmdBeginQuery(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags = 0) => vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
	[Inline] public static void CmdEndQuery(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query) => vkCmdEndQuery(commandBuffer, queryPool, query);
	[Inline] public static void CmdBeginConditionalRenderingEXT(this VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) => vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
	[Inline] public static void CmdEndConditionalRenderingEXT(this VkCommandBuffer commandBuffer) => vkCmdEndConditionalRenderingEXT(commandBuffer);
	[Inline] public static void CmdResetQueryPool(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount) => vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
	[Inline] public static void CmdWriteTimestamp(this VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32 query) => vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
	[Inline] public static void CmdCopyQueryPoolResults(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags = 0) => vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	[Inline] public static void CmdPushConstants(this VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, VulkanSpan<void> pValues) => vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, pValues);
	[Inline] public static void CmdBeginRenderPass(this VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
	[Inline] public static void CmdNextSubpass(this VkCommandBuffer commandBuffer, VkSubpassContents contents) => vkCmdNextSubpass(commandBuffer, contents);
	[Inline] public static void CmdEndRenderPass(this VkCommandBuffer commandBuffer) => vkCmdEndRenderPass(commandBuffer);
	[Inline] public static void CmdExecuteCommands(this VkCommandBuffer commandBuffer, VulkanSpan<VkCommandBuffer> pCommandBuffers) => vkCmdExecuteCommands(commandBuffer, pCommandBuffers);
	[Inline] public static VkResult GetDisplayPropertiesKHR(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPropertiesKHR* pProperties = null) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static VkResult GetDisplayPlanePropertiesKHR(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties = null) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static VkResult GetDisplayPlaneSupportedDisplaysKHR(this VkPhysicalDevice physicalDevice, uint32 planeIndex, out uint32 pDisplayCount, VkDisplayKHR* pDisplays = null) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, out pDisplayCount, pDisplays);
	[Inline] public static VkResult GetModePropertiesKHR(this VkDisplayKHR display, VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayModePropertiesKHR* pProperties = null) => vkGetDisplayModePropertiesKHR(physicalDevice, display, out pPropertyCount, pProperties);
	[Inline] public static VkResult CreateModeKHR(this VkDisplayKHR display, VkPhysicalDevice physicalDevice, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDisplayModeKHR pMode) => vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, out pMode);
	[Inline] public static VkResult GetDisplayPlaneCapabilitiesKHR(this VkDisplayModeKHR mode, VkPhysicalDevice physicalDevice, uint32 planeIndex, out VkDisplayPlaneCapabilitiesKHR pCapabilities) => vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, out pCapabilities);
	[Inline] public static VkResult CreateDisplayPlaneSurfaceKHR(this VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSurfaceKHR pSurface) => vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, out pSurface);
	[Inline] public static VkResult CreateSharedSwapchainsKHR(this VkDevice device, VulkanSpan<VkSwapchainCreateInfoKHR> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkSwapchainKHR pSwapchains) => vkCreateSharedSwapchainsKHR(device, pCreateInfos, pAllocator, out pSwapchains);
	[Inline] public static void DestroyKHR(this VkSurfaceKHR surface, VkInstance instance, VkAllocationCallbacks* pAllocator = null) => vkDestroySurfaceKHR(instance, surface, pAllocator);
	[Inline] public static VkResult GetSurfaceSupportKHR(this VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 pSupported) => vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, out pSupported);
	[Inline] public static VkResult GetCapabilitiesKHR(this VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, out VkSurfaceCapabilitiesKHR pSurfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, out pSurfaceCapabilities);
	[Inline] public static VkResult GetFormatsKHR(this VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, out uint32 pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats = null) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, out pSurfaceFormatCount, pSurfaceFormats);
	[Inline] public static VkResult GetPresentModesKHR(this VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, out uint32 pPresentModeCount, VkPresentModeKHR* pPresentModes = null) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, out pPresentModeCount, pPresentModes);
	[Inline] public static VkResult CreateSwapchainKHR(this VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSwapchainKHR pSwapchain) => vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, out pSwapchain);
	[Inline] public static void DestroyKHR(this VkSwapchainKHR swapchain, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroySwapchainKHR(device, swapchain, pAllocator);
	[Inline] public static VkResult GetImagesKHR(this VkSwapchainKHR swapchain, VkDevice device, out uint32 pSwapchainImageCount, VkImage* pSwapchainImages = null) => vkGetSwapchainImagesKHR(device, swapchain, out pSwapchainImageCount, pSwapchainImages);
	[Inline] public static VkResult AcquireNextImageKHR(this VkSwapchainKHR swapchain, VkDevice device, uint64 timeout, VkSemaphore semaphore, VkFence fence, out uint32 pImageIndex) => vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, out pImageIndex);
	[Inline] public static VkResult PresentKHR(this VkQueue queue, VkPresentInfoKHR* pPresentInfo) => vkQueuePresentKHR(queue, pPresentInfo);
	[Inline] public static VkResult CreateDebugReportCallbackEXT(this VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDebugReportCallbackEXT pCallback) => vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, out pCallback);
	[Inline] public static void DestroyEXT(this VkDebugReportCallbackEXT callback, VkInstance instance, VkAllocationCallbacks* pAllocator = null) => vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
	[Inline] public static void DebugReportMessageEXT(this VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64 object, c_size location, int32 messageCode, c_char* pLayerPrefix, c_char* pMessage) => vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
	[Inline] public static VkResult DebugMarkerSetObjectNameEXT(this VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo) => vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
	[Inline] public static VkResult DebugMarkerSetObjectTagEXT(this VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo) => vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
	[Inline] public static void CmdDebugMarkerBeginEXT(this VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) => vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
	[Inline] public static void CmdDebugMarkerEndEXT(this VkCommandBuffer commandBuffer) => vkCmdDebugMarkerEndEXT(commandBuffer);
	[Inline] public static void CmdDebugMarkerInsertEXT(this VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) => vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
	[Inline] public static VkResult GetExternalImageFormatPropertiesNV(this VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, out VkExternalImageFormatPropertiesNV pExternalImageFormatProperties) => vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, out pExternalImageFormatProperties);
	[Inline] public static void CmdExecuteGeneratedCommandsNV(this VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) => vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	[Inline] public static void CmdPreprocessGeneratedCommandsNV(this VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) => vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
	[Inline] public static void CmdBindPipelineShaderGroupNV(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32 groupIndex) => vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	[Inline] public static void GetGeneratedCommandsMemoryRequirementsNV(this VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, out pMemoryRequirements);
	[Inline] public static VkResult CreateIndirectCommandsLayoutNV(this VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectCommandsLayoutNV pIndirectCommandsLayout) => vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, out pIndirectCommandsLayout);
	[Inline] public static void DestroyNV(this VkIndirectCommandsLayoutNV indirectCommandsLayout, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	[Inline] public static void CmdExecuteGeneratedCommandsEXT(this VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo) => vkCmdExecuteGeneratedCommandsEXT(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	[Inline] public static void CmdPreprocessGeneratedCommandsEXT(this VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer) => vkCmdPreprocessGeneratedCommandsEXT(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer);
	[Inline] public static void GetGeneratedCommandsMemoryRequirementsEXT(this VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoEXT* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, out pMemoryRequirements);
	[Inline] public static VkResult CreateIndirectCommandsLayoutEXT(this VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectCommandsLayoutEXT pIndirectCommandsLayout) => vkCreateIndirectCommandsLayoutEXT(device, pCreateInfo, pAllocator, out pIndirectCommandsLayout);
	[Inline] public static void DestroyEXT(this VkIndirectCommandsLayoutEXT indirectCommandsLayout, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);
	[Inline] public static VkResult CreateIndirectExecutionSetEXT(this VkDevice device, VkIndirectExecutionSetCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectExecutionSetEXT pIndirectExecutionSet) => vkCreateIndirectExecutionSetEXT(device, pCreateInfo, pAllocator, out pIndirectExecutionSet);
	[Inline] public static void DestroyEXT(this VkIndirectExecutionSetEXT indirectExecutionSet, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);
	[Inline] public static void UpdatePipelineEXT(this VkIndirectExecutionSetEXT indirectExecutionSet, VkDevice device, VulkanSpan<VkWriteIndirectExecutionSetPipelineEXT> pExecutionSetWrites) => vkUpdateIndirectExecutionSetPipelineEXT(device, indirectExecutionSet, pExecutionSetWrites);
	[Inline] public static void UpdateShaderEXT(this VkIndirectExecutionSetEXT indirectExecutionSet, VkDevice device, VulkanSpan<VkWriteIndirectExecutionSetShaderEXT> pExecutionSetWrites) => vkUpdateIndirectExecutionSetShaderEXT(device, indirectExecutionSet, pExecutionSetWrites);
	[Inline] public static void GetFeatures2(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 pFeatures) => vkGetPhysicalDeviceFeatures2(physicalDevice, out pFeatures);
	[Inline] public static void GetProperties2(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 pProperties) => vkGetPhysicalDeviceProperties2(physicalDevice, out pProperties);
	[Inline] public static void GetFormatProperties2(this VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 pFormatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, out pFormatProperties);
	[Inline] public static VkResult GetImageFormatProperties2(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, out VkImageFormatProperties2 pImageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, out pImageFormatProperties);
	[Inline] public static void GetQueueFamilyProperties2(this VkPhysicalDevice physicalDevice, out uint32 pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties = null) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties);
	[Inline] public static void GetMemoryProperties2(this VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 pMemoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, out pMemoryProperties);
	[Inline] public static void GetSparseImageFormatProperties2(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out uint32 pPropertyCount, VkSparseImageFormatProperties2* pProperties = null) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, out pPropertyCount, pProperties);
	[Inline] public static void CmdPushDescriptorSet(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, VulkanSpan<VkWriteDescriptorSet> pDescriptorWrites) => vkCmdPushDescriptorSet(commandBuffer, pipelineBindPoint, layout, set, pDescriptorWrites);
	[Inline] public static void Trim(this VkCommandPool commandPool, VkDevice device, VkCommandPoolTrimFlags flags = 0) => vkTrimCommandPool(device, commandPool, flags);
	[Inline] public static void GetExternalBufferProperties(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, out VkExternalBufferProperties pExternalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, out pExternalBufferProperties);
	[Inline] public static VkResult GetMemoryFdKHR(this VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, out int pFd) => vkGetMemoryFdKHR(device, pGetFdInfo, out pFd);
	[Inline] public static VkResult GetMemoryFdPropertiesKHR(this VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, out VkMemoryFdPropertiesKHR pMemoryFdProperties) => vkGetMemoryFdPropertiesKHR(device, handleType, fd, out pMemoryFdProperties);
	[Inline] public static VkResult GetMemoryRemoteAddressNV(this VkDevice device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, out VkRemoteAddressNV pAddress) => vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, out pAddress);
	[Inline] public static void GetExternalSemaphoreProperties(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, out VkExternalSemaphoreProperties pExternalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, out pExternalSemaphoreProperties);
	[Inline] public static VkResult GetSemaphoreFdKHR(this VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, out int pFd) => vkGetSemaphoreFdKHR(device, pGetFdInfo, out pFd);
	[Inline] public static VkResult ImportSemaphoreFdKHR(this VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) => vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	[Inline] public static void GetExternalFenceProperties(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, out VkExternalFenceProperties pExternalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, out pExternalFenceProperties);
	[Inline] public static VkResult GetFenceFdKHR(this VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, out int pFd) => vkGetFenceFdKHR(device, pGetFdInfo, out pFd);
	[Inline] public static VkResult ImportFenceFdKHR(this VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo) => vkImportFenceFdKHR(device, pImportFenceFdInfo);
	[Inline] public static VkResult ReleaseEXT(this VkDisplayKHR display, VkPhysicalDevice physicalDevice) => vkReleaseDisplayEXT(physicalDevice, display);
	[Inline] public static VkResult PowerControlEXT(this VkDisplayKHR display, VkDevice device, VkDisplayPowerInfoEXT* pDisplayPowerInfo) => vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	[Inline] public static VkResult RegisterEventEXT(this VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence) => vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, out pFence);
	[Inline] public static VkResult RegisterEventEXT(this VkDisplayKHR display, VkDevice device, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence) => vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, out pFence);
	[Inline] public static VkResult GetCounterEXT(this VkSwapchainKHR swapchain, VkDevice device, VkSurfaceCounterFlagBitsEXT counter, out uint64 pCounterValue) => vkGetSwapchainCounterEXT(device, swapchain, counter, out pCounterValue);
	[Inline] public static VkResult GetCapabilities2EXT(this VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, out VkSurfaceCapabilities2EXT pSurfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, out pSurfaceCapabilities);
	[Inline] public static VkResult EnumeratePhysicalDeviceGroups(this VkInstance instance, out uint32 pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties = null) => vkEnumeratePhysicalDeviceGroups(instance, out pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	[Inline] public static void GetGroupPeerMemoryFeatures(this VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, out VkPeerMemoryFeatureFlags pPeerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, out pPeerMemoryFeatures);
	[Inline] public static VkResult BindBufferMemory2(this VkDevice device, VulkanSpan<VkBindBufferMemoryInfo> pBindInfos) => vkBindBufferMemory2(device, pBindInfos);
	[Inline] public static VkResult BindImageMemory2(this VkDevice device, VulkanSpan<VkBindImageMemoryInfo> pBindInfos) => vkBindImageMemory2(device, pBindInfos);
	[Inline] public static void CmdSetDeviceMask(this VkCommandBuffer commandBuffer, uint32 deviceMask) => vkCmdSetDeviceMask(commandBuffer, deviceMask);
	[Inline] public static VkResult GetGroupPresentCapabilitiesKHR(this VkDevice device, out VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities) => vkGetDeviceGroupPresentCapabilitiesKHR(device, out pDeviceGroupPresentCapabilities);
	[Inline] public static VkResult GetGroupPresentModesKHR(this VkSurfaceKHR surface, VkDevice device, out VkDeviceGroupPresentModeFlagsKHR pModes) => vkGetDeviceGroupSurfacePresentModesKHR(device, surface, out pModes);
	[Inline] public static VkResult AcquireNextImage2KHR(this VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, out uint32 pImageIndex) => vkAcquireNextImage2KHR(device, pAcquireInfo, out pImageIndex);
	[Inline] public static void CmdDispatchBase(this VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ) => vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	[Inline] public static VkResult GetPresentRectanglesKHR(this VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, out uint32 pRectCount, VkRect2D* pRects = null) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, out pRectCount, pRects);
	[Inline] public static VkResult CreateDescriptorUpdateTemplate(this VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorUpdateTemplate pDescriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, out pDescriptorUpdateTemplate);
	[Inline] public static void Destroy(this VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
	[Inline] public static void UpdateWithTemplate(this VkDescriptorSet descriptorSet, VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData) => vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
	[Inline] public static void CmdPushDescriptorSetWithTemplate(this VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, void* pData) => vkCmdPushDescriptorSetWithTemplate(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	[Inline] public static void SetHdrMetadataEXT(this VkDevice device, VulkanDuoSpan<VkSwapchainKHR, VkHdrMetadataEXT> pSwapchains_pMetadata) => vkSetHdrMetadataEXT(device, pSwapchains_pMetadata);
	[Inline] public static VkResult GetStatusKHR(this VkSwapchainKHR swapchain, VkDevice device) => vkGetSwapchainStatusKHR(device, swapchain);
	[Inline] public static VkResult GetRefreshCycleDurationGOOGLE(this VkSwapchainKHR swapchain, VkDevice device, out VkRefreshCycleDurationGOOGLE pDisplayTimingProperties) => vkGetRefreshCycleDurationGOOGLE(device, swapchain, out pDisplayTimingProperties);
	[Inline] public static VkResult GetPastPresentationTimingGOOGLE(this VkSwapchainKHR swapchain, VkDevice device, out uint32 pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings = null) => vkGetPastPresentationTimingGOOGLE(device, swapchain, out pPresentationTimingCount, pPresentationTimings);
	[Inline] public static void CmdSetViewportWScalingNV(this VkCommandBuffer commandBuffer, uint32 firstViewport, VulkanSpan<VkViewportWScalingNV> pViewportWScalings) => vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, pViewportWScalings);
	[Inline] public static void CmdSetDiscardRectangleEXT(this VkCommandBuffer commandBuffer, uint32 firstDiscardRectangle, VulkanSpan<VkRect2D> pDiscardRectangles) => vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, pDiscardRectangles);
	[Inline] public static void CmdSetDiscardRectangleEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) => vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
	[Inline] public static void CmdSetDiscardRectangleModeEXT(this VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) => vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
	[Inline] public static void CmdSetSampleLocationsEXT(this VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo) => vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
	[Inline] public static void GetMultisamplePropertiesEXT(this VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, out VkMultisamplePropertiesEXT pMultisampleProperties) => vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, out pMultisampleProperties);
	[Inline] public static VkResult GetSurfaceCapabilities2KHR(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out VkSurfaceCapabilities2KHR pSurfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, out pSurfaceCapabilities);
	[Inline] public static VkResult GetSurfaceFormats2KHR(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out uint32 pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats = null) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, out pSurfaceFormatCount, pSurfaceFormats);
	[Inline] public static VkResult GetDisplayProperties2KHR(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayProperties2KHR* pProperties = null) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static VkResult GetDisplayPlaneProperties2KHR(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties = null) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static VkResult GetModeProperties2KHR(this VkDisplayKHR display, VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayModeProperties2KHR* pProperties = null) => vkGetDisplayModeProperties2KHR(physicalDevice, display, out pPropertyCount, pProperties);
	[Inline] public static VkResult GetDisplayPlaneCapabilities2KHR(this VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, out VkDisplayPlaneCapabilities2KHR pCapabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, out pCapabilities);
	[Inline] public static void GetBufferMemoryRequirements2(this VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetBufferMemoryRequirements2(device, pInfo, out pMemoryRequirements);
	[Inline] public static void GetImageMemoryRequirements2(this VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetImageMemoryRequirements2(device, pInfo, out pMemoryRequirements);
	[Inline] public static void GetImageSparseMemoryRequirements2(this VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements = null) => vkGetImageSparseMemoryRequirements2(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	[Inline] public static void GetBufferMemoryRequirements(this VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetDeviceBufferMemoryRequirements(device, pInfo, out pMemoryRequirements);
	[Inline] public static void GetImageMemoryRequirements(this VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetDeviceImageMemoryRequirements(device, pInfo, out pMemoryRequirements);
	[Inline] public static void GetImageSparseMemoryRequirements(this VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements = null) => vkGetDeviceImageSparseMemoryRequirements(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	[Inline] public static VkResult CreateSamplerYcbcrConversion(this VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSamplerYcbcrConversion pYcbcrConversion) => vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, out pYcbcrConversion);
	[Inline] public static void Destroy(this VkSamplerYcbcrConversion ycbcrConversion, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
	[Inline] public static void GetQueue2(this VkDevice device, VkDeviceQueueInfo2* pQueueInfo, out VkQueue pQueue) => vkGetDeviceQueue2(device, pQueueInfo, out pQueue);
	[Inline] public static VkResult CreateValidationCacheEXT(this VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkValidationCacheEXT pValidationCache) => vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, out pValidationCache);
	[Inline] public static void DestroyEXT(this VkValidationCacheEXT validationCache, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	[Inline] public static VkResult GetDataEXT(this VkValidationCacheEXT validationCache, VkDevice device, out c_size pDataSize, out void pData) => vkGetValidationCacheDataEXT(device, validationCache, out pDataSize, out pData);
	[Inline] public static VkResult MergesEXT(this VkValidationCacheEXT dstCache, VkDevice device, VulkanSpan<VkValidationCacheEXT> pSrcCaches) => vkMergeValidationCachesEXT(device, dstCache, pSrcCaches);
	[Inline] public static void GetDescriptorSetLayoutSupport(this VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, out VkDescriptorSetLayoutSupport pSupport) => vkGetDescriptorSetLayoutSupport(device, pCreateInfo, out pSupport);
	[Inline] public static VkResult GetShaderInfoAMD(this VkPipeline pipeline, VkDevice device, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, out c_size pInfoSize, out void pInfo) => vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, out pInfoSize, out pInfo);
	[Inline] public static void SetLocalDimmingAMD(this VkSwapchainKHR swapChain, VkDevice device, VkBool32 localDimmingEnable) => vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	[Inline] public static VkResult GetCalibrateableTimeDomainsKHR(this VkPhysicalDevice physicalDevice, out uint32 pTimeDomainCount, VkTimeDomainKHR* pTimeDomains = null) => vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, out pTimeDomainCount, pTimeDomains);
	[Inline] public static VkResult GetCalibratedTimestampsKHR(this VkDevice device, VulkanDuoSpan<VkCalibratedTimestampInfoKHR, uint64> pTimestampInfos_pTimestamps, out uint64 pMaxDeviation) => vkGetCalibratedTimestampsKHR(device, pTimestampInfos_pTimestamps, out pMaxDeviation);
	[Inline] public static VkResult SetDebugUtilsObjectNameEXT(this VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo) => vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
	[Inline] public static VkResult SetDebugUtilsObjectTagEXT(this VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo) => vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
	[Inline] public static void BeginDebugUtilsLabelEXT(this VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo) => vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	[Inline] public static void EndDebugUtilsLabelEXT(this VkQueue queue) => vkQueueEndDebugUtilsLabelEXT(queue);
	[Inline] public static void InsertDebugUtilsLabelEXT(this VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo) => vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	[Inline] public static void CmdBeginDebugUtilsLabelEXT(this VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) => vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	[Inline] public static void CmdEndDebugUtilsLabelEXT(this VkCommandBuffer commandBuffer) => vkCmdEndDebugUtilsLabelEXT(commandBuffer);
	[Inline] public static void CmdInsertDebugUtilsLabelEXT(this VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) => vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	[Inline] public static VkResult CreateDebugUtilsMessengerEXT(this VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDebugUtilsMessengerEXT pMessenger) => vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, out pMessenger);
	[Inline] public static void DestroyEXT(this VkDebugUtilsMessengerEXT messenger, VkInstance instance, VkAllocationCallbacks* pAllocator = null) => vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
	[Inline] public static void SubmitDebugUtilsMessageEXT(this VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) => vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
	[Inline] public static VkResult GetMemoryHostPointerPropertiesEXT(this VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, out VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties) => vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, out pMemoryHostPointerProperties);
	[Inline] public static void CmdWriteBufferMarkerAMD(this VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker) => vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	[Inline] public static VkResult CreateRenderPass2(this VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkRenderPass pRenderPass) => vkCreateRenderPass2(device, pCreateInfo, pAllocator, out pRenderPass);
	[Inline] public static void CmdBeginRenderPass2(this VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	[Inline] public static void CmdNextSubpass2(this VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo) => vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	[Inline] public static void CmdEndRenderPass2(this VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
	[Inline] public static VkResult GetCounterValue(this VkSemaphore semaphore, VkDevice device, out uint64 pValue) => vkGetSemaphoreCounterValue(device, semaphore, out pValue);
	[Inline] public static VkResult WaitSemaphores(this VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64 timeout) => vkWaitSemaphores(device, pWaitInfo, timeout);
	[Inline] public static VkResult SignalSemaphore(this VkDevice device, VkSemaphoreSignalInfo* pSignalInfo) => vkSignalSemaphore(device, pSignalInfo);
	[Inline] public static void CmdDrawIndirectCount(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride) => vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	[Inline] public static void CmdDrawIndexedIndirectCount(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride) => vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	[Inline] public static void CmdSetCheckpointNV(this VkCommandBuffer commandBuffer, void* pCheckpointMarker) => vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
	[Inline] public static void GetCheckpointDataNV(this VkQueue queue, out uint32 pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData = null) => vkGetQueueCheckpointDataNV(queue, out pCheckpointDataCount, pCheckpointData);
	[Inline] public static void CmdBindTransformFeedbackBuffersEXT(this VkCommandBuffer commandBuffer, uint32 firstBinding, VulkanTrioSpan<VkBuffer, VkDeviceSize, VkDeviceSize> pBuffers_pOffsets_pSizes = .()) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, pBuffers_pOffsets_pSizes);
	[Inline] public static void CmdBeginTransformFeedbackEXT(this VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, VulkanDuoSpan<VkBuffer, VkDeviceSize> pCounterBuffers_pCounterBufferOffsets = .()) => vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, pCounterBuffers_pCounterBufferOffsets);
	[Inline] public static void CmdEndTransformFeedbackEXT(this VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, VulkanDuoSpan<VkBuffer, VkDeviceSize> pCounterBuffers_pCounterBufferOffsets = .()) => vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, pCounterBuffers_pCounterBufferOffsets);
	[Inline] public static void CmdBeginQueryIndexedEXT(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags, uint32 index) => vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	[Inline] public static void CmdEndQueryIndexedEXT(this VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, uint32 index) => vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
	[Inline] public static void CmdDrawIndirectByteCountEXT(this VkCommandBuffer commandBuffer, uint32 instanceCount, uint32 firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32 counterOffset, uint32 vertexStride) => vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	[Inline] public static void CmdSetExclusiveScissorNV(this VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, VulkanSpan<VkRect2D> pExclusiveScissors) => vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, pExclusiveScissors);
	[Inline] public static void CmdSetExclusiveScissorEnableNV(this VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, VulkanSpan<VkBool32> pExclusiveScissorEnables) => vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, pExclusiveScissorEnables);
	[Inline] public static void CmdBindShadingRateImageNV(this VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) => vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
	[Inline] public static void CmdSetViewportShadingRatePaletteNV(this VkCommandBuffer commandBuffer, uint32 firstViewport, VulkanSpan<VkShadingRatePaletteNV> pShadingRatePalettes) => vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, pShadingRatePalettes);
	[Inline] public static void CmdSetCoarseSampleOrderNV(this VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, VulkanSpan<VkCoarseSampleOrderCustomNV> pCustomSampleOrders = .()) => vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, pCustomSampleOrders);
	[Inline] public static void CmdDrawMeshTasksNV(this VkCommandBuffer commandBuffer, uint32 taskCount, uint32 firstTask) => vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
	[Inline] public static void CmdDrawMeshTasksIndirectNV(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride) => vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	[Inline] public static void CmdDrawMeshTasksIndirectCountNV(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride) => vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	[Inline] public static void CmdDrawMeshTasksEXT(this VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ) => vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
	[Inline] public static void CmdDrawMeshTasksIndirectEXT(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride) => vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
	[Inline] public static void CmdDrawMeshTasksIndirectCountEXT(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride) => vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	[Inline] public static VkResult CompileDeferredNV(this VkPipeline pipeline, VkDevice device, uint32 shader) => vkCompileDeferredNV(device, pipeline, shader);
	[Inline] public static VkResult CreateAccelerationStructureNV(this VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkAccelerationStructureNV pAccelerationStructure) => vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, out pAccelerationStructure);
	[Inline] public static void CmdBindInvocationMaskHUAWEI(this VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) => vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
	[Inline] public static void DestroyKHR(this VkAccelerationStructureKHR accelerationStructure, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	[Inline] public static void DestroyNV(this VkAccelerationStructureNV accelerationStructure, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	[Inline] public static void GetAccelerationStructureMemoryRequirementsNV(this VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, out VkMemoryRequirements2KHR pMemoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, out pMemoryRequirements);
	[Inline] public static VkResult BindAccelerationStructureMemoryNV(this VkDevice device, VulkanSpan<VkBindAccelerationStructureMemoryInfoNV> pBindInfos) => vkBindAccelerationStructureMemoryNV(device, pBindInfos);
	[Inline] public static void CmdCopyAccelerationStructureNV(this VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) => vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
	[Inline] public static void CmdCopyAccelerationStructureKHR(this VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo) => vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	[Inline] public static VkResult CopyAccelerationStructureKHR(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyAccelerationStructureInfoKHR* pInfo) => vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
	[Inline] public static void CmdCopyAccelerationStructureToMemoryKHR(this VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) => vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
	[Inline] public static VkResult CopyAccelerationStructureToMemoryKHR(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) => vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
	[Inline] public static void CmdCopyMemoryToAccelerationStructureKHR(this VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) => vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
	[Inline] public static VkResult CopyMemoryToAccelerationStructureKHR(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) => vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
	[Inline] public static void CmdWriteAccelerationStructuresPropertiesKHR(this VkCommandBuffer commandBuffer, VulkanSpan<VkAccelerationStructureKHR> pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery) => vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, pAccelerationStructures, queryType, queryPool, firstQuery);
	[Inline] public static void CmdWriteAccelerationStructuresPropertiesNV(this VkCommandBuffer commandBuffer, VulkanSpan<VkAccelerationStructureNV> pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery) => vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, pAccelerationStructures, queryType, queryPool, firstQuery);
	[Inline] public static void CmdBuildAccelerationStructureNV(this VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) => vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	[Inline] public static VkResult WriteAccelerationStructuresPropertiesKHR(this VkDevice device, VulkanSpan<VkAccelerationStructureKHR> pAccelerationStructures, VkQueryType queryType, c_size dataSize, out void pData, c_size stride) => vkWriteAccelerationStructuresPropertiesKHR(device, pAccelerationStructures, queryType, dataSize, out pData, stride);
	[Inline] public static void CmdTraceRaysKHR(this VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32 width, uint32 height, uint32 depth) => vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	[Inline] public static void CmdTraceRaysNV(this VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32 width, uint32 height, uint32 depth) => vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	[Inline] public static VkResult GetRayTracingShaderGroupHandlesKHR(this VkPipeline pipeline, VkDevice device, uint32 firstGroup, uint32 groupCount, c_size dataSize, out void pData) => vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, out pData);
	[Inline] public static VkResult GetRayTracingCaptureReplayShaderGroupHandlesKHR(this VkPipeline pipeline, VkDevice device, uint32 firstGroup, uint32 groupCount, c_size dataSize, out void pData) => vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, out pData);
	[Inline] public static VkResult GetHandleNV(this VkAccelerationStructureNV accelerationStructure, VkDevice device, c_size dataSize, out void pData) => vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, out pData);
	[Inline] public static VkResult CreateRayTracingPipelinesNV(this VkPipelineCache pipelineCache, VkDevice device, VulkanSpan<VkRayTracingPipelineCreateInfoNV> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, pCreateInfos, pAllocator, out pPipelines);
	[Inline] public static VkResult CreateRayTracingPipelinesKHR(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkPipelineCache pipelineCache, VulkanSpan<VkRayTracingPipelineCreateInfoKHR> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines) => vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, pCreateInfos, pAllocator, out pPipelines);
	[Inline] public static VkResult GetCooperativeMatrixPropertiesNV(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties = null) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static void CmdTraceRaysIndirectKHR(this VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
	[Inline] public static void CmdTraceRaysIndirect2KHR(this VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) => vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
	[Inline] public static void GetAccelerationStructureCompatibilityKHR(this VkDevice device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, out VkAccelerationStructureCompatibilityKHR pCompatibility) => vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, out pCompatibility);
	[Inline] public static VkDeviceSize GetRayTracingShaderGroupStackSizeKHR(this VkPipeline pipeline, VkDevice device, uint32 group, VkShaderGroupShaderKHR groupShader) => vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
	[Inline] public static void CmdSetRayTracingPipelineStackSizeKHR(this VkCommandBuffer commandBuffer, uint32 pipelineStackSize) => vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
	[Inline] public static uint32 GetImageViewHandleNVX(this VkDevice device, VkImageViewHandleInfoNVX* pInfo) => vkGetImageViewHandleNVX(device, pInfo);
	[Inline] public static uint64 GetImageViewHandle64NVX(this VkDevice device, VkImageViewHandleInfoNVX* pInfo) => vkGetImageViewHandle64NVX(device, pInfo);
	[Inline] public static VkResult GetAddressNVX(this VkImageView imageView, VkDevice device, out VkImageViewAddressPropertiesNVX pProperties) => vkGetImageViewAddressNVX(device, imageView, out pProperties);
	[Inline] public static VkResult EnumerateQueueFamilyPerformanceQueryCountersKHR(this VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, out uint32 pCounterCount, VkPerformanceCounterKHR* pCounters = null, VkPerformanceCounterDescriptionKHR* pCounterDescriptions = null) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, out pCounterCount, pCounters, pCounterDescriptions);
	[Inline] public static void GetQueueFamilyPerformanceQueryPassesKHR(this VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, out uint32 pNumPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, out pNumPasses);
	[Inline] public static VkResult AcquireProfilingLockKHR(this VkDevice device, VkAcquireProfilingLockInfoKHR* pInfo) => vkAcquireProfilingLockKHR(device, pInfo);
	[Inline] public static void ReleaseProfilingLockKHR(this VkDevice device) => vkReleaseProfilingLockKHR(device);
	[Inline] public static VkResult GetDrmFormatModifierPropertiesEXT(this VkImage image, VkDevice device, out VkImageDrmFormatModifierPropertiesEXT pProperties) => vkGetImageDrmFormatModifierPropertiesEXT(device, image, out pProperties);
	[Inline] public static uint64 GetBufferOpaqueCaptureAddress(this VkDevice device, VkBufferDeviceAddressInfo* pInfo) => vkGetBufferOpaqueCaptureAddress(device, pInfo);
	[Inline] public static VkDeviceAddress GetBufferAddress(this VkDevice device, VkBufferDeviceAddressInfo* pInfo) => vkGetBufferDeviceAddress(device, pInfo);
	[Inline] public static VkResult CreateHeadlessSurfaceEXT(this VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSurfaceKHR pSurface) => vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, out pSurface);
	[Inline] public static VkResult GetSupportedFramebufferMixedSamplesCombinationsNV(this VkPhysicalDevice physicalDevice, out uint32 pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations = null) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, out pCombinationCount, pCombinations);
	[Inline] public static VkResult InitializePerformanceApiINTEL(this VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo) => vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	[Inline] public static void UninitializePerformanceApiINTEL(this VkDevice device) => vkUninitializePerformanceApiINTEL(device);
	[Inline] public static VkResult CmdSetPerformanceMarkerINTEL(this VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo) => vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	[Inline] public static VkResult CmdSetPerformanceStreamMarkerINTEL(this VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) => vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
	[Inline] public static VkResult CmdSetPerformanceOverrideINTEL(this VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo) => vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
	[Inline] public static VkResult AcquirePerformanceConfigurationINTEL(this VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, out VkPerformanceConfigurationINTEL pConfiguration) => vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, out pConfiguration);
	[Inline] public static VkResult ReleaseINTEL(this VkPerformanceConfigurationINTEL configuration, VkDevice device) => vkReleasePerformanceConfigurationINTEL(device, configuration);
	[Inline] public static VkResult SetINTEL(this VkPerformanceConfigurationINTEL configuration, VkQueue queue) => vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	[Inline] public static VkResult GetPerformanceParameterINTEL(this VkDevice device, VkPerformanceParameterTypeINTEL parameter, out VkPerformanceValueINTEL pValue) => vkGetPerformanceParameterINTEL(device, parameter, out pValue);
	[Inline] public static uint64 GetMemoryOpaqueCaptureAddress(this VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) => vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
	[Inline] public static VkResult GetPipelineExecutablePropertiesKHR(this VkDevice device, VkPipelineInfoKHR* pPipelineInfo, out uint32 pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties = null) => vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, out pExecutableCount, pProperties);
	[Inline] public static VkResult GetPipelineExecutableStatisticsKHR(this VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, out uint32 pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics = null) => vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, out pStatisticCount, pStatistics);
	[Inline] public static VkResult GetPipelineExecutableInternalRepresentationsKHR(this VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, out uint32 pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations = null) => vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, out pInternalRepresentationCount, pInternalRepresentations);
	[Inline] public static void CmdSetLineStipple(this VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern) => vkCmdSetLineStipple(commandBuffer, lineStippleFactor, lineStipplePattern);
	[Inline] public static VkResult GetToolProperties(this VkPhysicalDevice physicalDevice, out uint32 pToolCount, VkPhysicalDeviceToolProperties* pToolProperties = null) => vkGetPhysicalDeviceToolProperties(physicalDevice, out pToolCount, pToolProperties);
	[Inline] public static VkResult CreateAccelerationStructureKHR(this VkDevice device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkAccelerationStructureKHR pAccelerationStructure) => vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, out pAccelerationStructure);
	[Inline] public static void CmdBuildAccelerationStructuresKHR(this VkCommandBuffer commandBuffer, VulkanDuoSpan<VkAccelerationStructureBuildGeometryInfoKHR, VkAccelerationStructureBuildRangeInfoKHR> pInfos_ppBuildRangeInfos) => vkCmdBuildAccelerationStructuresKHR(commandBuffer, pInfos_ppBuildRangeInfos);
	[Inline] public static void CmdBuildAccelerationStructuresIndirectKHR(this VkCommandBuffer commandBuffer, VulkanQuadSpan<VkAccelerationStructureBuildGeometryInfoKHR, VkDeviceAddress, uint32, uint32> pInfos_pIndirectDeviceAddresses_pIndirectStrides_ppMaxPrimitiveCounts) => vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, pInfos_pIndirectDeviceAddresses_pIndirectStrides_ppMaxPrimitiveCounts);
	[Inline] public static VkResult BuildAccelerationStructuresKHR(this VkDeferredOperationKHR deferredOperation, VkDevice device, VulkanDuoSpan<VkAccelerationStructureBuildGeometryInfoKHR, VkAccelerationStructureBuildRangeInfoKHR> pInfos_ppBuildRangeInfos) => vkBuildAccelerationStructuresKHR(device, deferredOperation, pInfos_ppBuildRangeInfos);
	[Inline] public static VkDeviceAddress GetAccelerationStructureAddressKHR(this VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo) => vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	[Inline] public static VkResult CreateDeferredOperationKHR(this VkDevice device, VkAllocationCallbacks* pAllocator, out VkDeferredOperationKHR pDeferredOperation) => vkCreateDeferredOperationKHR(device, pAllocator, out pDeferredOperation);
	[Inline] public static void DestroyKHR(this VkDeferredOperationKHR operation, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	[Inline] public static uint32 GetMaxConcurrencyKHR(this VkDeferredOperationKHR operation, VkDevice device) => vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	[Inline] public static VkResult GetResultKHR(this VkDeferredOperationKHR operation, VkDevice device) => vkGetDeferredOperationResultKHR(device, operation);
	[Inline] public static VkResult JoinKHR(this VkDeferredOperationKHR operation, VkDevice device) => vkDeferredOperationJoinKHR(device, operation);
	[Inline] public static void GetPipelineIndirectMemoryRequirementsNV(this VkDevice device, VkComputePipelineCreateInfo* pCreateInfo, out VkMemoryRequirements2 pMemoryRequirements) => vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, out pMemoryRequirements);
	[Inline] public static VkDeviceAddress GetPipelineIndirectAddressNV(this VkDevice device, VkPipelineIndirectDeviceAddressInfoNV* pInfo) => vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
	[Inline] public static void AntiLagUpdateAMD(this VkDevice device, VkAntiLagDataAMD* pData) => vkAntiLagUpdateAMD(device, pData);
	[Inline] public static void CmdSetCullMode(this VkCommandBuffer commandBuffer, VkCullModeFlags cullMode = 0) => vkCmdSetCullMode(commandBuffer, cullMode);
	[Inline] public static void CmdSetFrontFace(this VkCommandBuffer commandBuffer, VkFrontFace frontFace) => vkCmdSetFrontFace(commandBuffer, frontFace);
	[Inline] public static void CmdSetPrimitiveTopology(this VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) => vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
	[Inline] public static void CmdSetViewportWithCount(this VkCommandBuffer commandBuffer, VulkanSpan<VkViewport> pViewports) => vkCmdSetViewportWithCount(commandBuffer, pViewports);
	[Inline] public static void CmdSetScissorWithCount(this VkCommandBuffer commandBuffer, VulkanSpan<VkRect2D> pScissors) => vkCmdSetScissorWithCount(commandBuffer, pScissors);
	[Inline] public static void CmdBindIndexBuffer2(this VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) => vkCmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);
	[Inline] public static void CmdBindVertexBuffers2(this VkCommandBuffer commandBuffer, uint32 firstBinding, VulkanQuadSpan<VkBuffer, VkDeviceSize, VkDeviceSize, VkDeviceSize> pBuffers_pOffsets_pSizes_pStrides = .()) => vkCmdBindVertexBuffers2(commandBuffer, firstBinding, pBuffers_pOffsets_pSizes_pStrides);
	[Inline] public static void CmdSetDepthTestEnable(this VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) => vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
	[Inline] public static void CmdSetDepthWriteEnable(this VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) => vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
	[Inline] public static void CmdSetDepthCompareOp(this VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) => vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
	[Inline] public static void CmdSetDepthBoundsTestEnable(this VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) => vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
	[Inline] public static void CmdSetStencilTestEnable(this VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) => vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
	[Inline] public static void CmdSetStencilOp(this VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) => vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	[Inline] public static void CmdSetPatchControlPointsEXT(this VkCommandBuffer commandBuffer, uint32 patchControlPoints) => vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
	[Inline] public static void CmdSetRasterizerDiscardEnable(this VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) => vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
	[Inline] public static void CmdSetDepthBiasEnable(this VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) => vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
	[Inline] public static void CmdSetLogicOpEXT(this VkCommandBuffer commandBuffer, VkLogicOp logicOp) => vkCmdSetLogicOpEXT(commandBuffer, logicOp);
	[Inline] public static void CmdSetPrimitiveRestartEnable(this VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) => vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
	[Inline] public static void CmdSetTessellationDomainOriginEXT(this VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) => vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
	[Inline] public static void CmdSetDepthClampEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) => vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
	[Inline] public static void CmdSetPolygonModeEXT(this VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) => vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
	[Inline] public static void CmdSetRasterizationSamplesEXT(this VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) => vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
	[Inline] public static void CmdSetSampleMaskEXT(this VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, VkSampleMask* pSampleMask) => vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
	[Inline] public static void CmdSetAlphaToCoverageEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) => vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
	[Inline] public static void CmdSetAlphaToOneEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) => vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
	[Inline] public static void CmdSetLogicOpEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) => vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
	[Inline] public static void CmdSetColorBlendEnableEXT(this VkCommandBuffer commandBuffer, uint32 firstAttachment, VulkanSpan<VkBool32> pColorBlendEnables) => vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, pColorBlendEnables);
	[Inline] public static void CmdSetColorBlendEquationEXT(this VkCommandBuffer commandBuffer, uint32 firstAttachment, VulkanSpan<VkColorBlendEquationEXT> pColorBlendEquations) => vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, pColorBlendEquations);
	[Inline] public static void CmdSetColorWriteMaskEXT(this VkCommandBuffer commandBuffer, uint32 firstAttachment, VulkanSpan<VkColorComponentFlags> pColorWriteMasks) => vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, pColorWriteMasks);
	[Inline] public static void CmdSetRasterizationStreamEXT(this VkCommandBuffer commandBuffer, uint32 rasterizationStream) => vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
	[Inline] public static void CmdSetConservativeRasterizationModeEXT(this VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) => vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
	[Inline] public static void CmdSetExtraPrimitiveOverestimationSizeEXT(this VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) => vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
	[Inline] public static void CmdSetDepthClipEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) => vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
	[Inline] public static void CmdSetSampleLocationsEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) => vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
	[Inline] public static void CmdSetColorBlendAdvancedEXT(this VkCommandBuffer commandBuffer, uint32 firstAttachment, VulkanSpan<VkColorBlendAdvancedEXT> pColorBlendAdvanced) => vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, pColorBlendAdvanced);
	[Inline] public static void CmdSetProvokingVertexModeEXT(this VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) => vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
	[Inline] public static void CmdSetLineRasterizationModeEXT(this VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) => vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
	[Inline] public static void CmdSetLineStippleEnableEXT(this VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) => vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
	[Inline] public static void CmdSetDepthClipNegativeOneToOneEXT(this VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) => vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
	[Inline] public static void CmdSetViewportWScalingEnableNV(this VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) => vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
	[Inline] public static void CmdSetViewportSwizzleNV(this VkCommandBuffer commandBuffer, uint32 firstViewport, VulkanSpan<VkViewportSwizzleNV> pViewportSwizzles) => vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, pViewportSwizzles);
	[Inline] public static void CmdSetCoverageToColorEnableNV(this VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) => vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
	[Inline] public static void CmdSetCoverageToColorLocationNV(this VkCommandBuffer commandBuffer, uint32 coverageToColorLocation) => vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
	[Inline] public static void CmdSetCoverageModulationModeNV(this VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) => vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
	[Inline] public static void CmdSetCoverageModulationTableEnableNV(this VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) => vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
	[Inline] public static void CmdSetCoverageModulationTableNV(this VkCommandBuffer commandBuffer, VulkanSpan<float> pCoverageModulationTable) => vkCmdSetCoverageModulationTableNV(commandBuffer, pCoverageModulationTable);
	[Inline] public static void CmdSetShadingRateImageEnableNV(this VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) => vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
	[Inline] public static void CmdSetCoverageReductionModeNV(this VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) => vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
	[Inline] public static void CmdSetRepresentativeFragmentTestEnableNV(this VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) => vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
	[Inline] public static VkResult CreatePrivateDataSlot(this VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPrivateDataSlot pPrivateDataSlot) => vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, out pPrivateDataSlot);
	[Inline] public static void Destroy(this VkPrivateDataSlot privateDataSlot, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
	[Inline] public static VkResult SetPrivateData(this VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64 data) => vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
	[Inline] public static void GetPrivateData(this VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, out uint64 pData) => vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, out pData);
	[Inline] public static void CmdCopyBuffer2(this VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo) => vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
	[Inline] public static void CmdCopyImage2(this VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo) => vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
	[Inline] public static void CmdBlitImage2(this VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo) => vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
	[Inline] public static void CmdCopyBufferToImage2(this VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo) => vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
	[Inline] public static void CmdCopyImageToBuffer2(this VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo) => vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
	[Inline] public static void CmdResolveImage2(this VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo) => vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
	[Inline] public static void CmdSetFragmentShadingRateKHR(this VkCommandBuffer commandBuffer, VkExtent2D* pFragmentSize, VkFragmentShadingRateCombinerOpKHR[2] combinerOps) => vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
	[Inline] public static VkResult GetFragmentShadingRatesKHR(this VkPhysicalDevice physicalDevice, out uint32 pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates = null) => vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, out pFragmentShadingRateCount, pFragmentShadingRates);
	[Inline] public static void CmdSetFragmentShadingRateEnumNV(this VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR[2] combinerOps) => vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
	[Inline] public static void GetAccelerationStructureBuildSizesKHR(this VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint32* pMaxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR pSizeInfo) => vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, out pSizeInfo);
	[Inline] public static void CmdSetVertexInputEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkVertexInputBindingDescription2EXT> pVertexBindingDescriptions = .(), VulkanSpan<VkVertexInputAttributeDescription2EXT> pVertexAttributeDescriptions = .()) => vkCmdSetVertexInputEXT(commandBuffer, pVertexBindingDescriptions, pVertexAttributeDescriptions);
	[Inline] public static void CmdSetColorWriteEnableEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkBool32> pColorWriteEnables) => vkCmdSetColorWriteEnableEXT(commandBuffer, pColorWriteEnables);
	[Inline] public static void CmdSetEvent2(this VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo) => vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
	[Inline] public static void CmdResetEvent2(this VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask = 0) => vkCmdResetEvent2(commandBuffer, event, stageMask);
	[Inline] public static void CmdWaitEvents2(this VkCommandBuffer commandBuffer, VulkanDuoSpan<VkEvent, VkDependencyInfo> pEvents_pDependencyInfos) => vkCmdWaitEvents2(commandBuffer, pEvents_pDependencyInfos);
	[Inline] public static void CmdPipelineBarrier2(this VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo) => vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
	[Inline] public static VkResult Submit2(this VkQueue queue, VulkanSpan<VkSubmitInfo2> pSubmits = .(), VkFence fence = null) => vkQueueSubmit2(queue, pSubmits, fence);
	[Inline] public static void CmdWriteTimestamp2(this VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32 query) => vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
	[Inline] public static void CmdWriteBufferMarker2AMD(this VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker) => vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
	[Inline] public static void GetCheckpointData2NV(this VkQueue queue, out uint32 pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData = null) => vkGetQueueCheckpointData2NV(queue, out pCheckpointDataCount, pCheckpointData);
	[Inline] public static VkResult CopyMemoryToImage(this VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo) => vkCopyMemoryToImage(device, pCopyMemoryToImageInfo);
	[Inline] public static VkResult CopyImageToMemory(this VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo) => vkCopyImageToMemory(device, pCopyImageToMemoryInfo);
	[Inline] public static VkResult CopyImageToImage(this VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo) => vkCopyImageToImage(device, pCopyImageToImageInfo);
	[Inline] public static VkResult TransitionImageLayout(this VkDevice device, VulkanSpan<VkHostImageLayoutTransitionInfo> pTransitions) => vkTransitionImageLayout(device, pTransitions);
	[Inline] public static VkResult GetVideoCapabilitiesKHR(this VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* pVideoProfile, out VkVideoCapabilitiesKHR pCapabilities) => vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, out pCapabilities);
	[Inline] public static VkResult GetVideoFormatPropertiesKHR(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, out uint32 pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties = null) => vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, out pVideoFormatPropertyCount, pVideoFormatProperties);
	[Inline] public static VkResult GetVideoEncodeQualityLevelPropertiesKHR(this VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, out VkVideoEncodeQualityLevelPropertiesKHR pQualityLevelProperties) => vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo, out pQualityLevelProperties);
	[Inline] public static VkResult CreateVideoSessionKHR(this VkDevice device, VkVideoSessionCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkVideoSessionKHR pVideoSession) => vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, out pVideoSession);
	[Inline] public static void DestroyKHR(this VkVideoSessionKHR videoSession, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
	[Inline] public static VkResult CreateVideoSessionParametersKHR(this VkDevice device, VkVideoSessionParametersCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkVideoSessionParametersKHR pVideoSessionParameters) => vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, out pVideoSessionParameters);
	[Inline] public static VkResult UpdateKHR(this VkVideoSessionParametersKHR videoSessionParameters, VkDevice device, VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo) => vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
	[Inline] public static VkResult GetEncodedVideoSessionParametersKHR(this VkDevice device, VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, out VkVideoEncodeSessionParametersFeedbackInfoKHR pFeedbackInfo, out c_size pDataSize, out void pData) => vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, out pFeedbackInfo, out pDataSize, out pData);
	[Inline] public static void DestroyKHR(this VkVideoSessionParametersKHR videoSessionParameters, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
	[Inline] public static VkResult GetMemoryRequirementsKHR(this VkVideoSessionKHR videoSession, VkDevice device, out uint32 pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements = null) => vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, out pMemoryRequirementsCount, pMemoryRequirements);
	[Inline] public static VkResult BindMemoryKHR(this VkVideoSessionKHR videoSession, VkDevice device, VulkanSpan<VkBindVideoSessionMemoryInfoKHR> pBindSessionMemoryInfos) => vkBindVideoSessionMemoryKHR(device, videoSession, pBindSessionMemoryInfos);
	[Inline] public static void CmdDecodeVideoKHR(this VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* pDecodeInfo) => vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
	[Inline] public static void CmdBeginVideoCodingKHR(this VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* pBeginInfo) => vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
	[Inline] public static void CmdControlVideoCodingKHR(this VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* pCodingControlInfo) => vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
	[Inline] public static void CmdEndVideoCodingKHR(this VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* pEndCodingInfo) => vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
	[Inline] public static void CmdEncodeVideoKHR(this VkCommandBuffer commandBuffer, VkVideoEncodeInfoKHR* pEncodeInfo) => vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
	[Inline] public static void CmdDecompressMemoryNV(this VkCommandBuffer commandBuffer, VulkanSpan<VkDecompressMemoryRegionNV> pDecompressMemoryRegions) => vkCmdDecompressMemoryNV(commandBuffer, pDecompressMemoryRegions);
	[Inline] public static void CmdDecompressMemoryIndirectCountNV(this VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32 stride) => vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
	[Inline] public static VkResult CreateCuModuleNVX(this VkDevice device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCuModuleNVX pModule) => vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, out pModule);
	[Inline] public static VkResult CreateCuFunctionNVX(this VkDevice device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCuFunctionNVX pFunction) => vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, out pFunction);
	[Inline] public static void DestroyNVX(this VkCuModuleNVX module, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyCuModuleNVX(device, module, pAllocator);
	[Inline] public static void DestroyNVX(this VkCuFunctionNVX @function, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyCuFunctionNVX(device, @function, pAllocator);
	[Inline] public static void CmdCuLaunchKernelNVX(this VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo) => vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
	[Inline] public static void GetSizeEXT(this VkDescriptorSetLayout layout, VkDevice device, out VkDeviceSize pLayoutSizeInBytes) => vkGetDescriptorSetLayoutSizeEXT(device, layout, out pLayoutSizeInBytes);
	[Inline] public static void GetBindingOffsetEXT(this VkDescriptorSetLayout layout, VkDevice device, uint32 binding, out VkDeviceSize pOffset) => vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, out pOffset);
	[Inline] public static void GetDescriptorEXT(this VkDevice device, VkDescriptorGetInfoEXT* pDescriptorInfo, c_size dataSize, out void pDescriptor) => vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, out pDescriptor);
	[Inline] public static void CmdBindDescriptorBuffersEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkDescriptorBufferBindingInfoEXT> pBindingInfos) => vkCmdBindDescriptorBuffersEXT(commandBuffer, pBindingInfos);
	[Inline] public static void CmdSetDescriptorBufferOffsetsEXT(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, VulkanDuoSpan<uint32, VkDeviceSize> pBufferIndices_pOffsets) => vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, pBufferIndices_pOffsets);
	[Inline] public static void CmdBindDescriptorBufferEmbeddedSamplersEXT(this VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set) => vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
	[Inline] public static VkResult GetBufferOpaqueCaptureDescriptorDataEXT(this VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* pInfo, out void pData) => vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, out pData);
	[Inline] public static VkResult GetImageOpaqueCaptureDescriptorDataEXT(this VkDevice device, VkImageCaptureDescriptorDataInfoEXT* pInfo, out void pData) => vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, out pData);
	[Inline] public static VkResult GetImageViewOpaqueCaptureDescriptorDataEXT(this VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* pInfo, out void pData) => vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, out pData);
	[Inline] public static VkResult GetSamplerOpaqueCaptureDescriptorDataEXT(this VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* pInfo, out void pData) => vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, out pData);
	[Inline] public static VkResult GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(this VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, out void pData) => vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, out pData);
	[Inline] public static void SetMemoryPriorityEXT(this VkDeviceMemory memory, VkDevice device, float priority) => vkSetDeviceMemoryPriorityEXT(device, memory, priority);
	[Inline] public static VkResult AcquireDrmDisplayEXT(this VkPhysicalDevice physicalDevice, int32 drmFd, VkDisplayKHR display) => vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
	[Inline] public static VkResult GetDrmDisplayEXT(this VkPhysicalDevice physicalDevice, int32 drmFd, uint32 connectorId, out VkDisplayKHR display) => vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, out display);
	[Inline] public static VkResult WaitForPresentKHR(this VkSwapchainKHR swapchain, VkDevice device, uint64 presentId, uint64 timeout) => vkWaitForPresentKHR(device, swapchain, presentId, timeout);
	[Inline] public static VkResult CreateCudaModuleNV(this VkDevice device, VkCudaModuleCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCudaModuleNV pModule) => vkCreateCudaModuleNV(device, pCreateInfo, pAllocator, out pModule);
	[Inline] public static VkResult GetCacheNV(this VkCudaModuleNV module, VkDevice device, out c_size pCacheSize, out void pCacheData) => vkGetCudaModuleCacheNV(device, module, out pCacheSize, out pCacheData);
	[Inline] public static VkResult CreateCudaFunctionNV(this VkDevice device, VkCudaFunctionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCudaFunctionNV pFunction) => vkCreateCudaFunctionNV(device, pCreateInfo, pAllocator, out pFunction);
	[Inline] public static void DestroyNV(this VkCudaModuleNV module, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyCudaModuleNV(device, module, pAllocator);
	[Inline] public static void DestroyNV(this VkCudaFunctionNV @function, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyCudaFunctionNV(device, @function, pAllocator);
	[Inline] public static void CmdCudaLaunchKernelNV(this VkCommandBuffer commandBuffer, VkCudaLaunchInfoNV* pLaunchInfo) => vkCmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);
	[Inline] public static void CmdBeginRendering(this VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo) => vkCmdBeginRendering(commandBuffer, pRenderingInfo);
	[Inline] public static void CmdEndRendering(this VkCommandBuffer commandBuffer) => vkCmdEndRendering(commandBuffer);
	[Inline] public static void GetDescriptorSetLayoutHostMappingInfoVALVE(this VkDevice device, VkDescriptorSetBindingReferenceVALVE* pBindingReference, out VkDescriptorSetLayoutHostMappingInfoVALVE pHostMapping) => vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, out pHostMapping);
	[Inline] public static void GetHostMappingVALVE(this VkDescriptorSet descriptorSet, VkDevice device, out void* ppData) => vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, out ppData);
	[Inline] public static VkResult CreateMicromapEXT(this VkDevice device, VkMicromapCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkMicromapEXT pMicromap) => vkCreateMicromapEXT(device, pCreateInfo, pAllocator, out pMicromap);
	[Inline] public static void CmdBuildMicromapsEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkMicromapBuildInfoEXT> pInfos) => vkCmdBuildMicromapsEXT(commandBuffer, pInfos);
	[Inline] public static VkResult BuildMicromapsEXT(this VkDeferredOperationKHR deferredOperation, VkDevice device, VulkanSpan<VkMicromapBuildInfoEXT> pInfos) => vkBuildMicromapsEXT(device, deferredOperation, pInfos);
	[Inline] public static void DestroyEXT(this VkMicromapEXT micromap, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyMicromapEXT(device, micromap, pAllocator);
	[Inline] public static void CmdCopyMicromapEXT(this VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* pInfo) => vkCmdCopyMicromapEXT(commandBuffer, pInfo);
	[Inline] public static VkResult CopyMicromapEXT(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyMicromapInfoEXT* pInfo) => vkCopyMicromapEXT(device, deferredOperation, pInfo);
	[Inline] public static void CmdCopyMicromapToMemoryEXT(this VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* pInfo) => vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
	[Inline] public static VkResult CopyMicromapToMemoryEXT(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyMicromapToMemoryInfoEXT* pInfo) => vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
	[Inline] public static void CmdCopyMemoryToMicromapEXT(this VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* pInfo) => vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
	[Inline] public static VkResult CopyMemoryToMicromapEXT(this VkDeferredOperationKHR deferredOperation, VkDevice device, VkCopyMemoryToMicromapInfoEXT* pInfo) => vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
	[Inline] public static void CmdWriteMicromapsPropertiesEXT(this VkCommandBuffer commandBuffer, VulkanSpan<VkMicromapEXT> pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery) => vkCmdWriteMicromapsPropertiesEXT(commandBuffer, pMicromaps, queryType, queryPool, firstQuery);
	[Inline] public static VkResult WriteMicromapsPropertiesEXT(this VkDevice device, VulkanSpan<VkMicromapEXT> pMicromaps, VkQueryType queryType, c_size dataSize, out void pData, c_size stride) => vkWriteMicromapsPropertiesEXT(device, pMicromaps, queryType, dataSize, out pData, stride);
	[Inline] public static void GetMicromapCompatibilityEXT(this VkDevice device, VkMicromapVersionInfoEXT* pVersionInfo, out VkAccelerationStructureCompatibilityKHR pCompatibility) => vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, out pCompatibility);
	[Inline] public static void GetMicromapBuildSizesEXT(this VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* pBuildInfo, out VkMicromapBuildSizesInfoEXT pSizeInfo) => vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, out pSizeInfo);
	[Inline] public static void GetIdentifierEXT(this VkShaderModule shaderModule, VkDevice device, out VkShaderModuleIdentifierEXT pIdentifier) => vkGetShaderModuleIdentifierEXT(device, shaderModule, out pIdentifier);
	[Inline] public static void GetShaderModuleCreateInfoIdentifierEXT(this VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, out VkShaderModuleIdentifierEXT pIdentifier) => vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, out pIdentifier);
	[Inline] public static void GetSubresourceLayout2(this VkImage image, VkDevice device, VkImageSubresource2* pSubresource, out VkSubresourceLayout2 pLayout) => vkGetImageSubresourceLayout2(device, image, pSubresource, out pLayout);
	[Inline] public static VkResult GetPipelinePropertiesEXT(this VkDevice device, VkPipelineInfoEXT* pPipelineInfo, out VkBaseOutStructure pPipelineProperties) => vkGetPipelinePropertiesEXT(device, pPipelineInfo, out pPipelineProperties);
	[Inline] public static VkResult GetTilePropertiesQCOM(this VkFramebuffer framebuffer, VkDevice device, out uint32 pPropertiesCount, VkTilePropertiesQCOM* pProperties = null) => vkGetFramebufferTilePropertiesQCOM(device, framebuffer, out pPropertiesCount, pProperties);
	[Inline] public static VkResult GetDynamicRenderingTilePropertiesQCOM(this VkDevice device, VkRenderingInfo* pRenderingInfo, out VkTilePropertiesQCOM pProperties) => vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, out pProperties);
	[Inline] public static VkResult GetOpticalFlowImageFormatsNV(this VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, out uint32 pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties = null) => vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, out pFormatCount, pImageFormatProperties);
	[Inline] public static VkResult CreateOpticalFlowSessionNV(this VkDevice device, VkOpticalFlowSessionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkOpticalFlowSessionNV pSession) => vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, out pSession);
	[Inline] public static void DestroyNV(this VkOpticalFlowSessionNV session, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
	[Inline] public static VkResult BindImageNV(this VkOpticalFlowSessionNV session, VkDevice device, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) => vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
	[Inline] public static void CmdOpticalFlowExecuteNV(this VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* pExecuteInfo) => vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
	[Inline] public static VkResult GetFaultInfoEXT(this VkDevice device, out VkDeviceFaultCountsEXT pFaultCounts, out VkDeviceFaultInfoEXT pFaultInfo) => vkGetDeviceFaultInfoEXT(device, out pFaultCounts, out pFaultInfo);
	[Inline] public static void CmdSetDepthBias2EXT(this VkCommandBuffer commandBuffer, VkDepthBiasInfoEXT* pDepthBiasInfo) => vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
	[Inline] public static VkResult ReleaseSwapchainImagesEXT(this VkDevice device, VkReleaseSwapchainImagesInfoEXT* pReleaseInfo) => vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
	[Inline] public static void GetImageSubresourceLayout(this VkDevice device, VkDeviceImageSubresourceInfo* pInfo, out VkSubresourceLayout2 pLayout) => vkGetDeviceImageSubresourceLayout(device, pInfo, out pLayout);
	[Inline] public static VkResult MapMemory2(this VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, out void* ppData) => vkMapMemory2(device, pMemoryMapInfo, out ppData);
	[Inline] public static VkResult UnmapMemory2(this VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo) => vkUnmapMemory2(device, pMemoryUnmapInfo);
	[Inline] public static VkResult CreateShadersEXT(this VkDevice device, VulkanSpan<VkShaderCreateInfoEXT> pCreateInfos, VkAllocationCallbacks* pAllocator, out VkShaderEXT pShaders) => vkCreateShadersEXT(device, pCreateInfos, pAllocator, out pShaders);
	[Inline] public static void DestroyEXT(this VkShaderEXT shader, VkDevice device, VkAllocationCallbacks* pAllocator = null) => vkDestroyShaderEXT(device, shader, pAllocator);
	[Inline] public static VkResult GetBinaryDataEXT(this VkShaderEXT shader, VkDevice device, out c_size pDataSize, out void pData) => vkGetShaderBinaryDataEXT(device, shader, out pDataSize, out pData);
	[Inline] public static void CmdBindShadersEXT(this VkCommandBuffer commandBuffer, VulkanDuoSpan<VkShaderStageFlagBits, VkShaderEXT> pStages_pShaders) => vkCmdBindShadersEXT(commandBuffer, pStages_pShaders);
	[Inline] public static VkResult GetCooperativeMatrixPropertiesKHR(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties = null) => vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, out pPropertyCount, pProperties);
	[Inline] public static void CmdBindDescriptorSets2(this VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo) => vkCmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);
	[Inline] public static void CmdPushConstants2(this VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo) => vkCmdPushConstants2(commandBuffer, pPushConstantsInfo);
	[Inline] public static void CmdPushDescriptorSet2(this VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo) => vkCmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);
	[Inline] public static void CmdPushDescriptorSetWithTemplate2(this VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo) => vkCmdPushDescriptorSetWithTemplate2(commandBuffer, pPushDescriptorSetWithTemplateInfo);
	[Inline] public static void CmdSetDescriptorBufferOffsets2EXT(this VkCommandBuffer commandBuffer, VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo) => vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);
	[Inline] public static void CmdBindDescriptorBufferEmbeddedSamplers2EXT(this VkCommandBuffer commandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo) => vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
	[Inline] public static VkResult SetLatencySleepModeNV(this VkSwapchainKHR swapchain, VkDevice device, VkLatencySleepModeInfoNV* pSleepModeInfo) => vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
	[Inline] public static VkResult LatencySleepNV(this VkSwapchainKHR swapchain, VkDevice device, VkLatencySleepInfoNV* pSleepInfo) => vkLatencySleepNV(device, swapchain, pSleepInfo);
	[Inline] public static void SetLatencyMarkerNV(this VkSwapchainKHR swapchain, VkDevice device, VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo) => vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
	[Inline] public static void GetLatencyTimingsNV(this VkSwapchainKHR swapchain, VkDevice device, out VkGetLatencyMarkerInfoNV pLatencyMarkerInfo) => vkGetLatencyTimingsNV(device, swapchain, out pLatencyMarkerInfo);
	[Inline] public static void NotifyOutOfBandNV(this VkQueue queue, VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo) => vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
	[Inline] public static void CmdSetRenderingAttachmentLocations(this VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo) => vkCmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);
	[Inline] public static void CmdSetRenderingInputAttachmentIndices(this VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo) => vkCmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);
	[Inline] public static void CmdSetDepthClampRangeEXT(this VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, VkDepthClampRangeEXT* pDepthClampRange = null) => vkCmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);
	[Inline] public static VkResult GetCooperativeMatrixFlexibleDimensionsPropertiesNV(this VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties = null) => vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, out pPropertyCount, pProperties);
}

namespace Vulkan;

extension VkInstance
{
	public mixin EnumeratePhysicalDevices_Scope(out VkPhysicalDevice[] pPhysicalDevices)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDevices(instance, var pPhysicalDeviceCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDevices = scope:mixin .[pPhysicalDeviceCount];
			result = vkEnumeratePhysicalDevices(instance, out pPhysicalDeviceCount, pPhysicalDevices.Ptr);
		}
		else
		{
			pPhysicalDevices = null;
		}
		result
	}
	public mixin EnumeratePhysicalDevices_New(out VkPhysicalDevice[] pPhysicalDevices)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDevices(instance, var pPhysicalDeviceCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDevices = new .[pPhysicalDeviceCount];
			result = vkEnumeratePhysicalDevices(instance, out pPhysicalDeviceCount, pPhysicalDevices.Ptr);
		}
		else
		{
			pPhysicalDevices = null;
		}
		result
	}
	public mixin EnumeratePhysicalDevices_New(out VkPhysicalDevice[] pPhysicalDevices, IRawAllocator alloc)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDevices(instance, var pPhysicalDeviceCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDevices = new:alloc .[pPhysicalDeviceCount];
			result = vkEnumeratePhysicalDevices(instance, out pPhysicalDeviceCount, pPhysicalDevices.Ptr);
		}
		else
		{
			pPhysicalDevices = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetQueueFamilyProperties_Scope(out VkQueueFamilyProperties[] pQueueFamilyProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = scope:mixin .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
	public mixin GetQueueFamilyProperties_New(out VkQueueFamilyProperties[] pQueueFamilyProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = new .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
	public mixin GetQueueFamilyProperties_New(out VkQueueFamilyProperties[] pQueueFamilyProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = new:alloc .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
}

static
{
	public static mixin vkEnumerateInstanceLayerProperties_Scope(out VkLayerProperties[] pProperties)
	{
		var result = vkEnumerateInstanceLayerProperties(var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkEnumerateInstanceLayerProperties(out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public static mixin vkEnumerateInstanceLayerProperties_New(out VkLayerProperties[] pProperties)
	{
		var result = vkEnumerateInstanceLayerProperties(var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkEnumerateInstanceLayerProperties(out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public static mixin vkEnumerateInstanceLayerProperties_New(out VkLayerProperties[] pProperties, IRawAllocator alloc)
	{
		var result = vkEnumerateInstanceLayerProperties(var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkEnumerateInstanceLayerProperties(out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

static
{
	public static mixin vkEnumerateInstanceExtensionProperties_Scope(c_char* pLayerName, out VkExtensionProperties[] pProperties)
	{
		var result = vkEnumerateInstanceExtensionProperties(pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkEnumerateInstanceExtensionProperties(pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public static mixin vkEnumerateInstanceExtensionProperties_New(c_char* pLayerName, out VkExtensionProperties[] pProperties)
	{
		var result = vkEnumerateInstanceExtensionProperties(pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkEnumerateInstanceExtensionProperties(pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public static mixin vkEnumerateInstanceExtensionProperties_New(c_char* pLayerName, out VkExtensionProperties[] pProperties, IRawAllocator alloc)
	{
		var result = vkEnumerateInstanceExtensionProperties(pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkEnumerateInstanceExtensionProperties(pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin EnumerateDeviceLayerProperties_Scope(out VkLayerProperties[] pProperties)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceLayerProperties(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkEnumerateDeviceLayerProperties(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin EnumerateDeviceLayerProperties_New(out VkLayerProperties[] pProperties)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceLayerProperties(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkEnumerateDeviceLayerProperties(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin EnumerateDeviceLayerProperties_New(out VkLayerProperties[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceLayerProperties(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkEnumerateDeviceLayerProperties(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin EnumerateDeviceExtensionProperties_Scope(c_char* pLayerName, out VkExtensionProperties[] pProperties)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin EnumerateDeviceExtensionProperties_New(c_char* pLayerName, out VkExtensionProperties[] pProperties)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin EnumerateDeviceExtensionProperties_New(c_char* pLayerName, out VkExtensionProperties[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetImageSparseMemoryRequirements_Scope(VkImage image, out VkSparseImageMemoryRequirements[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements(device, image, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = scope:mixin .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements(device, image, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements_New(VkImage image, out VkSparseImageMemoryRequirements[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements(device, image, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements(device, image, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements_New(VkImage image, out VkSparseImageMemoryRequirements[] pSparseMemoryRequirements, IRawAllocator alloc)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements(device, image, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new:alloc .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements(device, image, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetSparseImageFormatProperties_Scope(VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, out VkSparseImageFormatProperties[] pProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, var pPropertyCount, null);
		pProperties = scope:mixin .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, out pPropertyCount, pProperties.Ptr);
	}
	public mixin GetSparseImageFormatProperties_New(VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, out VkSparseImageFormatProperties[] pProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, var pPropertyCount, null);
		pProperties = new .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, out pPropertyCount, pProperties.Ptr);
	}
	public mixin GetSparseImageFormatProperties_New(VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, out VkSparseImageFormatProperties[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, var pPropertyCount, null);
		pProperties = new:alloc .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, out pPropertyCount, pProperties.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayPropertiesKHR_Scope(out VkDisplayPropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPropertiesKHR_New(out VkDisplayPropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPropertiesKHR_New(out VkDisplayPropertiesKHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayPlanePropertiesKHR_Scope(out VkDisplayPlanePropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPlanePropertiesKHR_New(out VkDisplayPlanePropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPlanePropertiesKHR_New(out VkDisplayPlanePropertiesKHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayPlaneSupportedDisplaysKHR_Scope(uint32 planeIndex, out VkDisplayKHR[] pDisplays)
	{
		let physicalDevice = this;
		var result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, var pDisplayCount, null);
		if (result == .VkSuccess)
		{
			pDisplays = scope:mixin .[pDisplayCount];
			result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, out pDisplayCount, pDisplays.Ptr);
		}
		else
		{
			pDisplays = null;
		}
		result
	}
	public mixin GetDisplayPlaneSupportedDisplaysKHR_New(uint32 planeIndex, out VkDisplayKHR[] pDisplays)
	{
		let physicalDevice = this;
		var result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, var pDisplayCount, null);
		if (result == .VkSuccess)
		{
			pDisplays = new .[pDisplayCount];
			result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, out pDisplayCount, pDisplays.Ptr);
		}
		else
		{
			pDisplays = null;
		}
		result
	}
	public mixin GetDisplayPlaneSupportedDisplaysKHR_New(uint32 planeIndex, out VkDisplayKHR[] pDisplays, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, var pDisplayCount, null);
		if (result == .VkSuccess)
		{
			pDisplays = new:alloc .[pDisplayCount];
			result = vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, out pDisplayCount, pDisplays.Ptr);
		}
		else
		{
			pDisplays = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayModePropertiesKHR_Scope(VkDisplayKHR display, out VkDisplayModePropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModePropertiesKHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetDisplayModePropertiesKHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayModePropertiesKHR_New(VkDisplayKHR display, out VkDisplayModePropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModePropertiesKHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetDisplayModePropertiesKHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayModePropertiesKHR_New(VkDisplayKHR display, out VkDisplayModePropertiesKHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModePropertiesKHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetDisplayModePropertiesKHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetSurfaceFormatsKHR_Scope(VkSurfaceKHR surface, out VkSurfaceFormatKHR[] pSurfaceFormats)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = scope:mixin .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
	public mixin GetSurfaceFormatsKHR_New(VkSurfaceKHR surface, out VkSurfaceFormatKHR[] pSurfaceFormats)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = new .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
	public mixin GetSurfaceFormatsKHR_New(VkSurfaceKHR surface, out VkSurfaceFormatKHR[] pSurfaceFormats, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = new:alloc .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetSurfacePresentModesKHR_Scope(VkSurfaceKHR surface, out VkPresentModeKHR[] pPresentModes)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, var pPresentModeCount, null);
		if (result == .VkSuccess)
		{
			pPresentModes = scope:mixin .[pPresentModeCount];
			result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, out pPresentModeCount, pPresentModes.Ptr);
		}
		else
		{
			pPresentModes = null;
		}
		result
	}
	public mixin GetSurfacePresentModesKHR_New(VkSurfaceKHR surface, out VkPresentModeKHR[] pPresentModes)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, var pPresentModeCount, null);
		if (result == .VkSuccess)
		{
			pPresentModes = new .[pPresentModeCount];
			result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, out pPresentModeCount, pPresentModes.Ptr);
		}
		else
		{
			pPresentModes = null;
		}
		result
	}
	public mixin GetSurfacePresentModesKHR_New(VkSurfaceKHR surface, out VkPresentModeKHR[] pPresentModes, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, var pPresentModeCount, null);
		if (result == .VkSuccess)
		{
			pPresentModes = new:alloc .[pPresentModeCount];
			result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, out pPresentModeCount, pPresentModes.Ptr);
		}
		else
		{
			pPresentModes = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetSwapchainImagesKHR_Scope(VkSwapchainKHR swapchain, out VkImage[] pSwapchainImages)
	{
		let device = this;
		var result = vkGetSwapchainImagesKHR(device, swapchain, var pSwapchainImageCount, null);
		if (result == .VkSuccess)
		{
			pSwapchainImages = scope:mixin .[pSwapchainImageCount];
			result = vkGetSwapchainImagesKHR(device, swapchain, out pSwapchainImageCount, pSwapchainImages.Ptr);
		}
		else
		{
			pSwapchainImages = null;
		}
		result
	}
	public mixin GetSwapchainImagesKHR_New(VkSwapchainKHR swapchain, out VkImage[] pSwapchainImages)
	{
		let device = this;
		var result = vkGetSwapchainImagesKHR(device, swapchain, var pSwapchainImageCount, null);
		if (result == .VkSuccess)
		{
			pSwapchainImages = new .[pSwapchainImageCount];
			result = vkGetSwapchainImagesKHR(device, swapchain, out pSwapchainImageCount, pSwapchainImages.Ptr);
		}
		else
		{
			pSwapchainImages = null;
		}
		result
	}
	public mixin GetSwapchainImagesKHR_New(VkSwapchainKHR swapchain, out VkImage[] pSwapchainImages, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetSwapchainImagesKHR(device, swapchain, var pSwapchainImageCount, null);
		if (result == .VkSuccess)
		{
			pSwapchainImages = new:alloc .[pSwapchainImageCount];
			result = vkGetSwapchainImagesKHR(device, swapchain, out pSwapchainImageCount, pSwapchainImages.Ptr);
		}
		else
		{
			pSwapchainImages = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetQueueFamilyProperties2_Scope(out VkQueueFamilyProperties2[] pQueueFamilyProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = scope:mixin .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
	public mixin GetQueueFamilyProperties2_New(out VkQueueFamilyProperties2[] pQueueFamilyProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = new .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
	public mixin GetQueueFamilyProperties2_New(out VkQueueFamilyProperties2[] pQueueFamilyProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, var pQueueFamilyPropertyCount, null);
		pQueueFamilyProperties = new:alloc .[pQueueFamilyPropertyCount];
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, out pQueueFamilyPropertyCount, pQueueFamilyProperties.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetSparseImageFormatProperties2_Scope(VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out VkSparseImageFormatProperties2[] pProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, var pPropertyCount, null);
		pProperties = scope:mixin .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, out pPropertyCount, pProperties.Ptr);
	}
	public mixin GetSparseImageFormatProperties2_New(VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out VkSparseImageFormatProperties2[] pProperties)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, var pPropertyCount, null);
		pProperties = new .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, out pPropertyCount, pProperties.Ptr);
	}
	public mixin GetSparseImageFormatProperties2_New(VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out VkSparseImageFormatProperties2[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, var pPropertyCount, null);
		pProperties = new:alloc .[pPropertyCount];
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, out pPropertyCount, pProperties.Ptr);
	}
}

extension VkInstance
{
	public mixin EnumeratePhysicalDeviceGroups_Scope(out VkPhysicalDeviceGroupProperties[] pPhysicalDeviceGroupProperties)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDeviceGroups(instance, var pPhysicalDeviceGroupCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDeviceGroupProperties = scope:mixin .[pPhysicalDeviceGroupCount];
			result = vkEnumeratePhysicalDeviceGroups(instance, out pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties.Ptr);
		}
		else
		{
			pPhysicalDeviceGroupProperties = null;
		}
		result
	}
	public mixin EnumeratePhysicalDeviceGroups_New(out VkPhysicalDeviceGroupProperties[] pPhysicalDeviceGroupProperties)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDeviceGroups(instance, var pPhysicalDeviceGroupCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDeviceGroupProperties = new .[pPhysicalDeviceGroupCount];
			result = vkEnumeratePhysicalDeviceGroups(instance, out pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties.Ptr);
		}
		else
		{
			pPhysicalDeviceGroupProperties = null;
		}
		result
	}
	public mixin EnumeratePhysicalDeviceGroups_New(out VkPhysicalDeviceGroupProperties[] pPhysicalDeviceGroupProperties, IRawAllocator alloc)
	{
		let instance = this;
		var result = vkEnumeratePhysicalDeviceGroups(instance, var pPhysicalDeviceGroupCount, null);
		if (result == .VkSuccess)
		{
			pPhysicalDeviceGroupProperties = new:alloc .[pPhysicalDeviceGroupCount];
			result = vkEnumeratePhysicalDeviceGroups(instance, out pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties.Ptr);
		}
		else
		{
			pPhysicalDeviceGroupProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetPresentRectanglesKHR_Scope(VkSurfaceKHR surface, out VkRect2D[] pRects)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, var pRectCount, null);
		if (result == .VkSuccess)
		{
			pRects = scope:mixin .[pRectCount];
			result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, out pRectCount, pRects.Ptr);
		}
		else
		{
			pRects = null;
		}
		result
	}
	public mixin GetPresentRectanglesKHR_New(VkSurfaceKHR surface, out VkRect2D[] pRects)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, var pRectCount, null);
		if (result == .VkSuccess)
		{
			pRects = new .[pRectCount];
			result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, out pRectCount, pRects.Ptr);
		}
		else
		{
			pRects = null;
		}
		result
	}
	public mixin GetPresentRectanglesKHR_New(VkSurfaceKHR surface, out VkRect2D[] pRects, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, var pRectCount, null);
		if (result == .VkSuccess)
		{
			pRects = new:alloc .[pRectCount];
			result = vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, out pRectCount, pRects.Ptr);
		}
		else
		{
			pRects = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetPastPresentationTimingGOOGLE_Scope(VkSwapchainKHR swapchain, out VkPastPresentationTimingGOOGLE[] pPresentationTimings)
	{
		let device = this;
		var result = vkGetPastPresentationTimingGOOGLE(device, swapchain, var pPresentationTimingCount, null);
		if (result == .VkSuccess)
		{
			pPresentationTimings = scope:mixin .[pPresentationTimingCount];
			result = vkGetPastPresentationTimingGOOGLE(device, swapchain, out pPresentationTimingCount, pPresentationTimings.Ptr);
		}
		else
		{
			pPresentationTimings = null;
		}
		result
	}
	public mixin GetPastPresentationTimingGOOGLE_New(VkSwapchainKHR swapchain, out VkPastPresentationTimingGOOGLE[] pPresentationTimings)
	{
		let device = this;
		var result = vkGetPastPresentationTimingGOOGLE(device, swapchain, var pPresentationTimingCount, null);
		if (result == .VkSuccess)
		{
			pPresentationTimings = new .[pPresentationTimingCount];
			result = vkGetPastPresentationTimingGOOGLE(device, swapchain, out pPresentationTimingCount, pPresentationTimings.Ptr);
		}
		else
		{
			pPresentationTimings = null;
		}
		result
	}
	public mixin GetPastPresentationTimingGOOGLE_New(VkSwapchainKHR swapchain, out VkPastPresentationTimingGOOGLE[] pPresentationTimings, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetPastPresentationTimingGOOGLE(device, swapchain, var pPresentationTimingCount, null);
		if (result == .VkSuccess)
		{
			pPresentationTimings = new:alloc .[pPresentationTimingCount];
			result = vkGetPastPresentationTimingGOOGLE(device, swapchain, out pPresentationTimingCount, pPresentationTimings.Ptr);
		}
		else
		{
			pPresentationTimings = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetSurfaceFormats2KHR_Scope(VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out VkSurfaceFormat2KHR[] pSurfaceFormats)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = scope:mixin .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
	public mixin GetSurfaceFormats2KHR_New(VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out VkSurfaceFormat2KHR[] pSurfaceFormats)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = new .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
	public mixin GetSurfaceFormats2KHR_New(VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out VkSurfaceFormat2KHR[] pSurfaceFormats, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, var pSurfaceFormatCount, null);
		if (result == .VkSuccess)
		{
			pSurfaceFormats = new:alloc .[pSurfaceFormatCount];
			result = vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, out pSurfaceFormatCount, pSurfaceFormats.Ptr);
		}
		else
		{
			pSurfaceFormats = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayProperties2KHR_Scope(out VkDisplayProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayProperties2KHR_New(out VkDisplayProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayProperties2KHR_New(out VkDisplayProperties2KHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayPlaneProperties2KHR_Scope(out VkDisplayPlaneProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPlaneProperties2KHR_New(out VkDisplayPlaneProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayPlaneProperties2KHR_New(out VkDisplayPlaneProperties2KHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetDisplayModeProperties2KHR_Scope(VkDisplayKHR display, out VkDisplayModeProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModeProperties2KHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetDisplayModeProperties2KHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayModeProperties2KHR_New(VkDisplayKHR display, out VkDisplayModeProperties2KHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModeProperties2KHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetDisplayModeProperties2KHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetDisplayModeProperties2KHR_New(VkDisplayKHR display, out VkDisplayModeProperties2KHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetDisplayModeProperties2KHR(physicalDevice, display, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetDisplayModeProperties2KHR(physicalDevice, display, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetImageSparseMemoryRequirements2_Scope(VkImageSparseMemoryRequirementsInfo2* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements2(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = scope:mixin .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements2(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements2_New(VkImageSparseMemoryRequirementsInfo2* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements2(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements2(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements2_New(VkImageSparseMemoryRequirementsInfo2* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements, IRawAllocator alloc)
	{
		let device = this;
		vkGetImageSparseMemoryRequirements2(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new:alloc .[pSparseMemoryRequirementCount];
		vkGetImageSparseMemoryRequirements2(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
}

extension VkDevice
{
	public mixin GetImageSparseMemoryRequirements_Scope(VkDeviceImageMemoryRequirements* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = scope:mixin .[pSparseMemoryRequirementCount];
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements_New(VkDeviceImageMemoryRequirements* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements)
	{
		let device = this;
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new .[pSparseMemoryRequirementCount];
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
	public mixin GetImageSparseMemoryRequirements_New(VkDeviceImageMemoryRequirements* pInfo, out VkSparseImageMemoryRequirements2[] pSparseMemoryRequirements, IRawAllocator alloc)
	{
		let device = this;
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, var pSparseMemoryRequirementCount, null);
		pSparseMemoryRequirements = new:alloc .[pSparseMemoryRequirementCount];
		vkGetDeviceImageSparseMemoryRequirements(device, pInfo, out pSparseMemoryRequirementCount, pSparseMemoryRequirements.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetCalibrateableTimeDomainsKHR_Scope(out VkTimeDomainKHR[] pTimeDomains)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, var pTimeDomainCount, null);
		if (result == .VkSuccess)
		{
			pTimeDomains = scope:mixin .[pTimeDomainCount];
			result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, out pTimeDomainCount, pTimeDomains.Ptr);
		}
		else
		{
			pTimeDomains = null;
		}
		result
	}
	public mixin GetCalibrateableTimeDomainsKHR_New(out VkTimeDomainKHR[] pTimeDomains)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, var pTimeDomainCount, null);
		if (result == .VkSuccess)
		{
			pTimeDomains = new .[pTimeDomainCount];
			result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, out pTimeDomainCount, pTimeDomains.Ptr);
		}
		else
		{
			pTimeDomains = null;
		}
		result
	}
	public mixin GetCalibrateableTimeDomainsKHR_New(out VkTimeDomainKHR[] pTimeDomains, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, var pTimeDomainCount, null);
		if (result == .VkSuccess)
		{
			pTimeDomains = new:alloc .[pTimeDomainCount];
			result = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, out pTimeDomainCount, pTimeDomains.Ptr);
		}
		else
		{
			pTimeDomains = null;
		}
		result
	}
}

extension VkQueue
{
	public mixin GetCheckpointDataNV_Scope(out VkCheckpointDataNV[] pCheckpointData)
	{
		let queue = this;
		vkGetQueueCheckpointDataNV(queue, var pCheckpointDataCount, null);
		pCheckpointData = scope:mixin .[pCheckpointDataCount];
		vkGetQueueCheckpointDataNV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
	public mixin GetCheckpointDataNV_New(out VkCheckpointDataNV[] pCheckpointData)
	{
		let queue = this;
		vkGetQueueCheckpointDataNV(queue, var pCheckpointDataCount, null);
		pCheckpointData = new .[pCheckpointDataCount];
		vkGetQueueCheckpointDataNV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
	public mixin GetCheckpointDataNV_New(out VkCheckpointDataNV[] pCheckpointData, IRawAllocator alloc)
	{
		let queue = this;
		vkGetQueueCheckpointDataNV(queue, var pCheckpointDataCount, null);
		pCheckpointData = new:alloc .[pCheckpointDataCount];
		vkGetQueueCheckpointDataNV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetCooperativeMatrixPropertiesNV_Scope(out VkCooperativeMatrixPropertiesNV[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixPropertiesNV_New(out VkCooperativeMatrixPropertiesNV[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixPropertiesNV_New(out VkCooperativeMatrixPropertiesNV[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin EnumerateQueueFamilyPerformanceQueryCountersKHR_Scope(uint32 queueFamilyIndex, out VkPerformanceCounterKHR[] pCounters, out VkPerformanceCounterDescriptionKHR[] pCounterDescriptions)
	{
		let physicalDevice = this;
		var result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, var pCounterCount, null, null);
		if (result == .VkSuccess)
		{
			pCounters = scope:mixin .[pCounterCount];
			pCounterDescriptions = scope:mixin .[pCounterCount];
			result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, out pCounterCount, pCounters.Ptr, pCounterDescriptions.Ptr);
		}
		else
		{
			pCounters = null;
			pCounterDescriptions = null;
		}
		result
	}
	public mixin EnumerateQueueFamilyPerformanceQueryCountersKHR_New(uint32 queueFamilyIndex, out VkPerformanceCounterKHR[] pCounters, out VkPerformanceCounterDescriptionKHR[] pCounterDescriptions)
	{
		let physicalDevice = this;
		var result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, var pCounterCount, null, null);
		if (result == .VkSuccess)
		{
			pCounters = new .[pCounterCount];
			pCounterDescriptions = new .[pCounterCount];
			result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, out pCounterCount, pCounters.Ptr, pCounterDescriptions.Ptr);
		}
		else
		{
			pCounters = null;
			pCounterDescriptions = null;
		}
		result
	}
	public mixin EnumerateQueueFamilyPerformanceQueryCountersKHR_New(uint32 queueFamilyIndex, out VkPerformanceCounterKHR[] pCounters, out VkPerformanceCounterDescriptionKHR[] pCounterDescriptions, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, var pCounterCount, null, null);
		if (result == .VkSuccess)
		{
			pCounters = new:alloc .[pCounterCount];
			pCounterDescriptions = new:alloc .[pCounterCount];
			result = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, out pCounterCount, pCounters.Ptr, pCounterDescriptions.Ptr);
		}
		else
		{
			pCounters = null;
			pCounterDescriptions = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetSupportedFramebufferMixedSamplesCombinationsNV_Scope(out VkFramebufferMixedSamplesCombinationNV[] pCombinations)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, var pCombinationCount, null);
		if (result == .VkSuccess)
		{
			pCombinations = scope:mixin .[pCombinationCount];
			result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, out pCombinationCount, pCombinations.Ptr);
		}
		else
		{
			pCombinations = null;
		}
		result
	}
	public mixin GetSupportedFramebufferMixedSamplesCombinationsNV_New(out VkFramebufferMixedSamplesCombinationNV[] pCombinations)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, var pCombinationCount, null);
		if (result == .VkSuccess)
		{
			pCombinations = new .[pCombinationCount];
			result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, out pCombinationCount, pCombinations.Ptr);
		}
		else
		{
			pCombinations = null;
		}
		result
	}
	public mixin GetSupportedFramebufferMixedSamplesCombinationsNV_New(out VkFramebufferMixedSamplesCombinationNV[] pCombinations, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, var pCombinationCount, null);
		if (result == .VkSuccess)
		{
			pCombinations = new:alloc .[pCombinationCount];
			result = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, out pCombinationCount, pCombinations.Ptr);
		}
		else
		{
			pCombinations = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetPipelineExecutablePropertiesKHR_Scope(VkPipelineInfoKHR* pPipelineInfo, out VkPipelineExecutablePropertiesKHR[] pProperties)
	{
		let device = this;
		var result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, var pExecutableCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pExecutableCount];
			result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, out pExecutableCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetPipelineExecutablePropertiesKHR_New(VkPipelineInfoKHR* pPipelineInfo, out VkPipelineExecutablePropertiesKHR[] pProperties)
	{
		let device = this;
		var result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, var pExecutableCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pExecutableCount];
			result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, out pExecutableCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetPipelineExecutablePropertiesKHR_New(VkPipelineInfoKHR* pPipelineInfo, out VkPipelineExecutablePropertiesKHR[] pProperties, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, var pExecutableCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pExecutableCount];
			result = vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, out pExecutableCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetPipelineExecutableStatisticsKHR_Scope(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableStatisticKHR[] pStatistics)
	{
		let device = this;
		var result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, var pStatisticCount, null);
		if (result == .VkSuccess)
		{
			pStatistics = scope:mixin .[pStatisticCount];
			result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, out pStatisticCount, pStatistics.Ptr);
		}
		else
		{
			pStatistics = null;
		}
		result
	}
	public mixin GetPipelineExecutableStatisticsKHR_New(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableStatisticKHR[] pStatistics)
	{
		let device = this;
		var result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, var pStatisticCount, null);
		if (result == .VkSuccess)
		{
			pStatistics = new .[pStatisticCount];
			result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, out pStatisticCount, pStatistics.Ptr);
		}
		else
		{
			pStatistics = null;
		}
		result
	}
	public mixin GetPipelineExecutableStatisticsKHR_New(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableStatisticKHR[] pStatistics, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, var pStatisticCount, null);
		if (result == .VkSuccess)
		{
			pStatistics = new:alloc .[pStatisticCount];
			result = vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, out pStatisticCount, pStatistics.Ptr);
		}
		else
		{
			pStatistics = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetPipelineExecutableInternalRepresentationsKHR_Scope(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableInternalRepresentationKHR[] pInternalRepresentations)
	{
		let device = this;
		var result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, var pInternalRepresentationCount, null);
		if (result == .VkSuccess)
		{
			pInternalRepresentations = scope:mixin .[pInternalRepresentationCount];
			result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, out pInternalRepresentationCount, pInternalRepresentations.Ptr);
		}
		else
		{
			pInternalRepresentations = null;
		}
		result
	}
	public mixin GetPipelineExecutableInternalRepresentationsKHR_New(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableInternalRepresentationKHR[] pInternalRepresentations)
	{
		let device = this;
		var result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, var pInternalRepresentationCount, null);
		if (result == .VkSuccess)
		{
			pInternalRepresentations = new .[pInternalRepresentationCount];
			result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, out pInternalRepresentationCount, pInternalRepresentations.Ptr);
		}
		else
		{
			pInternalRepresentations = null;
		}
		result
	}
	public mixin GetPipelineExecutableInternalRepresentationsKHR_New(VkPipelineExecutableInfoKHR* pExecutableInfo, out VkPipelineExecutableInternalRepresentationKHR[] pInternalRepresentations, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, var pInternalRepresentationCount, null);
		if (result == .VkSuccess)
		{
			pInternalRepresentations = new:alloc .[pInternalRepresentationCount];
			result = vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, out pInternalRepresentationCount, pInternalRepresentations.Ptr);
		}
		else
		{
			pInternalRepresentations = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetToolProperties_Scope(out VkPhysicalDeviceToolProperties[] pToolProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceToolProperties(physicalDevice, var pToolCount, null);
		if (result == .VkSuccess)
		{
			pToolProperties = scope:mixin .[pToolCount];
			result = vkGetPhysicalDeviceToolProperties(physicalDevice, out pToolCount, pToolProperties.Ptr);
		}
		else
		{
			pToolProperties = null;
		}
		result
	}
	public mixin GetToolProperties_New(out VkPhysicalDeviceToolProperties[] pToolProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceToolProperties(physicalDevice, var pToolCount, null);
		if (result == .VkSuccess)
		{
			pToolProperties = new .[pToolCount];
			result = vkGetPhysicalDeviceToolProperties(physicalDevice, out pToolCount, pToolProperties.Ptr);
		}
		else
		{
			pToolProperties = null;
		}
		result
	}
	public mixin GetToolProperties_New(out VkPhysicalDeviceToolProperties[] pToolProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceToolProperties(physicalDevice, var pToolCount, null);
		if (result == .VkSuccess)
		{
			pToolProperties = new:alloc .[pToolCount];
			result = vkGetPhysicalDeviceToolProperties(physicalDevice, out pToolCount, pToolProperties.Ptr);
		}
		else
		{
			pToolProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetFragmentShadingRatesKHR_Scope(out VkPhysicalDeviceFragmentShadingRateKHR[] pFragmentShadingRates)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, var pFragmentShadingRateCount, null);
		if (result == .VkSuccess)
		{
			pFragmentShadingRates = scope:mixin .[pFragmentShadingRateCount];
			result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, out pFragmentShadingRateCount, pFragmentShadingRates.Ptr);
		}
		else
		{
			pFragmentShadingRates = null;
		}
		result
	}
	public mixin GetFragmentShadingRatesKHR_New(out VkPhysicalDeviceFragmentShadingRateKHR[] pFragmentShadingRates)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, var pFragmentShadingRateCount, null);
		if (result == .VkSuccess)
		{
			pFragmentShadingRates = new .[pFragmentShadingRateCount];
			result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, out pFragmentShadingRateCount, pFragmentShadingRates.Ptr);
		}
		else
		{
			pFragmentShadingRates = null;
		}
		result
	}
	public mixin GetFragmentShadingRatesKHR_New(out VkPhysicalDeviceFragmentShadingRateKHR[] pFragmentShadingRates, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, var pFragmentShadingRateCount, null);
		if (result == .VkSuccess)
		{
			pFragmentShadingRates = new:alloc .[pFragmentShadingRateCount];
			result = vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, out pFragmentShadingRateCount, pFragmentShadingRates.Ptr);
		}
		else
		{
			pFragmentShadingRates = null;
		}
		result
	}
}

extension VkQueue
{
	public mixin GetCheckpointData2NV_Scope(out VkCheckpointData2NV[] pCheckpointData)
	{
		let queue = this;
		vkGetQueueCheckpointData2NV(queue, var pCheckpointDataCount, null);
		pCheckpointData = scope:mixin .[pCheckpointDataCount];
		vkGetQueueCheckpointData2NV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
	public mixin GetCheckpointData2NV_New(out VkCheckpointData2NV[] pCheckpointData)
	{
		let queue = this;
		vkGetQueueCheckpointData2NV(queue, var pCheckpointDataCount, null);
		pCheckpointData = new .[pCheckpointDataCount];
		vkGetQueueCheckpointData2NV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
	public mixin GetCheckpointData2NV_New(out VkCheckpointData2NV[] pCheckpointData, IRawAllocator alloc)
	{
		let queue = this;
		vkGetQueueCheckpointData2NV(queue, var pCheckpointDataCount, null);
		pCheckpointData = new:alloc .[pCheckpointDataCount];
		vkGetQueueCheckpointData2NV(queue, out pCheckpointDataCount, pCheckpointData.Ptr);
	}
}

extension VkPhysicalDevice
{
	public mixin GetVideoFormatPropertiesKHR_Scope(VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, out VkVideoFormatPropertiesKHR[] pVideoFormatProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, var pVideoFormatPropertyCount, null);
		if (result == .VkSuccess)
		{
			pVideoFormatProperties = scope:mixin .[pVideoFormatPropertyCount];
			result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, out pVideoFormatPropertyCount, pVideoFormatProperties.Ptr);
		}
		else
		{
			pVideoFormatProperties = null;
		}
		result
	}
	public mixin GetVideoFormatPropertiesKHR_New(VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, out VkVideoFormatPropertiesKHR[] pVideoFormatProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, var pVideoFormatPropertyCount, null);
		if (result == .VkSuccess)
		{
			pVideoFormatProperties = new .[pVideoFormatPropertyCount];
			result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, out pVideoFormatPropertyCount, pVideoFormatProperties.Ptr);
		}
		else
		{
			pVideoFormatProperties = null;
		}
		result
	}
	public mixin GetVideoFormatPropertiesKHR_New(VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, out VkVideoFormatPropertiesKHR[] pVideoFormatProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, var pVideoFormatPropertyCount, null);
		if (result == .VkSuccess)
		{
			pVideoFormatProperties = new:alloc .[pVideoFormatPropertyCount];
			result = vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, out pVideoFormatPropertyCount, pVideoFormatProperties.Ptr);
		}
		else
		{
			pVideoFormatProperties = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetVideoSessionMemoryRequirementsKHR_Scope(VkVideoSessionKHR videoSession, out VkVideoSessionMemoryRequirementsKHR[] pMemoryRequirements)
	{
		let device = this;
		var result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, var pMemoryRequirementsCount, null);
		if (result == .VkSuccess)
		{
			pMemoryRequirements = scope:mixin .[pMemoryRequirementsCount];
			result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, out pMemoryRequirementsCount, pMemoryRequirements.Ptr);
		}
		else
		{
			pMemoryRequirements = null;
		}
		result
	}
	public mixin GetVideoSessionMemoryRequirementsKHR_New(VkVideoSessionKHR videoSession, out VkVideoSessionMemoryRequirementsKHR[] pMemoryRequirements)
	{
		let device = this;
		var result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, var pMemoryRequirementsCount, null);
		if (result == .VkSuccess)
		{
			pMemoryRequirements = new .[pMemoryRequirementsCount];
			result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, out pMemoryRequirementsCount, pMemoryRequirements.Ptr);
		}
		else
		{
			pMemoryRequirements = null;
		}
		result
	}
	public mixin GetVideoSessionMemoryRequirementsKHR_New(VkVideoSessionKHR videoSession, out VkVideoSessionMemoryRequirementsKHR[] pMemoryRequirements, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, var pMemoryRequirementsCount, null);
		if (result == .VkSuccess)
		{
			pMemoryRequirements = new:alloc .[pMemoryRequirementsCount];
			result = vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, out pMemoryRequirementsCount, pMemoryRequirements.Ptr);
		}
		else
		{
			pMemoryRequirements = null;
		}
		result
	}
}

extension VkDevice
{
	public mixin GetFramebufferTilePropertiesQCOM_Scope(VkFramebuffer framebuffer, out VkTilePropertiesQCOM[] pProperties)
	{
		let device = this;
		var result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, var pPropertiesCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertiesCount];
			result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, out pPropertiesCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetFramebufferTilePropertiesQCOM_New(VkFramebuffer framebuffer, out VkTilePropertiesQCOM[] pProperties)
	{
		let device = this;
		var result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, var pPropertiesCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertiesCount];
			result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, out pPropertiesCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetFramebufferTilePropertiesQCOM_New(VkFramebuffer framebuffer, out VkTilePropertiesQCOM[] pProperties, IRawAllocator alloc)
	{
		let device = this;
		var result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, var pPropertiesCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertiesCount];
			result = vkGetFramebufferTilePropertiesQCOM(device, framebuffer, out pPropertiesCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetOpticalFlowImageFormatsNV_Scope(VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, out VkOpticalFlowImageFormatPropertiesNV[] pImageFormatProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, var pFormatCount, null);
		if (result == .VkSuccess)
		{
			pImageFormatProperties = scope:mixin .[pFormatCount];
			result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, out pFormatCount, pImageFormatProperties.Ptr);
		}
		else
		{
			pImageFormatProperties = null;
		}
		result
	}
	public mixin GetOpticalFlowImageFormatsNV_New(VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, out VkOpticalFlowImageFormatPropertiesNV[] pImageFormatProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, var pFormatCount, null);
		if (result == .VkSuccess)
		{
			pImageFormatProperties = new .[pFormatCount];
			result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, out pFormatCount, pImageFormatProperties.Ptr);
		}
		else
		{
			pImageFormatProperties = null;
		}
		result
	}
	public mixin GetOpticalFlowImageFormatsNV_New(VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, out VkOpticalFlowImageFormatPropertiesNV[] pImageFormatProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, var pFormatCount, null);
		if (result == .VkSuccess)
		{
			pImageFormatProperties = new:alloc .[pFormatCount];
			result = vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, out pFormatCount, pImageFormatProperties.Ptr);
		}
		else
		{
			pImageFormatProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetCooperativeMatrixPropertiesKHR_Scope(out VkCooperativeMatrixPropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixPropertiesKHR_New(out VkCooperativeMatrixPropertiesKHR[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixPropertiesKHR_New(out VkCooperativeMatrixPropertiesKHR[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}

extension VkPhysicalDevice
{
	public mixin GetCooperativeMatrixFlexibleDimensionsPropertiesNV_Scope(out VkCooperativeMatrixFlexibleDimensionsPropertiesNV[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = scope:mixin .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixFlexibleDimensionsPropertiesNV_New(out VkCooperativeMatrixFlexibleDimensionsPropertiesNV[] pProperties)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
	public mixin GetCooperativeMatrixFlexibleDimensionsPropertiesNV_New(out VkCooperativeMatrixFlexibleDimensionsPropertiesNV[] pProperties, IRawAllocator alloc)
	{
		let physicalDevice = this;
		var result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, var pPropertyCount, null);
		if (result == .VkSuccess)
		{
			pProperties = new:alloc .[pPropertyCount];
			result = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, out pPropertyCount, pProperties.Ptr);
		}
		else
		{
			pProperties = null;
		}
		result
	}
}
